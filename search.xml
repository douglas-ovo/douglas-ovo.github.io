<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>hexo+git搭建个人博客</title>
    <url>/2022/07/01/a001-hexo+git%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><ol>
<li>新建项目文件夹，安装hexo</li>
</ol>
<figure class="highlight cmake"><table><tr><td class="code"><pre><code class="hljs cmake">npm <span class="hljs-keyword">install</span> hexo | npm <span class="hljs-keyword">install</span> hexo -g<br></code></pre></td></tr></table></figure>

<ol start="2">
<li>初始化</li>
</ol>
<figure class="highlight csharp"><table><tr><td class="code"><pre><code class="hljs csharp">hexo <span class="hljs-keyword">init</span><br></code></pre></td></tr></table></figure>

<ol start="3">
<li>安装git插件</li>
</ol>
<figure class="highlight ada"><table><tr><td class="code"><pre><code class="hljs ada">npm install hexo-deployer-git <span class="hljs-comment">--save</span><br></code></pre></td></tr></table></figure>

<ol start="4">
<li>配置_config.yml</li>
</ol>
<figure class="highlight yml"><table><tr><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">git@github.com:xxx/xxx.github.io.git</span> <br>  <span class="hljs-attr">branch:</span> [<span class="hljs-string">branch-name</span>]         <span class="hljs-comment">#仓库默认分支</span><br></code></pre></td></tr></table></figure>

<h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><ol>
<li>清空public文件夹</li>
</ol>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo clean</span>                <br></code></pre></td></tr></table></figure>

<ol start="2">
<li>生成public文件夹</li>
</ol>
<figure class="highlight verilog"><table><tr><td class="code"><pre><code class="hljs verilog">hexo g  | hexo <span class="hljs-keyword">generate</span>   <br></code></pre></td></tr></table></figure>

<ol start="3">
<li>启动本地服务,默认地址为<a href="http://localhost:4000/(%E5%8F%AF%E8%B7%B3%E8%BF%87)">http://localhost:4000/(可跳过)</a></li>
</ol>
<figure class="highlight 1c"><table><tr><td class="code"><pre><code class="hljs 1c">hexo s  <span class="hljs-string">| hexo server </span><br></code></pre></td></tr></table></figure>

<ol start="4">
<li>部署站点，在本地生成.deploy_git文件夹，并将编译后的文件上传至 GitHub</li>
</ol>
<figure class="highlight 1c"><table><tr><td class="code"><pre><code class="hljs 1c">hexo d  <span class="hljs-string">| hexo deploy</span><br></code></pre></td></tr></table></figure>

<h3 id="写作"><a href="#写作" class="headerlink" title="写作"></a>写作</h3><ol>
<li>新建md文件</li>
</ol>
<figure class="highlight vim"><table><tr><td class="code"><pre><code class="hljs vim">hexo <span class="hljs-keyword">new</span> [layout] <span class="hljs-symbol">&lt;title&gt;</span> <br>//如：hexo <span class="hljs-keyword">new</span> photo <span class="hljs-string">&#x27;test&#x27;</span><br></code></pre></td></tr></table></figure>

<p>上述指令执行时，Hexo 会尝试在 scaffolds 中寻找photo.md布局，若找到，则根据该布局新建文章；<br>若未找到或指令中未指定该参数，则使用post.md新建文章。新建文章的名称在_config.yml中配置；<br>scaffolds 中的模板没有生成命令，需要手动生成。</p>
<ol start="2">
<li>layout的指定</li>
</ol>
<blockquote>
<p>不写默认：以post.md为模板，_posts下生成文件；<br>draft：以draft.md为模板，_draft文件夹下生成草稿；<br>page：以page.md为模板，source下生成文件夹，并自带index.md，可以通过xxx.github.io&#x2F;文件夹名 访问，相当于新建一个页面；<br>自定义xxx：以xxx.md为模板，_posts下生成文件。</p>
</blockquote>
<h3 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h3><p><a href="https://hexo.fluid-dev.com/docs/start/">fluid</a></p>
<h3 id="评论"><a href="#评论" class="headerlink" title="评论"></a>评论</h3><p><a href="https://valine.js.org/quickstart.html">valine</a></p>
<hr>
<p>官方文档：<a href="https://hexo.io/zh-cn/">hexo</a></p>
]]></content>
      <categories>
        <category>前端学习</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>优雅的markdown</title>
    <url>/2022/07/06/a002-%E4%BC%98%E9%9B%85%E7%9A%84markdown/</url>
    <content><![CDATA[<h3 id="创建标题"><a href="#创建标题" class="headerlink" title="创建标题"></a>创建标题</h3><p>格式：#+空格+名称 ，最后回车。实现标题的添加，不同的#数量对应不同的标题，一级标题一个，二级两个类推。</p>
<h3 id="字体设置"><a href="#字体设置" class="headerlink" title="字体设置"></a>字体设置</h3><ol>
<li><p>加粗<br><strong>字体</strong>左右两边加两个*</p>
</li>
<li><p>斜体<br><em>字体</em>左右两边加一个*</p>
</li>
<li><p>删除线<br><del>字体</del>左右两边加两个波浪线~</p>
</li>
</ol>
<h3 id="添加引用"><a href="#添加引用" class="headerlink" title="添加引用"></a>添加引用</h3><blockquote>
<p>是通过大于号&gt;+ 空格，文字最后回车</p>
</blockquote>
<h3 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h3><p>三个- 或三个*</p>
<h3 id="添加图片"><a href="#添加图片" class="headerlink" title="添加图片"></a>添加图片</h3><p>![自己起的图片名称]+(),可以在括号里添加本地图片或网络图片<br><img src="https://csfile.ossxrcloud.net/ydnImg/200X200/802dac9a93084_1641346280372.png" alt="实例"></p>
<h3 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h3><p>[名称]+()，括号里面添加1的网址<br><a href="https://markdown.com.cn/">实例</a></p>
<h3 id="添加列表"><a href="#添加列表" class="headerlink" title="添加列表"></a>添加列表</h3><h4 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h4><p>1+点号（英文输入法）+空格</p>
<ol>
<li>a</li>
<li>b</li>
</ol>
<h4 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h4><p>*或+或- 加空格</p>
<ul>
<li>a</li>
<li>b</li>
</ul>
<h3 id="添加表格"><a href="#添加表格" class="headerlink" title="添加表格"></a>添加表格</h3><p>竖杠</p>
<table>
<thead>
<tr>
<th>名字</th>
<th>性别</th>
<th>生日</th>
</tr>
</thead>
<tbody><tr>
<td>s1xpences</td>
<td>男</td>
<td>18</td>
</tr>
</tbody></table>
<h3 id="添加代码块"><a href="#添加代码块" class="headerlink" title="添加代码块"></a>添加代码块</h3><p>代码片段<br>一个<code>或者两个</code>包裹</p>
<p><code>测试</code></p>
<p><code>测试测试</code></p>
<p>代码块<br>三个&#96;+语言</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> a = <span class="hljs-string">&#x27;0.0&#x27;</span><br></code></pre></td></tr></table></figure>

<hr>
<p>官方文档：<a href="https://markdown.com.cn/">markdown</a></p>
]]></content>
      <categories>
        <category>前端学习</category>
      </categories>
      <tags>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>有趣|有用的网站</title>
    <url>/2022/07/06/a003-%E6%9C%89%E8%B6%A3-%E6%9C%89%E7%94%A8%E7%9A%84%E7%BD%91%E7%AB%99/</url>
    <content><![CDATA[<h3 id="影音类"><a href="#影音类" class="headerlink" title="影音类"></a>影音类</h3><ol>
<li><a href="https://4kan.vip/">4kan.vip&#x2F;</a></li>
<li><a href="https://vip.bljiex.com/">vip.bljiex.com&#x2F;</a></li>
<li><a href="http://music.alang.run/#/">一起听歌吧</a></li>
<li><a href="http://music.zhuolin.wang/">VIP 付费音乐解析下载</a></li>
<li><a href="http://www.mvcat.com/">影猫</a></li>
<li><a href="http://www.549.tv/#%E8%A7%82%E5%BD%B1%E8%B5%84%E6%BA%90">网盘资源搜索</a></li>
<li><a href="https://pan666.cn/">阿里云盘资源</a></li>
<li><a href="https://www.jitashe.org/guide/hottab/">吉他谱</a></li>
</ol>
<h3 id="休闲类"><a href="#休闲类" class="headerlink" title="休闲类"></a>休闲类</h3><ol>
<li><a href="https://www.yikm.net/">小霸王</a></li>
<li><a href="https://lemonjing.com/">柠檬精</a></li>
<li><a href="https://www.autopiano.cn/">在线弹钢琴</a></li>
<li><a href="https://www.hi2future.com/">时光邮局</a></li>
<li><a href="https://drrr.com/">公共聊天室</a></li>
<li><a href="https://web.xiangyin.mobi/#/xy//sentences">故乡的声音</a></li>
<li><a href="https://taiko.bui.pm/">太鼓ウェブ - Taiko Web</a></li>
<li><a href="https://www.nimingqiang.com/">匿名墙：树洞小秘密，聆听你的心声！</a></li>
</ol>
<h3 id="网址导航类"><a href="#网址导航类" class="headerlink" title="网址导航类"></a>网址导航类</h3><ol>
<li><a href="https://it-cxy.top/">我的书签</a></li>
<li><a href="https://www.aixunni.com/">爱寻匿</a></li>
<li><a href="https://tophub.today/">今日热榜</a></li>
<li><a href="http://googlevip8.com/webstack">阿里渣渣</a></li>
</ol>
<h3 id="工具类"><a href="#工具类" class="headerlink" title="工具类"></a>工具类</h3><ol>
<li><a href="https://brie.fi/ng">视频聊天</a></li>
<li><a href="https://photofunia.com/">照片 P 在任何场景中，包括海报、墙体广告等</a></li>
<li><a href="http://ppt.sotary.com/web/wxapp/index.html">PPT 超级市场：一些 PPT 的免费模板</a></li>
<li><a href="https://coderschool.cn/2476.html">android 国外 app 下载</a></li>
<li><a href="http://guozhivip.com/tool/">工具大全</a></li>
<li><a href="http://receivefreesms.com/">临时接收手机验证码,保护隐私</a>(<a href="https://jiemahao.com/">https://jiemahao.com/</a>)</li>
<li><a href="https://yamadie.net/">破解软件</a></li>
<li><a href="http://www.winwin7.com/">绿色软件</a></li>
<li><a href="https://www.mayixiongdi.cn/">软件聚合吧</a></li>
<li><a href="https://ps.gaoding.com/">在线ps</a></li>
<li><a href="https://www.windy.com/">专业的天气网站</a></li>
<li><a href="https://www.911cha.com/">生活、日常小工具在线查询~</a></li>
<li><a href="https://www.githubs.cn/">github中文社区</a></li>
<li><a href="https://jubt.ml/cn/index.html">磁力bt</a></li>
<li><a href="https://www.earthol.com/g/">世界地图</a></li>
<li><a href="https://report.amap.com/index.do">高德地图指数,可以查看全国主要城市的交通实时数据</a></li>
<li><a href="http://www.tcmap.com.cn/">地图地理网址</a></li>
<li><a href="https://www.portablesoft.org/subscribe/google-chrome/">旧版本chrome下载</a></li>
<li><a href="http://ftp.mozilla.org/pub/firefox/releases/">旧版本firefox下载</a></li>
<li><a href="https://nodejs.org/en/download/releases/">旧版本node下载</a></li>
<li><a href="https://bz.zzzmh.cn/index">极简壁纸</a></li>
<li><a href="https://chrome.zzzmh.cn/">极简插件chrome</a><!-- 23. [ikuuuVpn](https://ikuuu.club/) [小牛加速器](https://aoxspeed.net/zhs/) [purefast](https://purefast.net/auth/register?code=ujr5) --></li>
<li><a href="http://emblemmatic.org/markmaker/#/">英文logo生成</a></li>
<li><a href="http://www.53bk.com/baokan/">全国报刊杂志大全</a></li>
<li><a href="https://github.com/zhaoolee/ChromeAppHeroes">chrome插件英雄榜</a></li>
<li><a href="https://www.sysmini.com/">极简系统</a></li>
<li><a href="https://www.polebrief.com/index">极简简历</a></li>
<li><a href="https://toonme.com/">生成卡通头像</a></li>
<li><a href="https://colleges.chat/">大学生活指北</a></li>
<li><a href="https://gifcam.en.softonic.com/download">gif制作工具</a></li>
<li><a href="https://eleduck.com/">电鸭兼职</a></li>
<li><a href="https://www.boce.com/">DNS查询</a></li>
<li><a href="https://www.fosshub.com/SpaceSniffer.html">硬盘资源分析软件：SpaceSniffer</a></li>
<li><a href="https://www.voidtools.com/zh-cn/">本地资源快速搜索软件：Everything</a></li>
<li><a href="https://msdn.itellyou.cn/">msdn纯净系统下载</a></li>
<li><a href="https://www.wepe.com.cn/">微PE:系统PE安装</a></li>
<li><a href="https://cli.im/">草料二维码</a></li>
<li><a href="https://weread.qnmlgb.tech/?offset=1">微信读书组队</a></li>
<li><a href="http://www.dajiadaohang.com/">打假导航</a></li>
<li><a href="https://c.runoob.com/">菜鸟工具</a></li>
<li><a href="https://c.runoob.com/front-end/59/">图片base64编码</a></li>
<li><a href="https://www.tiobe.com/tiobe-index/">编程语言排行</a></li>
<li><a href="https://img.tg/">免费图床·图片上传</a></li>
</ol>
<h3 id="学习类"><a href="#学习类" class="headerlink" title="学习类"></a>学习类</h3><ol>
<li><a href="http://qzbltushu.ys168.com/">考研书籍视频资源网站,免费,时效性好</a></li>
<li><a href="https://bbs.qzzn.com/">公务员考试论坛</a></li>
<li><a href="http://rlsbj.cq.gov.cn/ywzl/rsks/gwyks/">重庆公务员官网</a></li>
<li><a href="http://v.huatu.com/">华图在线</a></li>
<li><a href="http://ntce.neea.edu.cn/">教资</a></li>
<li><a href="https://learn.freecodecamp.one/">前端学习</a></li>
<li><a href="https://docschina.org/">印记中文</a></li>
</ol>
<h3 id="素材类"><a href="#素材类" class="headerlink" title="素材类"></a>素材类</h3><ol>
<li><a href="https://flatuicolors.com/">flatuicolors.com&#x2F;</a></li>
<li><a href="https://uigradients.com/#Cherryblossoms">渐变色</a></li>
<li><a href="http://zhongguose.com/#yunshuilan">中国色</a></li>
<li><a href="https://colorleap.app/home">根据图片配色</a></li>
<li><a href="https://www.bitbug.net/">favicon 生成</a></li>
<li><a href="https://icons8.com/">logo 素材</a></li>
<li><a href="https://www.aigei.com/">音效</a></li>
<li><a href="https://shields.io/">github 图标定制</a></li>
<li><a href="https://www.jq22.com/">jquery 插件库</a></li>
<li><a href="https://demo.gin-vue-admin.com/#/layout/dashboard">后台管理系统参考</a></li>
<li><a href="https://apps.timwhitlock.info/emoji/tables/unicode">emoji</a></li>
<li><a href="https://www.pexels.com/zh-cn/">免费图片素材</a></li>
<li><a href="http://www.htmleaf.com/">jQuery 之家</a></li>
<li><a href="particles.js.org/">炫酷网页背景</a></li>
<li><a href="https://9elements.github.io/fancy-border-radius/">圆角生成fancy-border-radius</a></li>
<li><a href="https://wweb.dev/resources/css-separator-generator/">页面分割css-separator-generator</a></li>
<li><a href="https://getwaves.io/">波浪线生成</a></li>
<li><a href="https://mp.weixin.qq.com/s/xYUjsf4IKYORqOLNNnEHlA">web前端开发(公众号)-64个css生成工具集合</a></li>
<li><a href="https://mp.weixin.qq.com/s/O91XIiumJJnG6P7mb3nI-w">web前端开发(公众号)-10个很棒的JavaScript 库</a></li>
</ol>
]]></content>
      <categories>
        <category>前端学习</category>
      </categories>
      <tags>
        <tag>网站大全</tag>
      </tags>
  </entry>
  <entry>
    <title>常用的git命令</title>
    <url>/2022/07/07/a004-%E5%B8%B8%E7%94%A8%E7%9A%84git%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h3 id="github-访问慢？"><a href="#github-访问慢？" class="headerlink" title="github 访问慢？"></a>github 访问慢？</h3><ol>
<li>使用 dns 查询工具，查询 github.com，将 TTL 最小的 ip 复制</li>
<li>找到对应路径 C:\Windows\System32\drivers\etc 下的 hosts 文件<br><img src="https://img-blog.csdnimg.cn/2021042623563665.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzYwODc0NA==,size_16,color_FFFFFF,t_70#pic_center" alt="图示"></li>
</ol>
<h3 id="本地信息配置"><a href="#本地信息配置" class="headerlink" title="本地信息配置"></a>本地信息配置</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs git">git config --global --list<br>git config --global user.name<br>git config --global user.email<br></code></pre></td></tr></table></figure>

<h3 id="SSH-配置"><a href="#SSH-配置" class="headerlink" title="SSH 配置"></a>SSH 配置</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs git">ssh-keygen -t rsa -C &#x27;xxx@xxx.com&#x27;<br></code></pre></td></tr></table></figure>

<blockquote>
<p>公钥路径：C:&#x2F;Users&#x2F;Administrator&#x2F;.ssh&#x2F;id_rsa.pub<br>验证 ssh 是否生效：ssh -T <a href="mailto:&#x67;&#105;&#x74;&#x40;&#x67;&#105;&#x74;&#x68;&#117;&#98;&#x2e;&#x63;&#111;&#x6d;">&#x67;&#105;&#x74;&#x40;&#x67;&#105;&#x74;&#x68;&#117;&#98;&#x2e;&#x63;&#111;&#x6d;</a></p>
</blockquote>
<h3 id="提交注释"><a href="#提交注释" class="headerlink" title="提交注释"></a>提交注释</h3><p>feat: 增加新功能（feature）<br>fix:  修改bug<br>perf: 改进，性能优化<br>docs: 文档（documentation）<br>style: 空白&#x2F;格式&#x2F;缺少符号等（不影响代码运行的变动）<br>refactor: 重构（即不是新增功能，也不是修改 bug 的代码变动）<br>chore: 构建过程或辅助工具的变动<br>revert: 撤销，版本回退<br>test：测试<br>build: 打包  </p>
<h3 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs git">git branch -avv<br>git branch -vv<br>git remote -vv<br>git diff<br>git log --oneline<br>git checkout xxx      或  git switch xxx<br>git checkout -b xxx   或  git switch -c xxx<br></code></pre></td></tr></table></figure>

<h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs git">files change...<br>git pull<br>git add .<br>git commit -m &#x27;xxx&#x27;<br>git push<br></code></pre></td></tr></table></figure>

<h3 id="创建新工作区并推送到远程仓库"><a href="#创建新工作区并推送到远程仓库" class="headerlink" title="创建新工作区并推送到远程仓库"></a>创建新工作区并推送到远程仓库</h3><ol>
<li>由自己创建仓库</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs git">git init<br>git add .<br>git commit -m &#x27;xxx&#x27;<br>git branch -M main                     //重命名当前本地分支，初始分支名为master<br>git remote add origin git@xxxx.git     //origin为远程仓库名，可以自定义<br>git push origin -u main:master         //main为本地分支名，master为远程分支名，之后push需要指定远程仓库名<br>或<br>git push origin -u master              //本地分支名和远程分支名一样，之后可直接push，本地分支名和远程分支名尽量保持一样<br></code></pre></td></tr></table></figure>

<ol start="2">
<li>由别人创建仓库</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs git">git clone  git@xxxx.git                //克隆默认分支，克隆后本地默认与指定远程分支建立联系<br>或<br>git clone -b xxx git@xxxx.git          //克隆其他分支，克隆后本地默认与指定远程分支建立联系<br></code></pre></td></tr></table></figure>

<h3 id="新建分支并推送远程仓库的对应分支"><a href="#新建分支并推送远程仓库的对应分支" class="headerlink" title="新建分支并推送远程仓库的对应分支"></a>新建分支并推送远程仓库的对应分支</h3><blockquote>
<p><strong>分支是用来开发不同功能的</strong></p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs git">git checkout -b 新分支名<br>git push origin -u dev<br></code></pre></td></tr></table></figure>

<h3 id="分支重命名"><a href="#分支重命名" class="headerlink" title="分支重命名"></a>分支重命名</h3><ol>
<li>本地分支</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs git">git branch -m 原分支名称 新分支名称<br></code></pre></td></tr></table></figure>

<ol start="2">
<li>远程分支</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs git">git push origin -d 自己的原分支名称<br>git push origin -u 新分支名称<br></code></pre></td></tr></table></figure>

<ol start="3">
<li>重命名分支为远程默认分支时<blockquote>
<p>github 打开当前仓库——&gt;settings——&gt;branches——&gt;手动重命名</p>
</blockquote>
</li>
</ol>
<h3 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs git">git branch -d 本地分支名<br>git push origin -d 远程分支名<br></code></pre></td></tr></table></figure>

<h3 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h3><blockquote>
<p>切换到合并分支，合并其他工作树干净的分支</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs git">git merge 被合并分支名<br></code></pre></td></tr></table></figure>

<h3 id="拉取远程新的分支并与本地建立连接"><a href="#拉取远程新的分支并与本地建立连接" class="headerlink" title="拉取远程新的分支并与本地建立连接"></a>拉取远程新的分支并与本地建立连接</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs git">git checkout -b 本地分支名 origin/远程分支名<br>files change...<br>git add .<br>git commit -m &#x27;xxx&#x27;<br>git push<br><br>或<br><br>git fetch origin 远程分支名:本地分支名<br>git switch 本地分支名<br>files change...<br>git add .<br>git commit -m &#x27;xxx&#x27;<br>git push origin -u 远程分支名<br></code></pre></td></tr></table></figure>

<h3 id="移除工作区修改"><a href="#移除工作区修改" class="headerlink" title="移除工作区修改"></a>移除工作区修改</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs git">git checkout .<br><br>或<br><br>git checkout 文件路径<br></code></pre></td></tr></table></figure>

<h3 id="取消-add-操作"><a href="#取消-add-操作" class="headerlink" title="取消 add 操作"></a>取消 add 操作</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs git">git reset<br></code></pre></td></tr></table></figure>

<h3 id="取消-commit-操作"><a href="#取消-commit-操作" class="headerlink" title="取消 commit 操作"></a>取消 commit 操作</h3><p>之前提交过</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs git">git reset --soft HEAD^     //仅撤销commit<br>git reset --mixed HEAD^    //撤销commit，add<br></code></pre></td></tr></table></figure>

<p>第一次提交<br>删除.git文件夹重新提交</p>
<h3 id="版本控制"><a href="#版本控制" class="headerlink" title="版本控制"></a>版本控制</h3><ol>
<li>版本回退<blockquote>
<p>不会破坏之前的版本</p>
</blockquote>
</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs git">git reset --hard commitid<br>files change...<br>git add .<br>git commit -m &#x27;xxx&#x27;<br>git push<br>git pull 解决冲突<br></code></pre></td></tr></table></figure>

<blockquote>
<p>会破坏之前的版本</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs git">git reset --hard commitid<br>git push -f<br></code></pre></td></tr></table></figure>

<ol start="2">
<li>切换新分支指向想要回退的版本</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs git">git checkout -b 分支名 commitid<br></code></pre></td></tr></table></figure>

<h3 id="tag"><a href="#tag" class="headerlink" title="tag"></a>tag</h3><blockquote>
<p><strong>tag 是用来记录版本的</strong><br>tag 给当前仓库 commitid 记录对应的版本信息，之后可以根据 tag 找到版本对应的 commitid 进行版本控制<br>开发完新功能后将功能分支合并到主分支，之后打 tag，一般只用给主分支打 tag</p>
</blockquote>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">git <span class="hljs-keyword">tag</span> <span class="hljs-title">xxx</span>                            //给最近的commitid打<span class="hljs-keyword">tag</span>，当前未提交则为上次commitid打<span class="hljs-keyword">tag</span>，当前已提交则为本次commitid打<span class="hljs-keyword">tag</span><br><span class="hljs-title">git</span> <span class="hljs-keyword">tag</span> <span class="hljs-title">xxx</span> commitid                   //给指定的commitid打<span class="hljs-keyword">tag</span><br><span class="hljs-title">git</span> <span class="hljs-keyword">tag</span> <span class="hljs-title">xxx</span> -m <span class="hljs-string">&quot;注释&quot;</span> commitid         //给指定的commitid打<span class="hljs-keyword">tag</span>同时添加注释<br>git push origin xxx                    //将本地<span class="hljs-keyword">tag</span>推送到远程<br>git push origin --<span class="hljs-keyword">tag</span>                  <span class="hljs-title">//本地所有tag</span>推送到远程<br>git <span class="hljs-keyword">tag</span> <span class="hljs-title">-d</span> xxx                        //删除本地<span class="hljs-keyword">tag</span>，删除本地后git pull会将远程的<span class="hljs-keyword">tag</span>拉下来<br>git push origin -d xxx                 //删除远程<span class="hljs-keyword">tag</span><br><span class="hljs-title">git</span> show xxx                           //查看对应<span class="hljs-keyword">tag</span>提交信息<br>git <span class="hljs-keyword">tag</span>                                <span class="hljs-title">//查看本地所有tag</span><br>git ls-remote --<span class="hljs-keyword">tag</span>                    <span class="hljs-title">//查看远程所有tag</span><br></code></pre></td></tr></table></figure>

<hr>
<p>官方文档：<a href="https://git-scm.com/book/zh/v2">Git</a></p>
]]></content>
      <categories>
        <category>前端学习</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>前端开发工具</title>
    <url>/2022/07/08/a005-%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/</url>
    <content><![CDATA[<h2 id="VScode篇"><a href="#VScode篇" class="headerlink" title="VScode篇"></a>VScode篇</h2><h3 id="自定义护眼主题"><a href="#自定义护眼主题" class="headerlink" title="自定义护眼主题"></a>自定义护眼主题</h3><ol>
<li><p>使用默认light主题<br>设置 &#x3D;&gt; 工作台 &#x3D;&gt; 主题 &#x3D;&gt; Color Theme浅色默认</p>
</li>
<li><p>调整编辑区域颜色<br>设置 &#x3D;&gt; 工作台 &#x3D;&gt; 主题 &#x3D;&gt; Color Customizations &#x3D;&gt; 在settings.json中编辑</p>
<figure class="highlight json"><table><tr><td class="code"><pre><code class="hljs json"> <span class="hljs-attr">&quot;workbench.colorCustomizations&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;foreground&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#75a478&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;editor.background&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#C7EDCC&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></li>
</ol>
<h3 id="vue快捷生成代码块配置"><a href="#vue快捷生成代码块配置" class="headerlink" title="vue快捷生成代码块配置"></a>vue快捷生成代码块配置</h3><ol>
<li><p>配置<br>用户代码片段 &#x3D;&gt; 输入vue回车进入vue.json.code-snippets</p>
<figure class="highlight json"><table><tr><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>\t\t\t\t<span class="hljs-attr">&quot;Print to console&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>\t\t\t\t\t\t\t\t<span class="hljs-attr">&quot;prefix&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;vue&quot;</span><span class="hljs-punctuation">,</span><br>\t\t\t\t\t\t\t\t<span class="hljs-attr">&quot;body&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>\t\t\t\t\t\t\t\t\t\t\t\t<span class="hljs-string">&quot;&lt;template&gt;&quot;</span><span class="hljs-punctuation">,</span><br>\t\t\t\t\t\t\t\t\t\t\t\t<span class="hljs-string">&quot;   $2&quot;</span><span class="hljs-punctuation">,</span><br>\t\t\t\t\t\t\t\t\t\t\t\t<span class="hljs-string">&quot;&lt;/template&gt;&quot;</span><span class="hljs-punctuation">,</span><br>\t\t\t\t\t\t\t\t\t\t\t\t<span class="hljs-string">&quot;\n&quot;</span><span class="hljs-punctuation">,</span><br>\t\t\t\t\t\t\t\t\t\t\t\t<span class="hljs-string">&quot;&lt;script lang=\&quot;ts\&quot;&gt;&quot;</span><span class="hljs-punctuation">,</span><br>\t\t\t\t\t\t\t\t\t\t\t\t<span class="hljs-string">&quot;export default &#123;&quot;</span><span class="hljs-punctuation">,</span><br>\t\t\t\t\t\t\t\t\t\t\t\t<span class="hljs-string">&quot;    name: \&quot;\&quot;&quot;</span><span class="hljs-punctuation">,</span><br>\t\t\t\t\t\t\t\t\t\t\t\t<span class="hljs-string">&quot;&#125;&quot;</span><span class="hljs-punctuation">,</span><br>\t\t\t\t\t\t\t\t\t\t\t\t<span class="hljs-string">&quot;&lt;/script&gt;&quot;</span><span class="hljs-punctuation">,</span><br>\t\t\t\t\t\t\t\t\t\t\t\t<span class="hljs-string">&quot;&lt;script lang=\&quot;ts\&quot; setup&gt;&quot;</span><span class="hljs-punctuation">,</span><br>\t\t\t\t\t\t\t\t\t\t\t\t<span class="hljs-string">&quot;import &#123; ref, reactive &#125; from &#x27;vue&#x27;&quot;</span><span class="hljs-punctuation">,</span><br>\t\t\t\t\t\t\t\t\t\t\t\t<span class="hljs-string">&quot;&lt;/script&gt;&quot;</span><span class="hljs-punctuation">,</span><br>\t\t\t\t\t\t\t\t\t\t\t\t<span class="hljs-string">&quot;\n&quot;</span><span class="hljs-punctuation">,</span><br>\t\t\t\t\t\t\t\t\t\t\t\t<span class="hljs-string">&quot;&lt;style lang=\&quot;less\&quot; scoped&gt;&quot;</span><span class="hljs-punctuation">,</span><br>\t\t\t\t\t\t\t\t\t\t\t\t<span class="hljs-string">&quot;   $3&quot;</span><span class="hljs-punctuation">,</span><br>\t\t\t\t\t\t\t\t\t\t\t\t<span class="hljs-string">&quot;&lt;/style&gt;&quot;</span><span class="hljs-punctuation">,</span><br>\t\t\t\t\t\t\t\t<span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>\t\t\t\t\t\t\t\t<span class="hljs-attr">&quot;description&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Log output to console&quot;</span><br>\t\t\t\t<span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure>
</li>
<li><p>使用<br>在vscode中输入vue即可快捷生成指定的代码块</p>
</li>
</ol>
<h3 id="定位第三方包源码"><a href="#定位第三方包源码" class="headerlink" title="定位第三方包源码"></a>定位第三方包源码</h3><p>alt点击引入的第三方包(如：antd) &#x3D;&gt; 在标签栏中右键 &#x3D;&gt; 在资源管理视图中显示<br>不可在package.json中使用</p>
<h2 id="WebStorm篇"><a href="#WebStorm篇" class="headerlink" title="WebStorm篇"></a>WebStorm篇</h2><h3 id="free版webstorm获取"><a href="#free版webstorm获取" class="headerlink" title="free版webstorm获取"></a>free版webstorm获取</h3><p><a href="https://mp.weixin.qq.com/s/IL_2AdsLyhpZNy-jif8uNg">https://mp.weixin.qq.com/s/IL_2AdsLyhpZNy-jif8uNg</a></p>
<h3 id="自定义护眼主题-1"><a href="#自定义护眼主题-1" class="headerlink" title="自定义护眼主题"></a>自定义护眼主题</h3><ol>
<li><p>使用默认light主题<br>设置 &#x3D;&gt; 编辑器 &#x3D;&gt; 常规 &#x3D;&gt; 方案IntelliJ Light</p>
</li>
<li><p>调整编辑区域颜色<br>设置 &#x3D;&gt; 编辑器 &#x3D;&gt; 常规 &#x3D;&gt; 文本 &#x3D;&gt; 默认文本 &#x3D;&gt; 背景C7EDCC</p>
</li>
</ol>
<h3 id="定位第三方包源码-1"><a href="#定位第三方包源码-1" class="headerlink" title="定位第三方包源码"></a>定位第三方包源码</h3><p>ctrl点击引入的第三方包(如：antd) &#x3D;&gt; 左侧项目目录上方点击追踪图标<br>可在package.json中使用</p>
]]></content>
      <categories>
        <category>前端学习</category>
      </categories>
      <tags>
        <tag>VScode</tag>
        <tag>WebStorm</tag>
      </tags>
  </entry>
  <entry>
    <title>前端工程化</title>
    <url>/2022/07/11/a006-%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/</url>
    <content><![CDATA[<h2 id="工程化"><a href="#工程化" class="headerlink" title="工程化"></a>工程化</h2><p>前端工程化是一个高层次的思想,而模块化和组件化是为工程化思想下相对较具体的开发方式,因此可以简单的认为模块化和组件化是工程化的表现形式。</p>
<h2 id="模块化篇"><a href="#模块化篇" class="headerlink" title="模块化篇"></a>模块化篇</h2><p>模块化开发，一个模块就是一个实现特定功能的文件，有了模块我们就可以更方便的使用别人的代码，要用什么功能就加载什么模块。<br>将一个复杂的程序依据一定的规范封装成几个块，并进行组合在一起。<br>块内部数据是私有的，只是向外部暴露一些接口与外部其它模块通信。</p>
<p><strong>发展史：</strong></p>
<blockquote>
<p>namespace(简单封装)，本质是对象，一点不安全<br>IIFE模式(匿名闭包)，利用立即执行函数，然后暴露<br>IIFE增强模式，当前模块化的基础</p>
</blockquote>
<p><strong>优点：</strong></p>
<blockquote>
<p>避免命名冲突(减少命名空间污染)<br>更好的分离, 按需加载<br>更高复用性<br>高可维护性</p>
</blockquote>
<p><strong>缺点：</strong></p>
<blockquote>
<p>需要很多的script标签<br>请求过多<br>依赖模糊<br>难以维护</p>
</blockquote>
<p><strong>规范：</strong></p>
<blockquote>
<p>common.js<br>AMD规范<br>CMD规范<br>es6规范</p>
</blockquote>
<h3 id="common-js"><a href="#common-js" class="headerlink" title="common.js"></a>common.js</h3><p>每个文件都可当作一个模块，常用于服务器端<br>在服务器端: 模块的加载是运行时同步加载的(node)<br>在浏览器端: 模块需要提前编译打包处理(Browserify工具)，浏览器不认识require</p>
  <figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/* </span><br><span class="hljs-comment">暴露模块   </span><br><span class="hljs-comment">暴露的本质都是导出expors对象 </span><br><span class="hljs-comment">*/</span><br><span class="hljs-variable language_">module</span> = &#123;<br>    <span class="hljs-attr">exports</span>:&#123;&#125;<br>&#125;<br><br><span class="hljs-comment">/* </span><br><span class="hljs-comment">引入模块</span><br><span class="hljs-comment">第三方模块：xxx为模块名(包名),放在文件最上面</span><br><span class="hljs-comment">自定义模块：xxx为模块文件路径 </span><br><span class="hljs-comment">*/</span><br><span class="hljs-built_in">require</span>(xxx)<br></code></pre></td></tr></table></figure>


<h3 id="AMD规范-require-js"><a href="#AMD规范-require-js" class="headerlink" title="AMD规范 require.js"></a>AMD规范 require.js</h3><p>专门用于浏览器端, 模块的加载是异步的</p>
  <figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/* </span><br><span class="hljs-comment">导出</span><br><span class="hljs-comment">*/</span><br><span class="hljs-title function_">define</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;&#125;)                               <span class="hljs-comment">//定义没有依赖的模块</span><br><span class="hljs-title function_">define</span>([<span class="hljs-string">&#x27;module1&#x27;</span>,<span class="hljs-string">&#x27;module2&#x27;</span>],<span class="hljs-keyword">function</span>(<span class="hljs-params">m1,m2</span>)&#123;&#125;)     <span class="hljs-comment">//定义有依赖的模块</span><br><br><span class="hljs-comment">/* </span><br><span class="hljs-comment">导入 </span><br><span class="hljs-comment">*/</span><br>requirejs([<span class="hljs-string">&#x27;module3&#x27;</span>],<span class="hljs-keyword">function</span>(<span class="hljs-params">m3</span>) &#123;&#125;)<br>requirejs.<span class="hljs-title function_">config</span>(&#123;                                  <span class="hljs-comment">//配置数组中模块加载路径：</span><br>    <span class="hljs-attr">baseUrl</span>:<span class="hljs-string">&#x27;js/&#x27;</span>                                   <span class="hljs-comment">//不写模块路径相对于main.js,写的话相当于根路径下js+模块路径</span><br>    <span class="hljs-attr">paths</span>:&#123;<br>        <span class="hljs-attr">module1</span>:<span class="hljs-string">&#x27;./module1&#x27;</span>,                        <span class="hljs-comment">//不用加js后缀，默认已经加上了</span><br>        <span class="hljs-attr">module2</span>:<span class="hljs-string">&#x27;./module2&#x27;</span>,<br>        <span class="hljs-attr">module3</span>:<span class="hljs-string">&#x27;./module3&#x27;</span>,<br>        <span class="hljs-attr">jquery</span>:<span class="hljs-string">&#x27;./jQuery 1.11.1&#x27;</span>                    <span class="hljs-comment">//jquery要小写且支持amd规范</span><br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure>
  <figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 最后引入的时候使用一个script标签即可 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">data-main</span>=<span class="hljs-string">&#x27;main.js&#x27;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&#x27;require.js&#x27;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span> <br></code></pre></td></tr></table></figure>


<h3 id="CMD规范-Sea-js"><a href="#CMD规范-Sea-js" class="headerlink" title="CMD规范 Sea.js"></a>CMD规范 Sea.js</h3><p>专门用于浏览器端, 模块的加载是异步的<br>模块使用时才会加载执行</p>
  <figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/* </span><br><span class="hljs-comment">导出</span><br><span class="hljs-comment">*/</span><br><span class="hljs-title function_">define</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"><span class="hljs-built_in">require</span>,<span class="hljs-built_in">exports</span>,<span class="hljs-variable language_">module</span></span>) &#123;<br>  <span class="hljs-comment">//module.exports = xxx</span><br>  <span class="hljs-built_in">exports</span>.<span class="hljs-property">a</span> = xxx<br>&#125;)<br><br><span class="hljs-comment">/* </span><br><span class="hljs-comment">引入 </span><br><span class="hljs-comment">*/</span>  <br><span class="hljs-title function_">define</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"><span class="hljs-built_in">exports</span></span>) &#123;<br>    <span class="hljs-comment">//同步引入</span><br>    <span class="hljs-keyword">let</span> module1 = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./module1&#x27;</span>)               <span class="hljs-comment">//引入最后拿到这个模块暴露的东西，但是模块上面的代码也会执行</span><br>    <span class="hljs-comment">//异步引入</span><br>    <span class="hljs-built_in">require</span>.<span class="hljs-title function_">async</span>(<span class="hljs-string">&#x27;./module2&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params">module2</span>) &#123;<br>      module2.<span class="hljs-title function_">foo</span>()<br>    &#125;)<br>    <span class="hljs-built_in">exports</span>.<span class="hljs-property">b</span> = xxx<br>&#125;)<br></code></pre></td></tr></table></figure>
  <figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 使用 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&#x27;Sea.js&#x27;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>                       <span class="hljs-comment">&lt;!-- 先引入 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"><span class="hljs-title class_">Seajs</span>.<span class="hljs-title function_">use</span>(<span class="hljs-string">&#x27;main.js&#x27;</span>)</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>                <span class="hljs-comment">&lt;!-- 后使用 --&gt;</span><br></code></pre></td></tr></table></figure>


<h3 id="es6规范"><a href="#es6规范" class="headerlink" title="es6规范"></a>es6规范</h3><p>依赖模块需要编译打包处理，很多浏览器不支持es6语法，需要编译打包成es5<br>  <figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/* </span><br><span class="hljs-comment">具名导出 </span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">export</span> value                                        <span class="hljs-comment">//分别暴露</span><br><span class="hljs-keyword">export</span> &#123;value,value&#125;                                <span class="hljs-comment">//统一暴露</span><br><span class="hljs-comment">//引入：</span><br><span class="hljs-keyword">import</span> &#123;名字<span class="hljs-number">1</span>,名字<span class="hljs-number">2</span>&#125; <span class="hljs-keyword">from</span> 路径    <br><span class="hljs-comment">//或</span><br><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> 变量名 <span class="hljs-keyword">from</span> 路径    <br><span class="hljs-comment">//或</span><br><span class="hljs-keyword">import</span> &#123;名字<span class="hljs-number">1</span>,名字<span class="hljs-number">2</span> <span class="hljs-keyword">as</span> 自定义名字&#125; <span class="hljs-keyword">from</span> 路径          <span class="hljs-comment">//具名导出，引入的时候必须使用对象解构赋值的方式 </span><br><br><span class="hljs-comment">/* </span><br><span class="hljs-comment">统一导出 </span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> value                                <span class="hljs-comment">//一个模块中只能用一次</span><br><br><span class="hljs-comment">/* </span><br><span class="hljs-comment">引入 </span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">import</span> 自定义名字 <span class="hljs-keyword">from</span> 路径                          <span class="hljs-comment">//引用第三方库，就是这种方式 </span><br></code></pre></td></tr></table></figure></p>
<p>实现(浏览器端)</p>
<blockquote>
<p>使用Babel将es6编译成es5代码(里面有commonjs的语法)，使用browserify编译打包js<br>配置.babelrc ,rc run control运行时控制文件</p>
</blockquote>
<h2 id="组件化篇"><a href="#组件化篇" class="headerlink" title="组件化篇"></a>组件化篇</h2><p>页面上的每个独立的、可视&#x2F;可交互区域视为一个组件;<br>每个组件对应一个工程目录,组件所需的各种资源都在这个目录下就近维护;<br>由于组件具有独立性,因此组件与组件之间可以 自由组合;<br>页面只不过是组件的容器,负责组合组件形成功能完整的界面;<br>当不需要某个组件,或者想要替换组件时,可以整个目录删除&#x2F;替换。</p>
<hr>
<p>参考视频：<a href="https://www.bilibili.com/video/BV18s411E7Tj?spm_id_from=333.1007.top_right_bar_window_history.content.click">BV18s411E7Tj</a><br>参考博客：<a href="https://www.cnblogs.com/angel648/p/11370327.html">https://www.cnblogs.com/angel648/p/11370327.html</a></p>
]]></content>
      <categories>
        <category>前端学习</category>
      </categories>
      <tags>
        <tag>模块化</tag>
        <tag>组件化</tag>
      </tags>
  </entry>
  <entry>
    <title>异步编程之Promise</title>
    <url>/2022/07/12/a007-%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B%E4%B9%8BPromise/</url>
    <content><![CDATA[<h3 id="理解和使用"><a href="#理解和使用" class="headerlink" title="理解和使用"></a>理解和使用</h3><ul>
<li><p>promise是js中异步编程的新的解决方案，旧方案是单纯使用回调函数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//回调地狱</span><br><span class="hljs-keyword">var</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>);<br><br>fs.<span class="hljs-title function_">readFile</span>(<span class="hljs-string">&#x27;./views/index.html&#x27;</span>,  <span class="hljs-function">(<span class="hljs-params">err, data</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">if</span> (err) &#123;<br>      <span class="hljs-keyword">throw</span> err<br>  &#125;<br>  fs.<span class="hljs-title function_">readFile</span>(<span class="hljs-string">&#x27;./views/main.html&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">err, data</span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">if</span> (err) &#123;<br>          <span class="hljs-keyword">throw</span> err<br>      &#125;<br>      fs.<span class="hljs-title function_">readFile</span>(<span class="hljs-string">&#x27;./views/update.html&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">err, data</span>) =&gt;</span> &#123;<br>          <span class="hljs-keyword">if</span> (err) &#123;<br>              <span class="hljs-keyword">throw</span> err<br>          &#125;<br>          <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data.<span class="hljs-title function_">toString</span>());<br>      &#125;)   <br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data.<span class="hljs-title function_">toString</span>());<br>  &#125;)<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data.<span class="hljs-title function_">toString</span>());<br>&#125;)<br></code></pre></td></tr></table></figure>
</li>
<li><p>异步编程例子：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//fs 文件操作</span><br><span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>).<span class="hljs-title function_">readFile</span>(<span class="hljs-string">&#x27;./index.html&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">err,data</span>)=&gt;</span>&#123;&#125;)<br><br><span class="hljs-comment">//数据库操作</span><br><span class="hljs-keyword">let</span> db = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;mysql&#x27;</span>).<span class="hljs-title function_">createConnection</span>(&#123;<br>  <span class="hljs-attr">host</span>:<span class="hljs-string">&#x27;localhost&#x27;</span>,<br>  <span class="hljs-attr">port</span>:<span class="hljs-string">&#x27;3306&#x27;</span>, <span class="hljs-comment">// 可选,默认3306</span><br>  <span class="hljs-attr">user</span>:<span class="hljs-string">&#x27;root&#x27;</span>,<br>  <span class="hljs-attr">password</span>:<span class="hljs-string">&#x27;xxxxxx&#x27;</span>,<br>  <span class="hljs-attr">database</span>:<span class="hljs-string">&#x27;mydbNew&#x27;</span><br>&#125;)<br><span class="hljs-keyword">let</span> strSql7 = <span class="hljs-string">&#x27;insert into studetNew (id,name,password) value (?,?,?)&#x27;</span><br>db.<span class="hljs-title function_">query</span>(strSql7,[<span class="hljs-number">123</span>,<span class="hljs-string">&#x27;s1xpences&#x27;</span>,<span class="hljs-string">&#x27;123123&#x27;</span>],<span class="hljs-function">(<span class="hljs-params">err,results</span>) =&gt;</span>&#123;<br>  <span class="hljs-keyword">if</span>(err)&#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err)<br>  &#125;<span class="hljs-keyword">else</span>&#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;插入数据操作成功&#x27;</span>)<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">//AJAX</span><br> $.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/server.json&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">data</span>)=&gt;</span>&#123;&#125;)<br><br><span class="hljs-comment">//定时器</span><br><span class="hljs-title function_">setTimeOut</span>(<span class="hljs-function">()=&gt;</span>&#123;&#125;,<span class="hljs-number">1000</span>)<br></code></pre></td></tr></table></figure></li>
</ul>
<h3 id="promise里面包裹一个异步操作"><a href="#promise里面包裹一个异步操作" class="headerlink" title="promise里面包裹一个异步操作"></a>promise里面包裹一个异步操作</h3><ul>
<li><p>异步操作成功调resolve，将promise对象的状态设置为成功；失败调reject，将promise对象的状态设置为失败</p>
</li>
<li><p>then指定成功使的回调，catch指定失败时的回调</p>
</li>
<li><p>获取成功和失败的结果值，通过resolve和reject传递，通过then的value,和catch的reason接受</p>
</li>
</ul>
<h3 id="promise对象的状态"><a href="#promise对象的状态" class="headerlink" title="promise对象的状态"></a>promise对象的状态</h3><ul>
<li><p>就是实例对象中的一个属性 PromiseState，有三种状态</p>
<blockquote>
<p>pendding   未决定的，初始化的默认值<br>resolved &#x2F; fullfilled  成功<br>rejected  失败</p>
</blockquote>
</li>
<li><p>状态变换只有两种可能且只能改变一次 pending &#x3D;&#x3D;&gt; resolved, pending &#x3D;&#x3D;&gt; rejected</p>
</li>
</ul>
<h3 id="promise对象的值"><a href="#promise对象的值" class="headerlink" title="promise对象的值"></a>promise对象的值</h3><ul>
<li><p>实例对象的一个属性 PromiseResult，保存的是异步任务 成功&#x2F;失败 的结果，只能通过reslove和reject对结果进行修改</p>
</li>
<li><p>调resolve和reject即修改状态又设置结果值</p>
</li>
</ul>
<h3 id="promise的基本流程"><a href="#promise的基本流程" class="headerlink" title="promise的基本流程"></a>promise的基本流程</h3><p><img src="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/promises.png" alt="基本流程"></p>
<h3 id="深入"><a href="#深入" class="headerlink" title="深入"></a>深入</h3><ol>
<li><p>executer函数：执行器(reslove,reject)&#x3D;&gt;{}</p>
<blockquote>
<p>即promise实例的参数，在promise内部立即同步执行，异步操作在执行器内部执行</p>
</blockquote>
</li>
<li><p>Promise.prototype.then,指定成功的回调，返回一个新的promise对象</p>
</li>
<li><p>promise.prototype.catch，指定失败的回调</p>
</li>
<li><p>Promise.resolve(参数)</p>
<blockquote>
<p>传入参数为非promise类型的对象，则返回成功的promise对象，值为参数<br>传入参数为promise对象，则参数决定resolve的结果，成功失败由内部promise决定，值也是</p>
</blockquote>
</li>
<li><p>Promise.reject(参数)</p>
<blockquote>
<p>返回一个失败的promise对象<br>不论传入的参数是何种类型，返回结果都是一个失败的promise对象，值为传入的参数<br>即使参数为一个成功的promise对象，返回的状态仍未失败，值为传入的promise对象<br>报错：当前有一个失败的promise而且没有对应的回调对其做处理</p>
</blockquote>
</li>
<li><p>Promise.all()</p>
<blockquote>
<p>参数是promise对象组成的数组<br>返回一个新的promise，所有成功则成功，一个失败即失败<br>成功则值为每一个promise值组成的数组，失败则值为其中第一个失败的promise对象的值</p>
</blockquote>
</li>
<li><p>Promise.race()</p>
<blockquote>
<p>参数是promise对象组成的数组<br>返回一个新的promise，第一个完成的promise状态即为最终状态，第一个的值则为最终值</p>
</blockquote>
</li>
</ol>
<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><ol>
<li><p>改变promise对象的状态？</p>
<blockquote>
<p>reslove、reject、throw(异步任务里面不能抛错)</p>
</blockquote>
</li>
<li><p>改变状态和指定的回调函数谁先执行？</p>
<blockquote>
<p>如果executer函数中是同步任务，则先改变状态后执行回调<br>若executer函数中是异步任务，则先执行回调后改变状态<br>回调执行的时候既能拿到数据</p>
</blockquote>
</li>
<li><p>promise.then()返回的新的promise的结果状态由什么决定？</p>
<blockquote>
<p>then里面的回调是异步执行的<br>由then()指定的回调函数的返回(return)结果决定</p>
<ul>
<li>throw value，则状态rejected,值value</li>
<li>return value，则状态fullfilled,值value</li>
<li>return new Promise((reslove,reject)&#x3D;&gt;{})，状态和值都由里面promise决定</li>
</ul>
</blockquote>
</li>
<li><p>链式调用？</p>
<blockquote>
<p>通过then的链式调用串联多个 同步&#x2F;异步 任务</p>
</blockquote>
</li>
<li><p>异常穿透？</p>
<blockquote>
<p>当使用promise的then链式调用时，可以在最后指定失败的回调<br>前面任何操作出了异常，都会传到最后失败的回调中处理</p>
</blockquote>
</li>
<li><p>中断promise链？</p>
<blockquote>
<p>当使用promise的then链式调用时，在中间中断，不再调用后面的回调函数<br>方法：在调用函数中返回一个pending状态的promise对象,return new Promise(()&#x3D;&gt;{})</p>
</blockquote>
</li>
</ol>
<h3 id="async函数"><a href="#async函数" class="headerlink" title="async函数"></a>async函数</h3><ol>
<li><p>函数执行返回值为promise对象</p>
<blockquote>
<p>promise对象的结果由async函数执行的返回值决定(规则同then())</p>
</blockquote>
</li>
<li><p>await表达式</p>
<blockquote>
<p>await右侧的表达式一般为promise对象，但也可以是其他值<br>如果表达式是promise对象，await返回的是promise成功的结果值<br>如果表达式是其他值，直接将此值作为await的返回值<br>await必须写在async函数中，async函数中可以没有await<br>如果await的promise失败了，就会抛出异常，需要通过try…catch捕获处理，结合async和await使用<br>错误不用每一层都判断，只用在最外面加try…catch即可</p>
</blockquote>
</li>
<li><p>使用</p>
  <figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">try</span>&#123;<br>    <span class="hljs-comment">//有可能出现错误的代码写在这里</span><br>&#125;<span class="hljs-keyword">catch</span>(e)&#123;<br>    <span class="hljs-comment">//出错后的处理,e为错误对象</span><br>&#125;<br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">main</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">let</span> p = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">reslove,reject</span>)=&gt;</span>&#123;<br>        <span class="hljs-title function_">reject</span>(<span class="hljs-string">&#x27;error&#x27;</span>)<br>    &#125;)<br>    <span class="hljs-keyword">try</span>&#123;<br>        <span class="hljs-keyword">let</span> res = <span class="hljs-keyword">await</span> p<br>    &#125;<span class="hljs-keyword">catch</span>(e) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e) <span class="hljs-comment">//拿到失败的结果值</span><br>    &#125;<br>&#125;<br><span class="hljs-title function_">main</span>()<br></code></pre></td></tr></table></figure></li>
</ol>
<h3 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//回调函数</span><br>fs.<span class="hljs-title function_">readFile</span>(<span class="hljs-string">&#x27;index1.html&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">err,data1</span>)=&gt;</span>&#123;<br>    <span class="hljs-keyword">if</span>(err) <span class="hljs-keyword">throw</span> err<br>    fs.<span class="hljs-title function_">readFile</span>(<span class="hljs-string">&#x27;index2.html&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">err,data2</span>)=&gt;</span>&#123;<br>        <span class="hljs-keyword">if</span>(err) <span class="hljs-keyword">throw</span> err<br>        fs.<span class="hljs-title function_">readFile</span>(<span class="hljs-string">&#x27;index3.html&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">err,data3</span>)=&gt;</span>&#123;<br>            <span class="hljs-keyword">if</span>(err) <span class="hljs-keyword">throw</span> err<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data1+data2+data3)<br>        &#125;)<br>    &#125;)<br>&#125;)<br><br><span class="hljs-comment">//Promise形式</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">reslove,reject</span>)=&gt;</span>&#123;<br>    fs.<span class="hljs-title function_">readFile</span>(<span class="hljs-string">&#x27;index1.html&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">err,data1</span>)=&gt;</span>&#123;<br>        <span class="hljs-title function_">reslove</span>(data1)<br>    &#125;)<br>&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">value</span>)=&gt;</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve,reject</span>)=&gt;</span>&#123;<br>        fs.<span class="hljs-title function_">readFile</span>(<span class="hljs-string">&#x27;index2.html&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">err,data2</span>)=&gt;</span>&#123;<br>            <span class="hljs-title function_">reslove</span>(value + data2)<br>        &#125;)<br>    &#125;)<br>&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">value</span>)=&gt;</span>&#123;<br>     <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve,reject</span>)=&gt;</span>&#123;<br>        fs.<span class="hljs-title function_">readFile</span>(<span class="hljs-string">&#x27;index3.html&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">err,data3</span>)=&gt;</span>&#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(value + data3)<br>        &#125;)<br>    &#125;)<br>&#125;).<span class="hljs-title function_">catch</span>(<span class="hljs-function">(<span class="hljs-params">reason</span>)=&gt;</span>&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reason)<br>&#125;)<br><br><span class="hljs-comment">//async形式</span><br><span class="hljs-keyword">let</span> p1 =  <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">reslove,reject</span>)=&gt;</span>&#123;<br>    fs.<span class="hljs-title function_">readFile</span>(<span class="hljs-string">&#x27;index1.html&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">err,data1</span>)=&gt;</span>&#123;<br>        <span class="hljs-title function_">reslove</span>(data1)<br>    &#125;)<br>&#125;)<br><span class="hljs-keyword">let</span> p2 =  <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">reslove,reject</span>)=&gt;</span>&#123;<br>    fs.<span class="hljs-title function_">readFile</span>(<span class="hljs-string">&#x27;index2.html&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">err,data2</span>)=&gt;</span>&#123;<br>        <span class="hljs-title function_">reslove</span>(data2)<br>    &#125;)<br>&#125;)<br><span class="hljs-keyword">let</span> p3 =  <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">reslove,reject</span>)=&gt;</span>&#123;<br>    fs.<span class="hljs-title function_">readFile</span>(<span class="hljs-string">&#x27;index1.html&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">err,data3</span>)=&gt;</span>&#123;<br>        <span class="hljs-title function_">reslove</span>(data3)<br>    &#125;)<br>&#125;)<br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">main</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">try</span>&#123;<br>        <span class="hljs-keyword">let</span> data1 = <span class="hljs-keyword">await</span> p1<br>        <span class="hljs-keyword">let</span> data2 = <span class="hljs-keyword">await</span> p2<br>        <span class="hljs-keyword">let</span> data1 = <span class="hljs-keyword">await</span> p3<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data1+data2+data3)<br>    &#125;<span class="hljs-keyword">catch</span>(err) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err)<br>    &#125;<br>&#125; <br><span class="hljs-title function_">main</span>()<br></code></pre></td></tr></table></figure>

<hr>
<p>官方文档：​<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise">mozilla</a></p>
<p>参考视频：<a href="https://www.bilibili.com/video/BV1GA411x7z1?spm_id_from=333.999.0.0">BV1GA411x7z1</a>  <a href="https://www.bilibili.com/video/BV17j411f74d?spm_id_from=333.999.0.0">BV17j411f74d</a></p>
]]></content>
      <categories>
        <category>前端学习</category>
      </categories>
      <tags>
        <tag>Promise</tag>
      </tags>
  </entry>
  <entry>
    <title>信息与存储</title>
    <url>/2022/07/12/a008-%E4%BF%A1%E6%81%AF%E4%B8%8E%E5%AD%98%E5%82%A8/</url>
    <content><![CDATA[<h3 id="信息"><a href="#信息" class="headerlink" title="信息"></a>信息</h3><h4 id="cookies"><a href="#cookies" class="headerlink" title="cookies"></a>cookies</h4><ol>
<li>关于cookies<blockquote>
<p>cookies不是缓存;</p>
<p>当 web 服务器向浏览器发送网页后，连接被关闭，服务器会忘记用户的一切，Cookie 是为了解决记住用户信息发明的;</p>
<p>使得基于无状态的http协议记录稳定的状态信息成为可能；</p>
<p>格式为键值对，名字自定义;</p>
<p>{key,value,domain,path,exprits,size};</p>
<p>第一次访问服务器通过响应头的set-cookie发送到用户浏览器并保存在本地的一小块数据;</p>
<p>它会在浏览器之后向同一服务器再次发送请求时被携带在http请求头Cookie并发送到服务器;</p>
</blockquote>
</li>
</ol>
<p><img src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fpic4.zhimg.com%2Fv2-8af4f72c16e0cf906027ed41f5e20e17_b.jpg&refer=http%3A%2F%2Fpic4.zhimg.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=auto?sec=1660188325&t=f2070b56c0dfc213e52ca02de17990af" alt="原理图"></p>
<ol start="2">
<li><p>cookie的作用</p>
<blockquote>
<p>记录用户的登录状态，购物车的状态</p>
<p>主题风格等个性化的设置</p>
</blockquote>
</li>
<li><p>cookie的分类：</p>
<blockquote>
<p>会话级cookie：保存在内存，当前域名关闭时自动失效</p>
<p>持久级cookie：保存在硬盘，当失效时间到了自动失效；<br>存储位置：C:\Users\Public(公用)\AppData\Local\Google\Chrome\User Data\Default</p>
</blockquote>
</li>
<li><p>cookie的特点</p>
<blockquote>
<p>每一个域名只会存4k大小</p>
<p>保存在客户端，不安全</p>
<p>主domain污染，子域名发送请求时也会带上主域名的信息，造成臃肿</p>
<p>查看cookie：当前网页(开发者工具)，所有cookie(设置)</p>
<p>客户端状态管理技术：将状态存放在客户端。</p>
</blockquote>
</li>
</ol>
<h4 id="session"><a href="#session" class="headerlink" title="session"></a>session</h4><ol>
<li><p>关于session</p>
<blockquote>
<p>当我们用户第一次登录之后，在服务器就会生成一个会话标识(sessionid),并保存在服务器的内存中，默认保存30分钟</p>
<p>这个sessionid会通过set-cookie发送给客户端保存，下次访问通过cookie将sessionid传输给服务器，服务器就知道你是哪个用户</p>
<p>所以cookie中就不用保存用户密码等信息，只需保存sessionid就可以了</p>
<p>sessionid一般是通过会话级cookie保存和传输，提高了安全性</p>
</blockquote>
</li>
<li><p>session特点</p>
<blockquote>
<p>服务器状态管理技术：将状态存放在服务器中</p>
<p>增加了服务器的负担，影响服务器性能<br>解决：可以配置多台服务器</p>
<p>用户每次访问不同的服务器，且并不是每台服务器都记录了sessionid<br>解决1：ip捆绑(每次只访问同一台服务器)</p>
<p>解决2：session复制(每台服务器都复制一份相同的sessionid)</p>
<p>解决3：单点登录(所有用户都只请求单点登录服务器，所有的sessionid都保存在单点服务器上，之后分发请求)<br>缺点：用户过多还是会崩溃，sessionid可以被伪造</p>
</blockquote>
</li>
</ol>
<p><img src="https://img-blog.csdnimg.cn/20210301190137744.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2NjIwMTI5,size_16,color_FFFFFF,t_70#pic_center" alt="原理图"></p>
<h4 id="token"><a href="#token" class="headerlink" title="token"></a>token</h4><ol>
<li>token原理<blockquote>
<p>用户登录成功后，服务器生成一个令牌(token)，里面包含了userid等用户信息，保存在服务器的文本文档或数据库中</p>
<p>服务器再将token发送给客户端，本地可以存储起来</p>
<p>客户端每次向服务端请求资源的时候需要带着服务端签发的token</p>
<p>服务端收到请求，然后去验证客户端请求里面带着的token，如果验证成功，就向客户端返回请求的数据</p>
<p>客户端和服务器端之间的token验证是通过人为的加密的约定</p>
</blockquote>
</li>
</ol>
<p><img src="https://img-blog.csdnimg.cn/20200904225849315.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0NzYyMjY3,size_16,color_FFFFFF,t_70#pic_center" alt="原理图"></p>
<ol start="2">
<li>加密方式<table>
<thead>
<tr>
<th>对称加密解密</th>
<th>双钥加密解密</th>
<th>只加密不解密</th>
</tr>
</thead>
<tbody><tr>
<td>DES、AES</td>
<td>RSA</td>
<td>MD5、SHA系列</td>
</tr>
</tbody></table>
<blockquote>
<p>缺点：金融项目、银行项目、第三方支付项目加密要求达不到<br>方法：签名和数字证书，主要用于接口测试</p>
</blockquote>
</li>
</ol>
<h4 id="三者的区别与联系"><a href="#三者的区别与联系" class="headerlink" title="三者的区别与联系"></a>三者的区别与联系</h4><p><strong>相同点：</strong></p>
<ul>
<li>都是在服务器产生的，都用于身份验证</li>
<li>用于客户端和服务器端状态保持的</li>
<li>请求接口都需要，cookie和session在请求头中，token在接口参数中</li>
</ul>
<p><strong>不同点：</strong></p>
<ul>
<li>cookie存储在客户端，session存储在服务器内存，默认30分钟，session安全性高于cookie，重要数据放session，次要数据放cookie；</li>
<li>token存储在服务器数据库中，比session更加节约服务器资源</li>
</ul>
<h3 id="存储"><a href="#存储" class="headerlink" title="存储"></a>存储</h3><h4 id="H5本地存储"><a href="#H5本地存储" class="headerlink" title="H5本地存储"></a>H5本地存储</h4><blockquote>
<p>localstorage 永久存储本地域名，除非手动删除，不同域名及子域名不共享</p>
<p>sessionstorage 关闭当前会话即消失，不同域名及相同域名子域名不共享</p>
<p>server端拿不到本地存储的信息，不会被拦截，可以通过地址拼接获取</p>
<p>存储大小为5m</p>
<p>利用本地存储，可以减少网络传输</p>
</blockquote>
<h4 id="indexedDB和webSQL"><a href="#indexedDB和webSQL" class="headerlink" title="indexedDB和webSQL"></a>indexedDB和webSQL</h4><blockquote>
<p>一种能在浏览器中持久的存储结构化数据的数据库，并为web应用提供了丰富的查询能力</p>
<p>按照域名分配独立空间，一个独立域名下可以创建多个数据库，每个数据库可以创建多个对象存储空间(表)，一个存储空间可以存储多个对象数据</p>
</blockquote>
<h4 id="H5离线缓存"><a href="#H5离线缓存" class="headerlink" title="H5离线缓存"></a>H5离线缓存</h4><blockquote>
<p>让web应用在离线的情况下继续使用，通过manifest文件指明需要缓存的资源</p>
</blockquote>
<hr>
<p>参考视频：<a href="https://www.bilibili.com/video/BV1UA411H77k?spm_id_from=333.999.0.0">BV1UA411H77k</a></p>
]]></content>
      <categories>
        <category>前端学习</category>
      </categories>
      <tags>
        <tag>cookies</tag>
        <tag>session</tag>
        <tag>token</tag>
        <tag>H5本地存储</tag>
      </tags>
  </entry>
  <entry>
    <title>数据请求之axios</title>
    <url>/2022/07/15/a009-%E6%95%B0%E6%8D%AE%E8%AF%B7%E6%B1%82%E4%B9%8Baxios/</url>
    <content><![CDATA[<h3 id="数据请求的特点"><a href="#数据请求的特点" class="headerlink" title="数据请求的特点"></a>数据请求的特点</h3><p><strong>1. 无刷新更新数据</strong></p>
<p><strong>2. 异步与服务器通信</strong></p>
<p><strong>3. 前端和后端负载平衡</strong></p>
<p><strong>4. 基于、支持标准</strong></p>
<p><strong>5. 界面与应用分离</strong></p>
<h3 id="什么是axios"><a href="#什么是axios" class="headerlink" title="什么是axios"></a>什么是axios</h3><p>axios是基于promise的http客户端，可以在浏览器(发送AJAX)和node(发送http请求)环境中运行<br>axios的执行结果返回是一个promise对象</p>
<h3 id="响应结果结构"><a href="#响应结果结构" class="headerlink" title="响应结果结构"></a>响应结果结构</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">&#123;config,data,headers,request,status,statusTxt&#125;<br></code></pre></td></tr></table></figure>
<blockquote>
<p>config：发送请求的配置对象<br>data：响应体的结果，axios自动进行了json解析<br>headers：响应头信息<br>request：原生的ajax请求对象<br>status：响应状态码<br>statusTxt：响应状态字符串</p>
</blockquote>
<h3 id="请求配置对象"><a href="#请求配置对象" class="headerlink" title="请求配置对象"></a>请求配置对象</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">&#123;url,method,baseURL,transformRequest,transformResponse,headers,params&#125;<br></code></pre></td></tr></table></figure>
<blockquote>
<p>transformRequest：对请求参数进行预处理<br>transformResponse：对响应结果进行预处理</p>
</blockquote>
<h3 id="实例对象"><a href="#实例对象" class="headerlink" title="实例对象"></a>实例对象</h3><p>实例对象的功能和axios的功能几近一样，使用时一般不会使用全局的axios<br>可以应用实例给不同的域名设置默认配置</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">axios.<span class="hljs-property">defaults</span>.<span class="hljs-property">baseURL</span><br><span class="hljs-keyword">const</span> duanzi = axios.<span class="hljs-title function_">create</span>(&#123;<span class="hljs-attr">baseURL</span>:<span class="hljs-string">&#x27;http://b.com&#x27;</span>&#125;)<br></code></pre></td></tr></table></figure>
<h3 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h3><blockquote>
<p>拦截器类似于promise.prototype.then(成功回调，失败回调)<br>请求拦截器config：可以对请求参数进行处理<br>响应拦截器response：可以对响应结果进行处理<br>请求拦截器使用场景：</p>
<ul>
<li>config中的信息不符合服务器的要求，需要更改时</li>
<li>每次发送网络请求希望界面显示请求图标时(转圈效果)</li>
<li>某些网络请求(比如登录需要携带token)，必须携带一些特殊信息时</li>
</ul>
</blockquote>
<h3 id="网络模块的选择"><a href="#网络模块的选择" class="headerlink" title="网络模块的选择"></a>网络模块的选择</h3><blockquote>
<p>原生Ajax<br>特点：基于XMLHttpRequert，配置和调用非常混乱</p>
<p>fetch<br>特点：低层次的API，类似于原生的XHR，需要进行封装</p>
<p>jquery-Ajax<br>特点：Jqury代码1W+行，为了使用$ajax下载jquery大可不必</p>
<p>vue-resource<br>特点：支持vue1.x，不支持新版本，官方也不再推荐使用</p>
<p>axios<br>特点：本身是一个promise对象</p>
</blockquote>
<h3 id="跨域设置"><a href="#跨域设置" class="headerlink" title="跨域设置"></a>跨域设置</h3><p>接口示例：<a href="http://123.207.32.32:8000/home/multidata">coderwhy的接口</a></p>
<p>这里以vue为例：<br>跨域设置本地服务器需要加上协议，如target:”<a href="http://localhost:3000&quot;">http://localhost:3000&quot;</a><br>axios在解析域名时先在遇到&#x2F;api前缀在其前加target后将&#x2F;api转换为pathRewrite中对应的内容</p>
<h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><blockquote>
<p>取消请求使用配置对象canceltoken属性</p>
<p>axios发送并发请求axios.all(类似于Promise.all),并可使用axios.spread展开结果的数组</p>
<p>不传method默认get请求，get请求是通过query传递参数的,axios中是params；post是通过requesbody传递参数,axios中是data</p>
<p>axios的封装。不要在每一个组件中单独引用axios，万一axios不再维护需要另一个框架来替换的时候代码量太大</p>
</blockquote>
<hr>
<p>中文文档：<a href="http://www.axios-js.com/zh-cn/docs/">中文文档</a></p>
<p>参考视频：<br><a href="https://www.bilibili.com/video/BV1wr4y1K7tq?spm_id_from=333.999.0.0">BV1wr4y1K7tq</a>   <a href="https://www.bilibili.com/video/BV17j411f74d?p=141">BV17j411f74d</a></p>
]]></content>
      <categories>
        <category>前端学习</category>
      </categories>
      <tags>
        <tag>axios</tag>
      </tags>
  </entry>
  <entry>
    <title>js静态模块打包器</title>
    <url>/2022/07/15/a010-js%E9%9D%99%E6%80%81%E6%A8%A1%E5%9D%97%E6%89%93%E5%8C%85%E5%99%A8/</url>
    <content><![CDATA[<h2 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h2><h3 id="什么是webpack"><a href="#什么是webpack" class="headerlink" title="什么是webpack"></a>什么是webpack</h3><ol>
<li>webpack 是一种前端资源构建工具，一个静态资源打包器</li>
<li>浏览器中不能直接识别工程化项目中的less(通过loader编译)、esmodule(可直接编译)等语法，webpack这些编译成浏览器可以直接识别的语法</li>
</ol>
<h3 id="webpack的作用"><a href="#webpack的作用" class="headerlink" title="webpack的作用"></a>webpack的作用</h3><ol>
<li>模块化：<blockquote>
<p>帮助我们自动处理模块之间的依赖关系（包括嵌套依赖，只用打包main.js,main依赖的其他模块它会自动处理），不仅仅是js文件，css、图片、json文件等都可以被当作模块来使用</p>
</blockquote>
</li>
<li>打包：<blockquote>
<p>将webpack中的各种资源模块进行打包合并成一个或多个包（bundle），打包过程对资源进行处理，比如压缩图片、sass转成css、es6转es5，ts转js等操作</p>
</blockquote>
</li>
</ol>
<h3 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h3><blockquote>
<p>webpack依赖node环境，node环境为了能正常执行很多代码，必须包含各种依赖包，需要npm（包管理工具）</p>
<p>src源码;dist为打包后的文件配置到服务器即可</p>
<p>package.json scirpts 项中的使用<br>npm run + 指令 即可执行对应指令后面的命令，但是和直接执行不一样的地方在于会优先找本地安装的对应命令的包（不是-g安装的）若没找到则使用全局安装的包<br>在终端（cmd窗口、本地终端）中使用webpack会找全局安装的包</p>
<p>loader(转换器)：js代码webpack会自动处理，css、图片、es6、ts、.jsx、.vue等高级的东西webpack本身是不支持转化的，则需要给webpack扩展对应的loader<br>通过npm安装需要使用的loader，在webpack.config.js中的module关键字下进行配置</p>
<p>入口文件放最外层，功能相关的文件放相应的文件夹中</p>
<p>plugin(扩展器)：对webpack本身进行扩展，如打包优化、文件压缩等<br>npm安装需要使用的plugin(某些webpack内置的插件不需要安装),在webpack配置plugins项</p>
<p>webpack真实打包 是将有依赖的js文件，当成数组元素最终形成一个数组做为执行函数_webpack_require_的实参</p>
</blockquote>
<h3 id="vue-webpack"><a href="#vue-webpack" class="headerlink" title="vue-webpack"></a>vue-webpack</h3><p>vue有两种版本<br>runtime-only：代码中不可以有任何的template;<br>runtime-compiler,可以有template，compiler可以用于编译template</p>
<hr>
<p>官方文档：<a href="https://www.webpackjs.com/concepts/">webpackjs</a></p>
<p>参考视频：<a href="https://www.bilibili.com/video/BV1e7411j7T5?spm_id_from=333.999.0.0">BV1e7411j7T5</a>   <a href="https://www.bilibili.com/video/BV1cv411C74F?spm_id_from=333.999.0.0">BV1cv411C74F</a>   <a href="https://www.bilibili.com/video/BV17j411f74d?spm_id_from=333.999.0.0">BV17j411f74d</a></p>
<h2 id="Rollup"><a href="#Rollup" class="headerlink" title="Rollup"></a>Rollup</h2><ol>
<li>Rollup 是一款 ES Modules 打包器，从作用上来看，Rollup 与 Webpack 非常类似。不过相比于 Webpack，Rollup要小巧的多，打包生成的文件更小。（识别commonJs需要插件）</li>
<li>热更新：Rollup不支持HMR，在对js以外的模块的支持上不如webpack，但是如果是打包纯js库例如react，前期的vue的话，使用rollup是很合适的，打包的产物比较干净，没有webpack那么多工具函数</li>
<li>Rollup 的插件机制设计得相对更干净简洁，单个模块的 resolve &#x2F; load &#x2F; transform 跟打包环节完全解耦，所以 Vite 才能在开发时模拟 Rollup 的插件机制，并且兼容大部分 Rollup 插件</li>
<li>rollup原生支持tree-shaking</li>
</ol>
<hr>
<p>官方文档：<a href="https://www.rollupjs.com/">rollupjs</a></p>
<h2 id="Vite"><a href="#Vite" class="headerlink" title="Vite"></a>Vite</h2><ol>
<li>一个开发服务器，它基于 原生 ES 模块 提供了丰富的内建功能，如速度很快的 【模块热更新HMR】</li>
<li>一套构建指令，它使用 Rollup打包你的代码，并且它是预配置的，可以输出用于生产环境的优化过的静态资源</li>
<li>快速的冷启动：vite会直接启动开发服务器，不需要进行打包操作，所以不需要分析模块的依赖、不需要编译，因此启动速度非常快<br>即时的模块热更新</li>
<li>真正的按需编译：利用现代浏览器支持ES Module的特性，当浏览器请求某个模块的时候，再根据需要对模块的内容进行编译，这种方式大大缩短了编译时间<br>Rollup 是一款 ES Modules 打包器，从作用上来看，Rollup 与 Webpack 非常类似。不过相比于 Webpack，Rollup要小巧的多，打包生成的文件更小。（识别commonJs需要插件）<br>热更新：Rollup不支持HMR，在对js以外的模块的支持上不如webpack，但是如果是打包纯js库例如react，前期的vue的话，使用rollup是很合适的，打包的产物比较干净，没有webpack那么多工具函数<br>Rollup 的插件机制设计得相对更干净简洁，单个模块的 resolve &#x2F; load &#x2F; transform 跟打包环节完全解耦，所以 Vite 才能在开发时模拟 Rollup 的插件机制，并且兼容大部分 Rollup 插件<br>rollup原生支持tree-shaking</li>
</ol>
<hr>
<p>官方文档：<a href="https://cn.vitejs.dev/">vitejs</a><br>参考博客：<a href="https://blog.csdn.net/qq_41968486/article/details/125450518">csdn_qq_41968486</a></p>
]]></content>
      <categories>
        <category>前端学习</category>
      </categories>
      <tags>
        <tag>webpack</tag>
        <tag>Rollup</tag>
        <tag>vite</tag>
      </tags>
  </entry>
  <entry>
    <title>js超集typescript</title>
    <url>/2022/07/18/a012-js%E8%B6%85%E9%9B%86typescript/</url>
    <content><![CDATA[<h3 id="在webpack中使用ts"><a href="#在webpack中使用ts" class="headerlink" title="在webpack中使用ts"></a>在webpack中使用ts</h3><ol>
<li><p>安装依赖</p>
<figure class="highlight stata"><table><tr><td class="code"><pre><code class="hljs stata">npm init -y<br>npm i -<span class="hljs-keyword">D</span> webpack webpack-<span class="hljs-keyword">cli</span> typescript ts-loader webpack-dev-server html-webpack-<span class="hljs-keyword">plugin</span> <span class="hljs-keyword">cross</span>-env clean-webpack-<span class="hljs-keyword">plugin</span><br></code></pre></td></tr></table></figure>
</li>
<li><p>配置package.json</p>
<figure class="highlight json"><table><tr><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;scripts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;dev&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cross-env NODE_ENV=development webpack-dev-server --config build/webpack.config.js&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;build&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cross-env NODE_ENV=production webpack --config build/webpack.config.js&quot;</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br></code></pre></td></tr></table></figure>
</li>
<li><p>配置webpack.config.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> &#123; <span class="hljs-title class_">CleanWebpackPlugin</span> &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;clean-webpack-plugin&#x27;</span>)<br><span class="hljs-keyword">const</span> <span class="hljs-title class_">HtmlWebpackPlugin</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;html-webpack-plugin&#x27;</span>)<br><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>)<br><br><span class="hljs-keyword">const</span> isProd = process.<span class="hljs-property">env</span>.<span class="hljs-property">NODE_ENV</span> === <span class="hljs-string">&#x27;production&#x27;</span> <span class="hljs-comment">// 是否生产环境</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">resolve</span>(<span class="hljs-params">dir</span>) &#123;<br>    <span class="hljs-keyword">return</span> path.<span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&#x27;..&#x27;</span>, dir)<br>&#125;<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>    <span class="hljs-attr">mode</span>: isProd ? <span class="hljs-string">&#x27;production&#x27;</span> : <span class="hljs-string">&#x27;development&#x27;</span>,<br>    <span class="hljs-attr">entry</span>: &#123;<br>        <span class="hljs-attr">app</span>: <span class="hljs-string">&#x27;./src/main.ts&#x27;</span><br>    &#125;,<br><br>    <span class="hljs-attr">output</span>: &#123;<br>        <span class="hljs-attr">path</span>: <span class="hljs-title function_">resolve</span>(<span class="hljs-string">&#x27;dist&#x27;</span>),<br>        <span class="hljs-attr">filename</span>: <span class="hljs-string">&#x27;[name].[contenthash:8].js&#x27;</span><br>    &#125;,<br><br>    <span class="hljs-attr">module</span>: &#123;<br>        <span class="hljs-attr">rules</span>: [<br>            &#123;<br>                <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.tsx?$/</span>,<br>                <span class="hljs-attr">use</span>: <span class="hljs-string">&#x27;ts-loader&#x27;</span>,<br>                <span class="hljs-attr">include</span>: [<span class="hljs-title function_">resolve</span>(<span class="hljs-string">&#x27;src&#x27;</span>)]<br>            &#125;<br>        ]<br>    &#125;,<br><br>    <span class="hljs-attr">plugins</span>: [<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">CleanWebpackPlugin</span>(&#123;<span class="hljs-comment">//清除dist里面的旧文件</span><br>        &#125;),<br><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">HtmlWebpackPlugin</span>(&#123;<br>            <span class="hljs-attr">template</span>: <span class="hljs-string">&#x27;./public/index.html&#x27;</span><br>        &#125;)<br>    ],<br><br>    <span class="hljs-comment">//设置哪些可以作为引用的模块</span><br>    <span class="hljs-attr">resolve</span>: &#123;<br>        <span class="hljs-attr">extensions</span>: [<span class="hljs-string">&#x27;.ts&#x27;</span>, <span class="hljs-string">&#x27;.tsx&#x27;</span>, <span class="hljs-string">&#x27;.js&#x27;</span>]<br>    &#125;,<br><br>    <span class="hljs-attr">devtool</span>: isProd ? <span class="hljs-string">&#x27;cheap-module-source-map&#x27;</span> : <span class="hljs-string">&#x27;cheap-module-eval-source-map&#x27;</span>,<br><br>    <span class="hljs-attr">devServer</span>: &#123;<span class="hljs-comment">//可以不设置</span><br>        <span class="hljs-attr">host</span>: <span class="hljs-string">&#x27;localhost&#x27;</span>, <span class="hljs-comment">// 主机名</span><br>        <span class="hljs-attr">stats</span>: <span class="hljs-string">&#x27;errors-only&#x27;</span>, <span class="hljs-comment">// 打包日志输出输出错误信息</span><br>        <span class="hljs-attr">port</span>: <span class="hljs-number">8088</span>,<br>        <span class="hljs-attr">open</span>: <span class="hljs-literal">true</span><br>    &#125;,<br>&#125;<br></code></pre></td></tr></table></figure>
</li>
<li><p>配置tsconfig.json，文件生成方式tsc –init</p>
<figure class="highlight json"><table><tr><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;compilerOptions&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-comment">/* Visit https://aka.ms/tsconfig.json to read more about this file */</span><br>    <span class="hljs-attr">&quot;experimentalDecorators&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span><span class="hljs-punctuation">,</span>           <span class="hljs-comment">//开启装饰器</span><br>    <span class="hljs-attr">&quot;emitDecoratorMetadata&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span><span class="hljs-punctuation">,</span> <br>    <span class="hljs-attr">&quot;target&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;es5&quot;</span><span class="hljs-punctuation">,</span>                          <span class="hljs-comment">/* Specify ECMAScript target version: &#x27;ES3&#x27; (default), &#x27;ES5&#x27;, &#x27;ES2015&#x27;, &#x27;ES2016&#x27;, &#x27;ES2017&#x27;, &#x27;ES2018&#x27;, &#x27;ES2019&#x27;, &#x27;ES2020&#x27;, or &#x27;ESNEXT&#x27;. */</span><br>    <span class="hljs-attr">&quot;module&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;commonjs&quot;</span><span class="hljs-punctuation">,</span>                     <span class="hljs-comment">/* Specify module code generation: &#x27;none&#x27;, &#x27;commonjs&#x27;, &#x27;amd&#x27;, &#x27;system&#x27;, &#x27;umd&#x27;, &#x27;es2015&#x27;, &#x27;es2020&#x27;, or &#x27;ESNext&#x27;. */</span><br>    <span class="hljs-attr">&quot;strict&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">false</span><span class="hljs-punctuation">,</span>                           <span class="hljs-comment">/* 所有严格检查的总开关 */</span><br>    <span class="hljs-attr">&quot;esModuleInterop&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span><span class="hljs-punctuation">,</span>                  <span class="hljs-comment">/* Enables emit interoperability between CommonJS and ES Modules via creation of namespace objects for all imports. Implies </span><br><span class="hljs-comment">    &quot;forceConsistentCasingInFileNames&quot;: true  /* Disallow inconsistently-cased references to the same file. */</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br><br></code></pre></td></tr></table></figure></li>
</ol>
<h3 id="类型注解"><a href="#类型注解" class="headerlink" title="类型注解"></a>类型注解</h3><p>为变量添加类型约束。约定了什么类型，就只能给变量赋值该类型的值，否则就会报错</p>
<h3 id="常用基础类型"><a href="#常用基础类型" class="headerlink" title="常用基础类型"></a>常用基础类型</h3><p>js已有类型(类型都是小写的)</p>
<blockquote>
<p>原始类型：number&#x2F;string&#x2F;boolean&#x2F;null&#x2F;undefined&#x2F;symbol<br>对象类型：object(数组、对象、函数)  </p>
</blockquote>
<p>ts新增类型</p>
<blockquote>
<p>联合类型、自定义类型(类型别名)、接口、元组、字面量类型、枚举、void、any等  </p>
</blockquote>
<h4 id="联合类型"><a href="#联合类型" class="headerlink" title="联合类型(|)"></a>联合类型(|)</h4><p>由两个或多个其他类型组成的类型，表示可以是这些类型中的任意一种</p>
<h4 id="类型别名"><a href="#类型别名" class="headerlink" title="类型别名"></a>类型别名</h4><p>为任意类型起别名  </p>
<p>使用场景：当同一类型且类型还比较复杂，被多次使用时，可以通过类型别名，简化该类型的使用 </p>
<p>使用type创建类型别名后，直接使用该类型别名作为变量的类型注解即可  </p>
<p>命名规范可以是任意合法的变量名称，如：CustomArray</p>
<p>类型别名不能extends</p>
<h4 id="函数类型"><a href="#函数类型" class="headerlink" title="函数类型"></a>函数类型</h4><p>实际指的是函数参数和返回值的类型  </p>
<p>两种方式：单独指定参数和返回值类型、同时指定参数和返回值类型(只使适用于函数表达式)  </p>
<p>void：如果函数没有返回值，则返回类型为void  </p>
<p>可选参数：函数参数可传可不传，在参数后面加?，可选参数只能出现在参数列表的最后。如：数组slice方法 </p>
<p>有默认参数的也只能出现在参数列表的最后</p>
<h4 id="对象类型"><a href="#对象类型" class="headerlink" title="对象类型"></a>对象类型</h4><p>就是在描述对象的结构，有什么类型的属性和方法  </p>
<p>在一行代码中指定对象多个属性类型时，用分号隔开；如果一行代码只指定一个属性类型，可以去掉分号通过换行分隔多个属性类型  </p>
<p>可选属性：对象的属性和方法，也是可选的。如：axios，发送get请求时，method可省  </p>
<h4 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h4><p>接口能作用于引用类型数据：对象，数组，函数</p>
<p>当一个对象类型被多次使用时，一般会使用接口来描述对象的类型，达到复用的目的 </p>
<p>使用interface关键字声明，接口名称可以是任意合法的变量名称，如：IPerson  </p>
<h4 id="接口和类型别名的异同"><a href="#接口和类型别名的异同" class="headerlink" title="接口和类型别名的异同"></a>接口和类型别名的异同</h4><p>相同点：</p>
<blockquote>
<p>都可以给对象指定类型  </p>
</blockquote>
<p>不同点：</p>
<blockquote>
<p>接口只能为对象指定类型<br>类型别名实际上可以为任意类型指定别名<br>同一作用域下的多个同名接口会自动合并，而类型别名则会报错  </p>
</blockquote>
<h4 id="接口继承"><a href="#接口继承" class="headerlink" title="接口继承"></a>接口继承</h4><p>如果两个接口之间有相同的属性或方法，可以将公共的属性或方法抽离到一个接口中，通过继承实现复用  </p>
<p>使用extends关键字实现接口继承  </p>
<h4 id="元组-Tuple"><a href="#元组-Tuple" class="headerlink" title="元组(Tuple)"></a>元组(Tuple)</h4><p>元组类型是另一种类型的数组，它确切的知道包含多少个元素，以及特定索引对应的类型</p>
<h4 id="类型推断"><a href="#类型推断" class="headerlink" title="类型推断"></a>类型推断</h4><p>某些没有明确指明类型的地方，ts的类型推断机制会帮助提供类型  </p>
<p>常见场景：声明变量并立即初始化时；决定函数返回值时的两种情况，类型注解可以不写 </p>
<p>如果声明变量但是没有立即初始化值，此时必须手动添加类型注解  </p>
<p>能省略类型注解的地方就省略，充分利用ts的类型推断能力，提高开发效率  </p>
<h4 id="类型断言"><a href="#类型断言" class="headerlink" title="类型断言"></a>类型断言</h4><p>某些情况下你会比ts更加明确一个值的类型，此时可以使用类型断言来制定更加具体的类型 </p>
<p>getElementById返回值是HTMLElement，该类型只包括常见标签公共的属性和方法，无法访问a标签的href，此时需要类型断言指定更加具体的类型  </p>
<p>推断HTML元素的类型，浏览器开发者工具选中元素，控制台输入console.dir($0)，展开翻到最下面就能看到  </p>
<p>非空断言</p>
<h4 id="字面量类型"><a href="#字面量类型" class="headerlink" title="字面量类型"></a>字面量类型</h4><p>str2是一个常量，它的值不能变化，所以它的类型是’hello’ </p>
<p>上面的’hello’就是一个字面量类型，某个特定的字符串也可以作为ts中的类型  </p>
<p>除字符串外，任意的js字面量(比如：对象、数字等)都可以作为类型使用  </p>
<p>字面量类型常和联合类型一起使用，用来表示一组明确的可选值列表</p>
<p>相当于string类型，字面量类型更加精确、严谨</p>
<h4 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h4><p>枚举类型定义一组命名常量。它描述一个值，该值可以是这些命名常量中的一个  </p>
<p>枚举的功能类似于字面类型+联合类型组合的功能，也可以表示一组明确的可选值</p>
<p>使用enum关键字定义枚举，枚举中的值以大写字母开头，多个值通过逗号分隔  </p>
<p>访问枚举成员 Direction.Up  </p>
<p>枚举成员是有值的，默认为从0开始自增的数值  </p>
<p>枚举成员的值为数字的枚举，称为<strong>数字枚举</strong>。当然也可以给枚举中的成员初始化值  </p>
<p><strong>字符串枚举</strong>没有自增长的行为，每个成员必须有初始值  </p>
<p>枚举不仅用作类型，还提供值。其他类型在编译成js代码时会被移除，但是枚举类型会被编译成js代码 Direction[‘Up’] &#x3D; 0  </p>
<p>一般情况下，推荐使用字面量类型+联合类型的方式，因为相比枚举更加直观简洁高效  </p>
<h4 id="any类型"><a href="#any类型" class="headerlink" title="any类型"></a>any类型</h4><p>不推荐使用any，这样会失去ts类型保护机制(不会在写代码的时候提示，而是在运行后才报错)</p>
<p>隐式具有any类型的情况：</p>
<blockquote>
<p>声明变量不提供类型也不提供默认值<br>函数参数不加类型  </p>
</blockquote>
<p>除非临时使用any来避免书写一个当前并不知道很长很复杂的类型</p>
<h4 id="typeof运算符"><a href="#typeof运算符" class="headerlink" title="typeof运算符"></a>typeof运算符</h4><p>可以在类型上下文(:后面)中引用变量或属性的类型(类型查询)</p>
<p>根据已有变量的值，获取该值的类型，来简化类型书写</p>
<p>只能用来查询变量或对象属性的类型，无法查询其他形式的类型(如，函数调用的类型)</p>
<h3 id="高级类型"><a href="#高级类型" class="headerlink" title="高级类型"></a>高级类型</h3><blockquote>
<p>class类型、类型兼容性、交叉类型、泛型和keyof、索引签名类型和索引查询类型、映射类型</p>
</blockquote>
<h4 id="class类"><a href="#class类" class="headerlink" title="class类"></a>class类</h4><p>面向对象：封装(成员和其可见性)，继承，多态</p>
<p>ts中的类，不仅提供了类的语法功能，也作为一种类型存在  </p>
<p>属性初始化后，如：age:number，constructor中才可以通过this.age访问实例成员(constructor用来实例属性初始化) </p>
<p>需要为构造函数参数指定类型注解，否则会被隐式推断为any；构造函数不需要返回值类型  </p>
<p>方法不需要初始化，方法的类型注解(参数和返回值)与函数用法相同  </p>
<p>类的两种继承方式：(1)extends子类继承父类   (2)implements实现接口  </p>
<blockquote>
<p>类实现接口意味着，类中必须提供接口中指定的所有方法和属性  </p>
</blockquote>
<p>类成员可见性：可以使用ts来控制class的属性或方法对于class外的代码是否可见  </p>
<blockquote>
<p>public：表示公开的，公有成员可以被任何地方访问；class成员默认为public，可以直接省略</p>
<p>protected：表示受保护的，仅对其声明所在类和子类中可见，<strong>实例中不可见</strong> </p>
<p>private：表示私有的，只在当前类中可见，<strong>实例和子类中均不可见</strong>  </p>
<p>readonly：表示只读，用来防止在构造函数之外对属性进行赋值(属性初始化时可以设置默认值)；只能修饰属性不能修饰方法  </p>
<ul>
<li>使用readonly时属性后面的类型注解不加，则属性的类型为&#x3D;后面的值(字面量类型)  </li>
<li>接口或{}表示的对象类型，也可以使用readonly</li>
</ul>
</blockquote>
<h4 id="类型兼容性"><a href="#类型兼容性" class="headerlink" title="类型兼容性"></a>类型兼容性</h4><p>两种类型系统：Structural Type System(结构化类型系统)    Nominal Type System(标明类型系统，如：C# java)</p>
<p>ts采用的是结构化类型系统，也叫作duck typing，类型检查关注的是值的形状。也就是说如果两个对象具有相同的形状，则认为它们属于同一类型  </p>
<p>对象：对于对象类型来说，Apple的成员至少与Food的相同(成员名字也要相同，成员参数名字可以不同)，则Food兼容Apple，即<strong>成员多的Apple的实例可以赋值给成员少的Food类</strong></p>
<blockquote>
<p>Apple的实例确实符合Food中的类型  </p>
</blockquote>
<p>接口：接口之间的兼容性类似于上面，且class与interface之间也可以兼容 </p>
<p>函数：函数兼容性需要考虑，参数个数、参数类型、返回值类型  </p>
<blockquote>
<p>参数个数，<strong>参数少的可以赋值给多的</strong>，这就是forEach(()&#x3D;&gt;{})的原理，js中省略函数用不到的参数是很常见的<br>参数类型，</p>
<ul>
<li>相同位置的参数类型要相同(原始类型number、string等)或兼容(对象类型class、interface)；  </li>
<li>如果参数有对象，把对象拆开，把每个属性看成一个个参数，参数少的可以赋值给参数多的<br>返回值类型，原始类型类型相同即可；对象类型，此时成员多的可以赋值给成员少的</li>
</ul>
</blockquote>
<h4 id="交叉类型-amp"><a href="#交叉类型-amp" class="headerlink" title="交叉类型(&amp;)"></a>交叉类型(&amp;)</h4><p>功能类似于接口继承，用于组合多个类型为一个类型(常用于对象类型)  </p>
<p><strong>交叉类型和接口继承的对比</strong>  </p>
<blockquote>
<p>相同点：都可以实现对象类型的组合<br>不同点：同名属性合并时，接口中同名属性的类型需保持一致否则报错，而交叉类型会直接合并</p>
</blockquote>
<h4 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h4><p>定义传入参数的类型</p>
<p>泛型在保证类型安全(不使用any)的同时，可以让函数等与多种类型一起工作，从而实现复用，常用于：函数、接口、class </p>
<p>&lt;&gt;里面为类型变量，可以是任意合法的变量名称，具体什么类型由用户调用时指定 </p>
<p>在调用<strong>泛型函数</strong>时，可以省略&lt;类型&gt;来简化调用，ts内部会采用类型参数推断机制；当编译器无法推断或推断不准确时，就需要显式传入类型参数 </p>
<p>泛型约束：泛型可以表示任何类型，无法保证一定存在length属性，如：number类型就没有length，此时就要为泛型添加约束来收缩范围  </p>
<blockquote>
<p>方式一：指定更加具体的类型；<br>方式二：添加约束(extends接口)，创建描述约束的接口，通过extends使用接口为泛型添加约束，该约束表示传入的类型必须包含接口中的成员 </p>
</blockquote>
<p>泛型的类型变量可以有多个，并且类型变量之间还可以约束</p>
<p>keyof关键字接收一个对象类型，生成其键名的联合类型，如：’name’|’age’  </p>
<p><strong>泛型接口</strong>，使用泛型接口时，需要显式指定具体的类型，接口中的所有成员都能使用类型变量  </p>
<p>数组是通过泛型接口实现的，当我们在使用数组时，ts会根据数组的不同类型，来自动将类型变量设置为相应的类型  </p>
<p>鼠标返在forEach上通过ctrl+鼠标左键(mac:option+鼠标左键)可以查看数组通过interface Array实现 </p>
<p><strong>泛型类</strong>，类似于泛型接口，如果class在不用明确指定类型的情况下能够推断出需要的类型，则可以省略类型参数 </p>
<p><strong>泛型工具类型</strong>：ts内置了一些常用的工具类型，来简化ts中的常见操作，都是基于泛型实现的，且是内置的，可以在代码中直接使用  </p>
<blockquote>
<p>(1)Partial<Type>：构造一个新类型，将Type的所有属性设置为可选<br>(2)Readonly<Type>：构造一个新类型，将Type的所有属性都设置为readonly<br>(3)Pick&lt;Type,Keys&gt;：从type中选择一组属性来构造新类型，Type表示选谁的属性，Keys表示选择哪几个属性，Keys只能是Type中存在的属性<br>(4)Record&lt;Keys,Type&gt;：构造一个对象类型，属性为Keys，属性类型为Type</p>
</blockquote>
<h4 id="索引签名类型"><a href="#索引签名类型" class="headerlink" title="索引签名类型"></a>索引签名类型</h4><p>当无法确定对象中有哪些属性，此时就需要用到索引签名类型  </p>
<p>js中对象的键是string类型的  </p>
<p>key只是一个占位符，可以换成任意合法的变量名称  </p>
<p>js数组是一类特殊的对象，数组的键是number类型的  </p>
<h4 id="映射类型"><a href="#映射类型" class="headerlink" title="映射类型"></a>映射类型</h4><p>基于旧类型创建新类型(对象类型)，减少重复、提升开发效率；映射对象的键  </p>
<p>映射类型是基于索引签名类型的，语法类似，也使用了[] </p>
<p>映射类型只能在类型别名中使用，不能在接口中使用  </p>
<p>映射类型除了根据联合类型创建外，还能根据对象类型创建(keyof)  </p>
<p>泛型工具类型，如：Partial<Type>，都是基于映射类型实现的；鼠标指定Partial，ctrl+鼠标左键</p>
<h4 id="索引查询类型"><a href="#索引查询类型" class="headerlink" title="索引查询类型"></a>索引查询类型</h4><p>T[P]语法，在ts中叫做索引查询类型，用来查询属性的类型</p>
<p>[]中的属性必须存在于被查询类型中，否则会报错</p>
<p>同时查询多个索引类型</p>
<h3 id="lt-gt-的使用场景"><a href="#lt-gt-的使用场景" class="headerlink" title="&lt;&gt;的使用场景"></a>&lt;&gt;的使用场景</h3><p>数组声明 </p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">const</span> <span class="hljs-attr">arr</span>:<span class="hljs-title class_">Array</span>&lt;<span class="hljs-built_in">string</span>&gt;<br></code></pre></td></tr></table></figure>

<p>类型断言 </p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><code class="hljs typescript">&lt;<span class="hljs-built_in">string</span>&gt;str<br></code></pre></td></tr></table></figure>

<p>泛型</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><code class="hljs typescript">getName&lt;<span class="hljs-built_in">string</span>&gt;(<span class="hljs-string">&#x27;akman&#x27;</span>)<br></code></pre></td></tr></table></figure>


<h3 id="extends使用场景"><a href="#extends使用场景" class="headerlink" title="extends使用场景"></a>extends使用场景</h3><p>class可以继承 只能继承一个类</p>
<p>接口可以继承  可以同时继承过个接口，用逗号隔开</p>
<p>泛型中参数类型也可以继承extends</p>
<h3 id="类型声明文件"><a href="#类型声明文件" class="headerlink" title="类型声明文件"></a>类型声明文件</h3><p>用来为已存在的js库提供类型信息</p>
<p>鼠标放在axios上，ctrl+鼠标左键，跳入index.d.ts文件即类型声明文件</p>
<h4 id="ts中的两种文件类型"><a href="#ts中的两种文件类型" class="headerlink" title="ts中的两种文件类型"></a>ts中的两种文件类型</h4><ol>
<li><p>.ts文件(implementtation)</p>
<blockquote>
<p>既包含类型信息又可执行代码<br>可以被编译为.js文件，然后执行代码<br>用途：编写程序代码的地方</p>
</blockquote>
<figure class="highlight typescript"><table><tr><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">type</span> <span class="hljs-title class_">Obj</span> = &#123; <span class="hljs-attr">age</span>: <span class="hljs-built_in">number</span> &#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">a: <span class="hljs-built_in">number</span>, b: <span class="hljs-built_in">number</span></span>): <span class="hljs-built_in">number</span> &#123;<br>    <span class="hljs-keyword">return</span> a + b<br>&#125;<br></code></pre></td></tr></table></figure>
</li>
<li><p>.d.ts文件(declaration)</p>
<blockquote>
<p>只包含类型信息的类型声明文件<br>不会生成.js文件<br>用途：为js提供类型信息</p>
</blockquote>
<figure class="highlight typescript"><table><tr><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">type</span> <span class="hljs-title class_">Obj</span> = &#123; <span class="hljs-attr">age</span>: <span class="hljs-built_in">number</span> &#125;<br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Iperson</span> &#123;<br>    <span class="hljs-attr">age</span>: <span class="hljs-built_in">number</span><br>&#125;<br></code></pre></td></tr></table></figure></li>
</ol>
<h4 id="使用类型声明文件的两种方式-别人的"><a href="#使用类型声明文件的两种方式-别人的" class="headerlink" title="使用类型声明文件的两种方式(别人的)"></a>使用类型声明文件的两种方式(别人的)</h4><ol>
<li><p>使用已有的类型声明文件</p>
<blockquote>
<p>内置类型声明文件<br>内置api都提供了类型声明文件，ctrl+鼠标左键跳到对应的类型声明文件下</p>
</blockquote>
</li>
<li><p>第三方库的类型声明文件</p>
<blockquote>
<p>库自带的类型声明文件，如：axios中index.d.ts</p>
<p>由DefinitelyTyped提供，github仓库，用来提供高质量ts类型声明，这些包的名称为@types&#x2F;<br>引入第三方库，如果下面有…则没有类型声明文件，需要手动下载，如：npm i -D @types&#x2F;lodash；<br>会下载到node_modules&#x2F;@types&#x2F;下，之后自动加载下载好的类型声明文件，ctrl+鼠标左键跳到对应的类型声明文件下<br>包查询地址：<a href="https://www.typescriptlang.org/dt/search?search=">https://www.typescriptlang.org/dt/search?search=</a></p>
</blockquote>
</li>
</ol>
<h4 id="创建自己的类型声明文件-自己的"><a href="#创建自己的类型声明文件-自己的" class="headerlink" title="创建自己的类型声明文件(自己的)"></a>创建自己的类型声明文件(自己的)</h4><p>场景：项目内共享类型；为已有的js文件提供类型声明</p>
<ol>
<li><p>项目内共享类型</p>
<blockquote>
<p>如果多个ts文件都用到了同一个类型，此时可以创建.d.ts提供该类型，实现类型共享<br>创建需要共享的类型，使用export导出，在需要共享类型的ts文件中使用import导入即可，.d.ts后缀可省</p>
</blockquote>
</li>
<li><p>为已有的js文件提供类型声明</p>
<blockquote>
<p>将js项目迁移到ts项目时，为了让已有的.js文件有类型声明<br>成为库作者，创建库为他人使用，如axios中的index.d.ts<br>在ts文件中使用js文件中的功能时，ts会自动加载.js同名的.d.ts文件，以提供类型声明<br>declare关键字，用于类型声明，为.js文件中已存在的变量声明，而不是创建一个新的变量<br>对于type、interface只能在ts中使用的，可以省略declare关键字<br>对于let、function在js、ts中都能用的，应该使用declare关键字，明确指定此处用于类型声明</p>
</blockquote>
<figure class="highlight typescript"><table><tr><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// utils.d.ts</span><br><span class="hljs-keyword">declare</span> <span class="hljs-keyword">let</span> <span class="hljs-attr">count</span>:<span class="hljs-built_in">number</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">IPoint</span> &#123;<span class="hljs-attr">x</span>:<span class="hljs-built_in">number</span>;<span class="hljs-attr">y</span>:<span class="hljs-built_in">number</span>&#125;<br></code></pre></td></tr></table></figure></li>
</ol>
<h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><h4 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h4><figure class="highlight typescript"><table><tr><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">/* </span><br><span class="hljs-comment">    类装饰器</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">const</span> <span class="hljs-attr">moveDecorator</span>: <span class="hljs-title class_">ClassDecorator</span> = <span class="hljs-function">(<span class="hljs-params">target: <span class="hljs-built_in">Function</span></span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// console.log(target); //Tank的构造函数</span><br>    target.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">getPosition</span> = (): &#123; <span class="hljs-attr">x</span>: <span class="hljs-built_in">number</span>, <span class="hljs-attr">y</span>: <span class="hljs-built_in">number</span> &#125; =&gt; &#123;<br>        <span class="hljs-keyword">return</span> &#123; <span class="hljs-attr">x</span>: <span class="hljs-number">100</span>, <span class="hljs-attr">y</span>: <span class="hljs-number">200</span> &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">MusicDecorator</span>: <span class="hljs-title class_">ClassDecorator</span> = <span class="hljs-function">(<span class="hljs-params">target: <span class="hljs-built_in">Function</span></span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// console.log(target); //Tank的构造函数</span><br>    target.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">payMusic</span> = (): <span class="hljs-function"><span class="hljs-params">void</span> =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;爱情来得太快就像龙卷风&#x27;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">SayDecorator</span>: <span class="hljs-title class_">ClassDecorator</span> = <span class="hljs-function">(<span class="hljs-params">target: <span class="hljs-built_in">Function</span></span>) =&gt;</span> &#123;<br>    target.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">message</span> = (<span class="hljs-attr">msg</span>: <span class="hljs-built_in">string</span>): <span class="hljs-function"><span class="hljs-params">void</span> =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(msg);<br>    &#125;<br>&#125;<br><span class="hljs-comment">//把装饰器用到任何类上，该类都会具有该种功能</span><br><span class="hljs-meta">@moveDecorator</span> <span class="hljs-comment">//相当于moveDecorator(Tank)</span><br><span class="hljs-meta">@MusicDecorator</span><br><span class="hljs-meta">@SayDecorator</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Tank</span> &#123;<br>    [<span class="hljs-attr">x</span>: <span class="hljs-built_in">string</span>]: <span class="hljs-built_in">any</span><br>    <span class="hljs-title function_">say</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">message</span>(<span class="hljs-string">&#x27;hello this is tank&#x27;</span>)<br>    &#125;<br>&#125;<br><span class="hljs-keyword">const</span> t1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Tank</span>()<br><br><span class="hljs-comment">// console.log(t1.getPosition()); //这里可以使用类型断言，也可以在类中声明成员</span><br><span class="hljs-comment">// t1.payMusic()</span><br><span class="hljs-comment">// t1.say()</span><br><br><span class="hljs-meta">@SayDecorator</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Fighter</span> &#123;<br>    [<span class="hljs-attr">x</span>: <span class="hljs-built_in">string</span>]: <span class="hljs-built_in">any</span><br>    <span class="hljs-title function_">say</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">message</span>(<span class="hljs-string">&#x27;hi this is fighter&#x27;</span>)<br>    &#125;<br>&#125;<br><span class="hljs-comment">// new Fighter().say()</span><br><br><br><span class="hljs-comment">/* </span><br><span class="hljs-comment">    装饰器工厂</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">const</span> jumpDecoratorFactory = (<span class="hljs-attr">type</span>: <span class="hljs-built_in">string</span>): <span class="hljs-function"><span class="hljs-params">ClassDecorator</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">switch</span> (<span class="hljs-keyword">type</span>) &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;tigger&#x27;</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-function">(<span class="hljs-params">target: <span class="hljs-built_in">Function</span></span>) =&gt;</span> &#123;<br>                target.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">jump</span> = (<span class="hljs-attr">time</span>: <span class="hljs-built_in">number</span>): <span class="hljs-function"><span class="hljs-params">void</span> =&gt;</span> &#123;<br>                    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;跳&#x27;</span> + time + <span class="hljs-string">&#x27;次&#x27;</span>);<br>                &#125;<br>            &#125;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;lion&#x27;</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-function">(<span class="hljs-params">target: <span class="hljs-built_in">Function</span></span>) =&gt;</span> &#123;<br>                target.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">roar</span> = (<span class="hljs-attr">time</span>: <span class="hljs-built_in">number</span>): <span class="hljs-function"><span class="hljs-params">void</span> =&gt;</span> &#123;<br>                    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;吼&#x27;</span> + time + <span class="hljs-string">&#x27;次&#x27;</span>);<br>                &#125;<br>            &#125;<br>    &#125;<br><br>&#125;<br><span class="hljs-meta">@jumpDecoratorFactory</span>(<span class="hljs-string">&#x27;tigger&#x27;</span>)<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Tigger</span> &#123;<br>    [<span class="hljs-attr">k</span>: <span class="hljs-built_in">string</span>]: <span class="hljs-built_in">any</span><br>&#125;<br><span class="hljs-comment">// new Tigger().jump(10)</span><br><br><span class="hljs-meta">@jumpDecoratorFactory</span>(<span class="hljs-string">&#x27;lion&#x27;</span>)<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Lion</span> &#123;<br>    [<span class="hljs-attr">k</span>: <span class="hljs-built_in">string</span>]: <span class="hljs-built_in">any</span><br>&#125;<br><span class="hljs-comment">// new Lion().roar(100)</span><br><br><br><span class="hljs-comment">/* </span><br><span class="hljs-comment">    方法装饰器</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">enumerable</span>(<span class="hljs-params">target: <span class="hljs-built_in">any</span>, propertyKey: <span class="hljs-built_in">string</span>, descriptor: PropertyDescriptor</span>) &#123;<br>    <span class="hljs-comment">//target        普通方法是原型对象，静态方法是构造函数</span><br>    <span class="hljs-comment">//propertyKey   方法名</span><br>    <span class="hljs-comment">//descriptor    方法描述</span><br>    <span class="hljs-comment">// descriptor.value()</span><br>    <span class="hljs-comment">// descriptor.writable = false //方法是否可以重新声明</span><br><br>    descriptor.<span class="hljs-property">value</span> = <span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;this is enumerable&#x27;</span>);<br><br>    &#125;<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">hightlightDecorator</span>(<span class="hljs-params">target: <span class="hljs-built_in">any</span>, propertyKey: <span class="hljs-built_in">string</span>, descriptor: PropertyDescriptor</span>) &#123;<br>    <span class="hljs-keyword">const</span> keyword = descriptor.<span class="hljs-title function_">value</span>()<br>    descriptor.<span class="hljs-property">value</span> = <span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">`&lt;h2 style=&quot;color:red&quot;&gt;<span class="hljs-subst">$&#123;keyword&#125;</span>&lt;h2&gt;`</span><br>    &#125;<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">sleepDecoratorFactory</span>(<span class="hljs-params">delay: <span class="hljs-built_in">number</span></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> (<span class="hljs-params">target: <span class="hljs-built_in">any</span>, propertyKey: <span class="hljs-built_in">string</span>, descriptor: PropertyDescriptor</span>) &#123;<br>        descriptor.<span class="hljs-property">value</span> = <span class="hljs-function">() =&gt;</span> &#123;<br>            <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`延迟<span class="hljs-subst">$&#123;delay&#125;</span>ms执行`</span>);<br>            &#125;, delay)<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">const</span> <span class="hljs-title class_">ErrorDecorator</span>: <span class="hljs-function">(<span class="hljs-params">target: <span class="hljs-built_in">any</span>, propertyKey: <span class="hljs-built_in">string</span>, descriptor: PropertyDescriptor</span>) =&gt;</span> <span class="hljs-built_in">void</span> = <span class="hljs-function">(<span class="hljs-params">target, propertyKey, descriptor</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> method = descriptor.<span class="hljs-property">value</span><br>    descriptor.<span class="hljs-property">value</span> = <span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-title function_">method</span>()<br>        &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;%c出错了&#x27;</span>, <span class="hljs-string">&#x27;color:green;font-size:30px&#x27;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Greeter</span> &#123;<br>    <span class="hljs-comment">//普通方法</span><br>    <span class="hljs-meta">@enumerable</span><br>    <span class="hljs-title function_">greet</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;this is Greeter&#x27;</span>);<br>    &#125;<br>    <span class="hljs-meta">@enumerable</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-title function_">smile</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;this is smile&#x27;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@hightlightDecorator</span><br>    <span class="hljs-title function_">hightlight</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;高亮内容&#x27;</span><br>    &#125;<br>    <span class="hljs-meta">@sleepDecoratorFactory</span>(<span class="hljs-number">3000</span>)<br>    <span class="hljs-title function_">sleep</span>(<span class="hljs-params"></span>) &#123; &#125;<br>    <span class="hljs-meta">@ErrorDecorator</span><br>    <span class="hljs-title function_">error</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&quot;&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// new Greeter().greet()</span><br><span class="hljs-comment">// Greeter.smile()</span><br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.heightlight&#x27;</span>).<span class="hljs-property">innerHTML</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Greeter</span>().<span class="hljs-title function_">hightlight</span>()<br><span class="hljs-comment">// new Greeter().sleep()</span><br><span class="hljs-comment">// new Greeter().error()</span><br><br><br><span class="hljs-comment">/* </span><br><span class="hljs-comment">    属性装饰器</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">propDecorator</span>(<span class="hljs-params">target: <span class="hljs-built_in">Object</span>, propertyKey: <span class="hljs-built_in">string</span> | <span class="hljs-built_in">symbol</span></span>) &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-attr">value</span>: <span class="hljs-built_in">string</span><br>    <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(target, propertyKey, &#123;<br>        <span class="hljs-title function_">get</span>(<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-keyword">return</span> value.<span class="hljs-title function_">toLowerCase</span>()<br>        &#125;,<br>        <span class="hljs-title function_">set</span>(<span class="hljs-params">v</span>) &#123;<br>            value = v<br>        &#125;<br>    &#125;)<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">colorDecorator</span>(<span class="hljs-params">target: <span class="hljs-built_in">Object</span>, propertyKey: <span class="hljs-built_in">string</span> | <span class="hljs-built_in">symbol</span></span>) &#123;<br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">color16</span>(<span class="hljs-params"></span>) &#123;<span class="hljs-comment">//十六进制颜色随机</span><br>        <span class="hljs-keyword">var</span> r = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * <span class="hljs-number">256</span>);<br>        <span class="hljs-keyword">var</span> g = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * <span class="hljs-number">256</span>);<br>        <span class="hljs-keyword">var</span> b = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * <span class="hljs-number">256</span>);<br>        <span class="hljs-keyword">var</span> color = <span class="hljs-string">&#x27;#&#x27;</span> + r.<span class="hljs-title function_">toString</span>(<span class="hljs-number">16</span>) + g.<span class="hljs-title function_">toString</span>(<span class="hljs-number">16</span>) + b.<span class="hljs-title function_">toString</span>(<span class="hljs-number">16</span>);<br>        <span class="hljs-keyword">return</span> color;<br>    &#125;<br>    <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(target, propertyKey, &#123;<br>        <span class="hljs-title function_">get</span>(<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-title function_">color16</span>()<br>        &#125;<br>    &#125;)<br><br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-meta">@propDecorator</span><br>    names?: <span class="hljs-built_in">string</span><br><br>    <span class="hljs-meta">@colorDecorator</span><br>    color?: <span class="hljs-built_in">string</span><br><br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">names?: <span class="hljs-built_in">string</span>, color?: <span class="hljs-built_in">string</span></span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">names</span> = names<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">color</span> = color<br>    &#125;<br><br>    <span class="hljs-title function_">draw</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.radomcolor&#x27;</span>).<span class="hljs-property">innerHTML</span> = <span class="hljs-string">`&lt;h3 style=&quot;color:<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.color&#125;</span>&quot;&gt;radomcolor&lt;h3&gt;`</span><br>    &#125;<br>&#125;<br><span class="hljs-keyword">const</span> p1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&#x27;HhHA&#x27;</span>)<br><span class="hljs-comment">// console.log(p1.names);</span><br><span class="hljs-keyword">let</span> timer = <span class="hljs-literal">null</span><br><span class="hljs-built_in">clearInterval</span>(timer)<br>timer = <span class="hljs-built_in">setInterval</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    p1.<span class="hljs-title function_">draw</span>()<br>&#125;, <span class="hljs-number">5000</span>)<br><br><br><span class="hljs-comment">/* </span><br><span class="hljs-comment">    参数装饰器</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">paramDecorator</span>(<span class="hljs-params">target: <span class="hljs-built_in">Object</span>, propertyKey: <span class="hljs-built_in">string</span> | <span class="hljs-built_in">symbol</span>, parameterIndex: <span class="hljs-built_in">number</span></span>) &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-attr">requiredParams</span>: <span class="hljs-built_in">number</span>[] = []<br>    requiredParams.<span class="hljs-title function_">push</span>(parameterIndex)<br>    <span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">defineMetadata</span>(<span class="hljs-string">&#x27;required&#x27;</span>, requiredParams, target, propertyKey)<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">validateDecorator</span>(<span class="hljs-params">target: <span class="hljs-built_in">Object</span>, propertyKey: <span class="hljs-built_in">string</span>, descriptor: PropertyDescriptor</span>) &#123;<br>    <span class="hljs-keyword">const</span> method = descriptor.<span class="hljs-property">value</span><br>    descriptor.<span class="hljs-property">value</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">let</span> <span class="hljs-attr">requiredParams</span>: <span class="hljs-built_in">number</span>[] = <span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">getMetadata</span>(<span class="hljs-string">&#x27;required&#x27;</span>, target, propertyKey) || []<br>        <span class="hljs-keyword">let</span> arg = <span class="hljs-variable language_">arguments</span><br>        requiredParams.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">index</span> =&gt;</span> &#123;<br>            <span class="hljs-keyword">if</span> (index &gt; arg.<span class="hljs-property">length</span> || arg[index] === <span class="hljs-literal">undefined</span>) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&quot;请传递必要参数&quot;</span>);<br>            &#125;<br>            <span class="hljs-keyword">return</span> method.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>, arg)<br>        &#125;)<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span> &#123;<br>    <span class="hljs-meta">@validateDecorator</span><br>    <span class="hljs-title function_">show</span>(<span class="hljs-params"><span class="hljs-meta">@paramDecorator</span> id: <span class="hljs-built_in">number</span>, <span class="hljs-meta">@paramDecorator</span> content: <span class="hljs-built_in">string</span></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;请求参数完整&#x27;</span>, id, content);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Animal</span>().<span class="hljs-title function_">show</span>(<span class="hljs-number">10010</span>, <span class="hljs-string">&#x27;hello&#x27;</span>)<br></code></pre></td></tr></table></figure>

<h4 id="存取器"><a href="#存取器" class="headerlink" title="存取器"></a>存取器</h4><figure class="highlight typescript"><table><tr><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">enum</span> <span class="hljs-title class_">Gender</span> &#123; male = <span class="hljs-string">&quot;MALE&quot;</span>, female = <span class="hljs-string">&quot;FEMALE&quot;</span>, <span class="hljs-built_in">unknown</span> = <span class="hljs-string">&quot;UNKNOWN&quot;</span> &#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-attr">_gender</span>: <span class="hljs-title class_">Gender</span> = <span class="hljs-title class_">Gender</span>.<span class="hljs-property">male</span> <span class="hljs-comment">//私有属性名字需要下划线</span><br><br>    <span class="hljs-comment">//内置</span><br>    <span class="hljs-keyword">get</span> <span class="hljs-title function_">gender</span>() &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">_gender</span>;<br>    &#125;<br>    <span class="hljs-keyword">set</span> <span class="hljs-title function_">gender</span>(<span class="hljs-params">gender: Gender</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">_gender</span> = gender<br>    &#125;<br><br>    <span class="hljs-comment">//自定义</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">getGender</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">_gender</span><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">setGender</span>(<span class="hljs-params">gender: Gender</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">_gender</span> = gender<br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">walk</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">left</span>()<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">forward</span>()<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">right</span>()<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">left</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;迈左腿&#x27;</span>);<br>    &#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">right</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;迈右腿&#x27;</span>);<br>    &#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;前进一步&#x27;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> p1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>()<br><span class="hljs-comment">// p1.walk()</span><br><span class="hljs-comment">// p1._gender() //报错</span><br><span class="hljs-comment">// console.log(p1);</span><br><br><span class="hljs-comment">//内置使用</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(p1.<span class="hljs-property">gender</span>);<br>p1.<span class="hljs-property">gender</span> = <span class="hljs-title class_">Gender</span>.<span class="hljs-property">unknown</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(p1.<span class="hljs-property">gender</span>);<br><br><span class="hljs-comment">//自定义使用</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(p1.<span class="hljs-title function_">getGender</span>());<br>p1.<span class="hljs-title function_">setGender</span>(<span class="hljs-title class_">Gender</span>.<span class="hljs-property">female</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(p1.<span class="hljs-title function_">getGender</span>());<br></code></pre></td></tr></table></figure>

<h4 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h4><figure class="highlight typescript"><table><tr><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">/* </span><br><span class="hljs-comment">    抽象类是一种特殊的类，接口是一种特殊的抽象类</span><br><span class="hljs-comment">    如果一个类中有一个方法是抽象方法，那么这个类也是抽象类，需要abstract声明</span><br><span class="hljs-comment">    抽象方法没有方法体</span><br><span class="hljs-comment">    抽象类不能被实例化，自己不实现交给子类实现</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span> = <span class="hljs-string">&#x27;akman&#x27;</span><br>    <span class="hljs-keyword">abstract</span> <span class="hljs-attr">age</span>: <span class="hljs-built_in">number</span><br><br>    <span class="hljs-title function_">run</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;$$$$$&#x27;</span><br>    &#125;<br><br>    <span class="hljs-keyword">abstract</span> <span class="hljs-title function_">say</span>(): <span class="hljs-built_in">string</span>;<br>&#125;<br><span class="hljs-comment">// const p1 = new Person() //报错</span><br><br><span class="hljs-comment">//抽象类必须有子类，并且子类需要将抽象类上的抽象成员重写</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Woman</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Person</span> &#123;<br>    <span class="hljs-attr">age</span>: <span class="hljs-built_in">number</span> = <span class="hljs-number">18</span><br>    <span class="hljs-title function_">say</span>(): <span class="hljs-built_in">string</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;%%%%&#x27;</span><br>    &#125;<br>&#125;<br><span class="hljs-keyword">const</span> w1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Woman</span>()<br><span class="hljs-comment">// console.log(w1);</span><br><br><br><span class="hljs-comment">/* </span><br><span class="hljs-comment">    接口的所有成员都是抽象成员，自带abstract声明，并且都是public</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">IPerson</span> &#123;<br>    <span class="hljs-attr">paly</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-built_in">void</span><br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Man</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Person</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IPerson</span> &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>    <span class="hljs-comment">//Person成员</span><br>    <span class="hljs-attr">age</span>: <span class="hljs-built_in">number</span>     <span class="hljs-comment">//Person成员</span><br>    <span class="hljs-attr">run</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-built_in">string</span> = <span class="hljs-function">() =&gt;</span> &#123; <span class="hljs-comment">//Person成员</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span><br>    &#125;<br>    <span class="hljs-title function_">say</span>(): <span class="hljs-built_in">string</span> &#123; <span class="hljs-comment">//Person成员</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span><br>    &#125;<br>    <span class="hljs-attr">paly</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-built_in">void</span>    <span class="hljs-comment">//IPerson成员</span><br>    <span class="hljs-attr">jump</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-built_in">void</span>    <span class="hljs-comment">//自定义成员</span><br>&#125;<br></code></pre></td></tr></table></figure>

<h4 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h4><figure class="highlight typescript"><table><tr><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">/*</span><br><span class="hljs-comment">    多态：由继承产生了相关不同的类，对同一个方法可以有不同的响应 </span><br><span class="hljs-comment">    多态并不是新语法，而是新概念</span><br><span class="hljs-comment">    将子类对象(new KeyBoard())赋值给父类(USB)的引用,然后调用父类中的成员</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">interface</span> USB &#123;<br>    <span class="hljs-title function_">start</span>(): <span class="hljs-built_in">void</span><br>    <span class="hljs-title function_">run</span>(): <span class="hljs-built_in">void</span><br>    <span class="hljs-title function_">end</span>(): <span class="hljs-built_in">void</span><br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">KeyBoard</span> <span class="hljs-keyword">implements</span> <span class="hljs-variable constant_">USB</span> &#123;<br>    <span class="hljs-title function_">start</span>(): <span class="hljs-built_in">void</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;KeyBoard-start&#x27;</span>);<br>    &#125;<br>    <span class="hljs-title function_">run</span>(): <span class="hljs-built_in">void</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;KeyBoard-run&#x27;</span>);<br>    &#125;<br>    <span class="hljs-title function_">end</span>(): <span class="hljs-built_in">void</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;KeyBoard-end&#x27;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Microphone</span> <span class="hljs-keyword">implements</span> <span class="hljs-variable constant_">USB</span> &#123;<br>    <span class="hljs-title function_">start</span>(): <span class="hljs-built_in">void</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Microphone-start&#x27;</span>);<br>    &#125;<br>    <span class="hljs-title function_">run</span>(): <span class="hljs-built_in">void</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Microphone-run&#x27;</span>);<br>    &#125;<br>    <span class="hljs-title function_">end</span>(): <span class="hljs-built_in">void</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Microphone-end&#x27;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">insert</span>(<span class="hljs-params">usb: USB</span>) &#123;<br>    usb.<span class="hljs-title function_">start</span>()<br>    usb.<span class="hljs-title function_">run</span>()<br>    usb.<span class="hljs-title function_">end</span>()<br>&#125;<br><br><span class="hljs-title function_">insert</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">KeyBoard</span>())<br><span class="hljs-title function_">insert</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Microphone</span>())<br></code></pre></td></tr></table></figure>

<h4 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h4><figure class="highlight typescript"><table><tr><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">namespace</span> first &#123; <span class="hljs-comment">//命名空间也可导出在其他文件中使用，导入方式为es6</span><br>    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;h2&#x27;</span>).<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&#x27;命名空间&#x27;</span><br>    <span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">getPosition</span>(<span class="hljs-params">x: <span class="hljs-built_in">number</span>, y: <span class="hljs-built_in">number</span></span>) &#123;<br>        <span class="hljs-keyword">return</span> &#123; x, y &#125;<br>    &#125;<br>    <span class="hljs-comment">// console.log(getPosition(1, 2));</span><br><br>    <span class="hljs-keyword">export</span> <span class="hljs-keyword">namespace</span> firstOne &#123;<br>        <span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> data = <span class="hljs-string">&#x27;hello&#x27;</span><br>    &#125;<br>    <span class="hljs-comment">// console.log(firstOne.data);</span><br>&#125;<br><br><span class="hljs-keyword">namespace</span> second &#123;<br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">getPosition</span>(<span class="hljs-params">x: <span class="hljs-built_in">string</span>, y: <span class="hljs-built_in">string</span></span>) &#123;<br>        <span class="hljs-keyword">return</span> &#123; x, y &#125;<br>    &#125;<br>    <span class="hljs-comment">// console.log(getPosition(&#x27;10px&#x27;, &#x27;20px&#x27;));</span><br>&#125;<br><br><span class="hljs-comment">// console.log(first.getPosition(10, 100));</span><br><span class="hljs-comment">// console.log(second.getPosition(10, 100)); //没有导出报错</span><br><span class="hljs-comment">// console.log(first.firstOne.data);</span><br></code></pre></td></tr></table></figure>

<hr>
<p>中文文档：<a href="https://www.tslang.cn/docs/home.html">typescript中文文档</a><br>参考视频：<a href="https://www.bilibili.com/video/BV14Z4y1u7pi?spm_id_from=333.999.0.0">BV14Z4y1u7pi</a>  <a href="https://www.bilibili.com/video/BV1c34y1v7gi/?spm_id_from=333.788">BV1c34y1v7gi</a>  <a href="https://www.bilibili.com/video/BV1WR4y1J7Lc?spm_id_from=333.999.0.0">BV1WR4y1J7Lc</a></p>
]]></content>
      <categories>
        <category>前端学习</category>
      </categories>
      <tags>
        <tag>typescript</tag>
      </tags>
  </entry>
  <entry>
    <title>js数据结构与算法</title>
    <url>/2022/07/15/a011-js%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h3 id="数据结构与算法-Data-structure-and-algorithm"><a href="#数据结构与算法-Data-structure-and-algorithm" class="headerlink" title="数据结构与算法(Data structure and algorithm)"></a>数据结构与算法(Data structure and algorithm)</h3><h3 id="什么是数据结构"><a href="#什么是数据结构" class="headerlink" title="什么是数据结构"></a>什么是数据结构</h3><p>计算机中存储和组织数据的方式</p>
<p>就好比庞大的图书馆，不仅要合理的把书放进去，还要能高效的取出来</p>
<p>不能说那个数据结构比另一个数据结构好，因为每种数据结构都有自己特定的应用场景</p>
<h3 id="什么是算法"><a href="#什么是算法" class="headerlink" title="什么是算法"></a>什么是算法</h3><p>解决问题的办法&#x2F;步骤逻辑</p>
<p>数据结构的实现，离不开算法</p>
<h3 id="栈-Stack"><a href="#栈-Stack" class="headerlink" title="栈(Stack)"></a>栈(Stack)</h3><p>数组是不受限的线性结构，可以在任意位置插入和删除数据</p>
<p>为了实现某些功能，必须对任意性加以限制；栈和队列就是常见的受限的线性结构</p>
<p>限制是仅允许在表的一端进行插入和删除运算，这一端成为栈顶，另一端为栈底</p>
<p>LIFO(last in first out)后进先出</p>
<p>向栈插入新元素称为进栈、入栈或压栈，它是把新元素放到栈顶元素的上面，使之成为新的栈顶元素</p>
<p>从栈中删除元素称为出栈或退栈，是把栈顶元素删除，使其相邻的元素成为新的栈顶元素</p>
<p>生活中的栈，如：自助餐的托盘</p>
<p>程序中的栈，如：函数相互调用(函数调用栈)，A调用B, B中又调用C，C中又调用D，当前栈的顺序，栈底A-&gt;B-&gt;C-&gt;D栈顶，D执行完一次弹出栈</p>
<p><img src="/img/sample/a011/1.%E6%A0%88%E7%9A%84%E9%9D%A2%E8%AF%95%E9%A2%98.png" alt="栈的面试题"></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/* </span><br><span class="hljs-comment">      两种实现栈的方式：基于数组实现；基于链表实现</span><br><span class="hljs-comment">  */</span><br><br><span class="hljs-comment">//基于数组实现栈</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Stack</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">items</span> = []<br>    &#125;<br>    <span class="hljs-title function_">push</span>(<span class="hljs-params">element</span>) &#123; <span class="hljs-comment">//添加一个新元素到栈顶</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">items</span>.<span class="hljs-title function_">push</span>(element)<br>    &#125;<br>    <span class="hljs-title function_">pop</span>(<span class="hljs-params"></span>) &#123; <span class="hljs-comment">//移除栈顶元素，同时返回被移除的元素</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">items</span>.<span class="hljs-title function_">pop</span>()<br>    &#125;<br>    <span class="hljs-title function_">peek</span>(<span class="hljs-params"></span>) &#123; <span class="hljs-comment">//返回栈顶元素</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">items</span>[<span class="hljs-variable language_">this</span>.<span class="hljs-property">items</span>.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>]<br>    &#125;<br>    <span class="hljs-title function_">isEmpty</span>(<span class="hljs-params"></span>) &#123; <span class="hljs-comment">//判断栈是否为空</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">items</span>.<span class="hljs-property">length</span> === <span class="hljs-number">0</span><br>    &#125;<br>    <span class="hljs-title function_">size</span>(<span class="hljs-params"></span>) &#123; <span class="hljs-comment">//返回栈中元素个数</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">items</span>.<span class="hljs-property">length</span><br>    &#125;<br>    <span class="hljs-title function_">toString</span>(<span class="hljs-params"></span>) &#123; <span class="hljs-comment">//将栈结构的内容以字符形式返回</span><br>        <span class="hljs-keyword">let</span> str = <span class="hljs-string">&#x27;&#x27;</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">items</span>.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> &#123;<br>            str += item + <span class="hljs-string">&#x27; &#x27;</span><br>        &#125;)<br>        <span class="hljs-keyword">return</span> str<br>    &#125;<br>&#125;<br><span class="hljs-keyword">let</span> s1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Stack</span>()<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(s1);<br>s1.<span class="hljs-title function_">push</span>(<span class="hljs-number">20</span>)<br>s1.<span class="hljs-title function_">push</span>(<span class="hljs-number">10</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(s1.<span class="hljs-title function_">size</span>());<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(s1.<span class="hljs-title function_">toString</span>());<br><br><span class="hljs-comment">//十进制转二进制</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">dec2bin</span>(<span class="hljs-params">decNum</span>) &#123;<br>    <span class="hljs-keyword">let</span> stack = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Stack</span>()<br>    <span class="hljs-keyword">while</span> (decNum &gt; <span class="hljs-number">0</span>) &#123;<br>        stack.<span class="hljs-title function_">push</span>(decNum % <span class="hljs-number">2</span>)<br>        decNum = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(decNum / <span class="hljs-number">2</span>)<br>    &#125;<br><br>    <span class="hljs-keyword">let</span> binNum = <span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-keyword">while</span> (!stack.<span class="hljs-title function_">isEmpty</span>()) &#123;<br>        binNum += stack.<span class="hljs-title function_">pop</span>()<br>    &#125;<br>    <span class="hljs-keyword">return</span> binNum<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">dec2bin</span>(<span class="hljs-number">100</span>));<br></code></pre></td></tr></table></figure>

<h3 id="队列-Queue"><a href="#队列-Queue" class="headerlink" title="队列(Queue)"></a>队列(Queue)</h3><p>FIFO(first in first out)先进先出</p>
<p>限制是只允许在表的前端进行删除操作，在表的后端进行插入操作</p>
<p>优先级队列：插入元素时会将该数据的优先级和其他数据的优先级进行比较，得出该元素在队列中的正确位置</p>
<p>生活中的优先级队列：头等舱、商务舱、经济舱；急诊科和普通诊室</p>
<p>程序中的优先级队列：线程中处理任务的优先级</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/* </span><br><span class="hljs-comment">    两种实现队列的方式：基于数组实现；基于链表实现 </span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">//基于数组实现队列</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Queue</span> &#123;<br>    items = []<br>    <span class="hljs-title function_">enqueue</span>(<span class="hljs-params">element</span>) &#123; <span class="hljs-comment">//向队尾添加一个或多个元素</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">items</span>.<span class="hljs-title function_">push</span>(element)<br>    &#125;<br>    <span class="hljs-title function_">dequeue</span>(<span class="hljs-params"></span>) &#123; <span class="hljs-comment">//移除队列第一项，并返回被移除的元素</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">items</span>.<span class="hljs-title function_">shift</span>()<br>    &#125;<br>    <span class="hljs-title function_">front</span>(<span class="hljs-params"></span>) &#123; <span class="hljs-comment">//返回队列第一个元素</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">items</span>[<span class="hljs-number">0</span>]<br>    &#125;<br>    <span class="hljs-title function_">isEmpty</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">items</span>.<span class="hljs-property">length</span> === <span class="hljs-number">0</span><br>    &#125;<br>    <span class="hljs-title function_">size</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">items</span>.<span class="hljs-property">length</span><br>    &#125;<br>    <span class="hljs-title function_">toString</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">let</span> str = <span class="hljs-string">&#x27;&#x27;</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">items</span>.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> &#123;<br>            str += item + <span class="hljs-string">&#x27;&#x27;</span><br>        &#125;)<br>        <span class="hljs-keyword">return</span> str<br>    &#125;<br>&#125;<br><span class="hljs-keyword">let</span> q1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Queue</span>()<br><br><span class="hljs-comment">//击鼓传花</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">passGame</span>(<span class="hljs-params">nameList, num</span>) &#123;<br>    <span class="hljs-keyword">let</span> queue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Queue</span>()<br>    nameList.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> &#123;<br>        queue.<span class="hljs-title function_">enqueue</span>(item)<br>    &#125;)<br>    <span class="hljs-keyword">while</span> (queue.<span class="hljs-title function_">size</span>() &gt; <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; num - <span class="hljs-number">1</span>; i++) &#123;<br>            queue.<span class="hljs-title function_">enqueue</span>(queue.<span class="hljs-title function_">dequeue</span>())<br>        &#125;<br>        queue.<span class="hljs-title function_">dequeue</span>()<br>    &#125;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(nameList.<span class="hljs-title function_">indexOf</span>(queue.<span class="hljs-title function_">front</span>()));<br>    <span class="hljs-keyword">return</span> queue.<span class="hljs-title function_">front</span>()<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">passGame</span>([<span class="hljs-string">&#x27;lt&#x27;</span>, <span class="hljs-string">&#x27;tb&#x27;</span>, <span class="hljs-string">&#x27;cm&#x27;</span>, <span class="hljs-string">&#x27;xml&#x27;</span>], <span class="hljs-number">3</span>));<br><br><span class="hljs-comment">//优先级队列</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">QueueElement</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">element, priority</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">element</span> = element<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">priority</span> = priority<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">PriorityQueue</span> &#123;<br>    items = []<br>    <span class="hljs-title function_">enqueue</span>(<span class="hljs-params">element, priority</span>) &#123;<br>        <span class="hljs-keyword">let</span> queueElement = <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueueElement</span>(element, priority)<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">items</span>.<span class="hljs-property">length</span> === <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">items</span>.<span class="hljs-title function_">push</span>(queueElement)<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">let</span> flag = <span class="hljs-literal">false</span><br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">items</span>.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">item, index</span>) =&gt;</span> &#123;<br>                <span class="hljs-keyword">if</span> (queueElement.<span class="hljs-property">priority</span> &lt; item.<span class="hljs-property">priority</span>) &#123;<br>                    <span class="hljs-variable language_">this</span>.<span class="hljs-property">items</span>.<span class="hljs-title function_">splice</span>(index, <span class="hljs-number">0</span>, queueElement)<br>                    flag = <span class="hljs-literal">true</span><br>                    <span class="hljs-keyword">return</span><br>                &#125;<br>            &#125;)<br><br>            <span class="hljs-keyword">if</span> (!flag) &#123;<br>                <span class="hljs-variable language_">this</span>.<span class="hljs-property">items</span>.<span class="hljs-title function_">push</span>(queueElement)<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-title function_">dequeue</span>(<span class="hljs-params"></span>) &#123; <span class="hljs-comment">//移除队列第一项，并返回被移除的元素</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">items</span>.<span class="hljs-title function_">shift</span>()<br>    &#125;<br>    <span class="hljs-title function_">front</span>(<span class="hljs-params"></span>) &#123; <span class="hljs-comment">//返回队列第一个元素</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">items</span>[<span class="hljs-number">0</span>]<br>    &#125;<br>    <span class="hljs-title function_">isEmpty</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">items</span>.<span class="hljs-property">length</span> === <span class="hljs-number">0</span><br>    &#125;<br>    <span class="hljs-title function_">size</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">items</span>.<span class="hljs-property">length</span><br>    &#125;<br>    <span class="hljs-title function_">toString</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">let</span> str = <span class="hljs-string">&#x27;&#x27;</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">items</span>.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> &#123;<br>            str += item.<span class="hljs-property">priority</span> + <span class="hljs-string">&#x27;---&#x27;</span> + item.<span class="hljs-property">element</span> + <span class="hljs-string">&#x27;\n&#x27;</span><br>        &#125;)<br>        <span class="hljs-keyword">return</span> str<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">let</span> pq = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>()<br>pq.<span class="hljs-title function_">enqueue</span>(<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-number">10</span>)<br>pq.<span class="hljs-title function_">enqueue</span>(<span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-number">1</span>)<br>pq.<span class="hljs-title function_">enqueue</span>(<span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-number">100</span>)<br><span class="hljs-comment">// pq.enqueue(&#x27;d&#x27;, 2)</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(pq.<span class="hljs-title function_">toString</span>());<br></code></pre></td></tr></table></figure>

<h3 id="链表-linked-list"><a href="#链表-linked-list" class="headerlink" title="链表(linked list)"></a>链表(linked list)</h3><p>数组创建需要申请一段连续的大小固定的内存空间，当不满足容量需求时，需要扩容。一般时申请一个更大的数组，将原数组复制过去。数组在开头或中间位置插入数据成本很高，需要进行大量的元素位移</p>
<p>链表不必是连续空间，可以充分利用计算机内存，实现内存动态管理</p>
<p>链表的每一个元素由一个存储元素本身的节点和指向下一个元素的引用(有些语言成为指针或连接)组成</p>
<p>不需要再创建时确定大小，并且大小可以无限的延伸</p>
<p>链表在插入和删除数据时，时间复~杂度可以达到O(1)，相对数组效率高很多</p>
<p>链表访问任何一个位置的元素时，都要从头开始访问，无法通过下标直接访问(无法跳过第一个元素访问任何一个元素)</p>
<p><img src="/img/sample/a011/2.%E9%93%BE%E8%A1%A8%E7%9A%84%E7%BB%93%E6%9E%84.png" alt="链表的结构"></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">data</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">data</span> = data<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">next</span> = <span class="hljs-literal">null</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">LinkedList</span> &#123;<br>    head = <span class="hljs-literal">null</span><br>    length = <span class="hljs-number">0</span><br><br>    <span class="hljs-title function_">append</span>(<span class="hljs-params">data</span>) &#123;<br>        <span class="hljs-keyword">let</span> newNode = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(data)<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">length</span> === <span class="hljs-number">0</span>) &#123; <span class="hljs-comment">//是第一个节点</span><br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">head</span> = newNode<br>        &#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">//不是第一个节点</span><br>            <span class="hljs-keyword">let</span> current = <span class="hljs-variable language_">this</span>.<span class="hljs-property">head</span><br>            <span class="hljs-keyword">while</span> (current.<span class="hljs-property">next</span>) &#123; <span class="hljs-comment">//从头找到最后一个节点</span><br>                current = current.<span class="hljs-property">next</span><br>            &#125;<br>            current.<span class="hljs-property">next</span> = newNode<br>        &#125;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">length</span> += <span class="hljs-number">1</span><br>    &#125;<br><br>    <span class="hljs-title function_">toString</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">let</span> current = <span class="hljs-variable language_">this</span>.<span class="hljs-property">head</span> <span class="hljs-comment">//获取第一个节点</span><br>        <span class="hljs-keyword">let</span> listString = <span class="hljs-string">&#x27;&#x27;</span><br>        <span class="hljs-keyword">while</span> (current) &#123;<br>            listString += current.<span class="hljs-property">data</span> + <span class="hljs-string">&#x27;--&#x27;</span><br>            current = current.<span class="hljs-property">next</span><br>        &#125;<br>        <span class="hljs-keyword">return</span> listString<br>    &#125;<br><br>    <span class="hljs-title function_">insert</span>(<span class="hljs-params">position, data</span>) &#123;<br>        <span class="hljs-keyword">if</span> (position &lt; <span class="hljs-number">0</span> || position &gt; <span class="hljs-variable language_">this</span>.<span class="hljs-property">length</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>        <span class="hljs-keyword">let</span> newNode = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(data)<br>        <span class="hljs-keyword">if</span> (position === <span class="hljs-number">0</span>) &#123;<br>            newNode.<span class="hljs-property">next</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">head</span><br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">head</span> = newNode<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">let</span> index = <span class="hljs-number">0</span><br>            <span class="hljs-keyword">let</span> current = <span class="hljs-variable language_">this</span>.<span class="hljs-property">head</span><br>            <span class="hljs-keyword">let</span> previous = <span class="hljs-literal">null</span>;<br>            <span class="hljs-keyword">while</span> (index++ &lt; position) &#123; <span class="hljs-comment">//找到之前同位置的元素,index++先判断后自加</span><br>                previous = current<br>                current = current.<span class="hljs-property">next</span><br>            &#125;<br>            newNode.<span class="hljs-property">next</span> = current<br>            previous.<span class="hljs-property">next</span> = newNode<br>        &#125;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">length</span> += <span class="hljs-number">1</span><br>    &#125;<br><br>    <span class="hljs-title function_">get</span>(<span class="hljs-params">position</span>) &#123; <span class="hljs-comment">//获取对应位置的data</span><br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">length</span>);<br>        <span class="hljs-keyword">if</span> (position &lt; <span class="hljs-number">0</span> || position &gt;= <span class="hljs-variable language_">this</span>.<span class="hljs-property">length</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span><br>        <span class="hljs-keyword">let</span> current = <span class="hljs-variable language_">this</span>.<span class="hljs-property">head</span><br>        <span class="hljs-keyword">let</span> index = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">while</span> (index++ &lt; position) &#123;<br>            current = current.<span class="hljs-property">next</span><br>        &#125;<br>        <span class="hljs-keyword">return</span> current.<span class="hljs-property">data</span><br>    &#125;<br><br>    <span class="hljs-title function_">indexOf</span>(<span class="hljs-params">data</span>) &#123; <span class="hljs-comment">//返回数据在链表中的索引</span><br>        <span class="hljs-keyword">let</span> current = <span class="hljs-variable language_">this</span>.<span class="hljs-property">head</span><br>        <span class="hljs-keyword">let</span> index = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">while</span> (current) &#123;<br>            <span class="hljs-keyword">if</span> (current.<span class="hljs-property">data</span> === data) &#123;<br>                <span class="hljs-keyword">return</span> index<br>            &#125;<br>            current = current.<span class="hljs-property">next</span><br>            index++<br>        &#125;<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span><br>    &#125;<br><br>    <span class="hljs-title function_">update</span>(<span class="hljs-params">position, newData</span>) &#123; <span class="hljs-comment">//修改某个位置的数据</span><br>        <span class="hljs-keyword">if</span> (position &lt; <span class="hljs-number">0</span> || position &gt;= <span class="hljs-variable language_">this</span>.<span class="hljs-property">length</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>        <span class="hljs-keyword">let</span> current = <span class="hljs-variable language_">this</span>.<span class="hljs-property">head</span><br>        <span class="hljs-keyword">let</span> index = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">while</span> (index++ &lt; position) &#123;<br>            current = current.<span class="hljs-property">next</span><br>        &#125;<br>        current.<span class="hljs-property">data</span> = newData<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>    &#125;<br><br>    <span class="hljs-title function_">removeAt</span>(<span class="hljs-params">position</span>) &#123; <span class="hljs-comment">//删除指定位置的节点</span><br>        <span class="hljs-keyword">if</span> (position &lt; <span class="hljs-number">0</span> || position &gt;= <span class="hljs-variable language_">this</span>.<span class="hljs-property">length</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>        <span class="hljs-keyword">let</span> current = <span class="hljs-variable language_">this</span>.<span class="hljs-property">head</span><br>        <span class="hljs-keyword">if</span> (position === <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">head</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">head</span>.<span class="hljs-property">next</span><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">let</span> index = <span class="hljs-number">0</span><br>            <span class="hljs-keyword">let</span> previous = <span class="hljs-literal">null</span><br>            <span class="hljs-keyword">while</span> (index++ &lt; position) &#123;<br>                previous = current<br>                current = current.<span class="hljs-property">next</span><br>            &#125;<br>            previous.<span class="hljs-property">next</span> = current.<span class="hljs-property">next</span><br>        &#125;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">length</span> -= <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> current.<span class="hljs-property">data</span><br>    &#125;<br><br>    <span class="hljs-title function_">remove</span>(<span class="hljs-params">data</span>) &#123; <span class="hljs-comment">//删除指定data的节点</span><br>        <span class="hljs-keyword">let</span> position = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">indexOf</span>(data)<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">removeAt</span>(position)<br>    &#125;<br><br>    <span class="hljs-title function_">isEmpty</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">length</span> === <span class="hljs-number">0</span><br>    &#125;<br><br>    <span class="hljs-title function_">size</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">length</span><br>    &#125;<br>&#125;<br><br>list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>()<br>list.<span class="hljs-title function_">append</span>(<span class="hljs-string">&#x27;hello&#x27;</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(list.<span class="hljs-title function_">toString</span>());<br><br>list.<span class="hljs-title function_">insert</span>(<span class="hljs-number">0</span>, <span class="hljs-string">&#x27;hi&#x27;</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(list.<span class="hljs-title function_">toString</span>());<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(list.<span class="hljs-title function_">get</span>(<span class="hljs-number">1</span>));<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(list.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&#x27;hello&#x27;</span>));<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(list.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&#x27;he&#x27;</span>));<br><br>list.<span class="hljs-title function_">update</span>(<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;helloo&#x27;</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(list.<span class="hljs-title function_">toString</span>());<br><br>list.<span class="hljs-title function_">append</span>(<span class="hljs-string">&#x27;bili&#x27;</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(list.<span class="hljs-title function_">toString</span>());<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(list.<span class="hljs-title function_">removeAt</span>(<span class="hljs-number">1</span>));<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(list.<span class="hljs-title function_">toString</span>());<br><br>list.<span class="hljs-title function_">remove</span>(<span class="hljs-string">&#x27;bili&#x27;</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(list.<span class="hljs-title function_">toString</span>());<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(list.<span class="hljs-title function_">isEmpty</span>());<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(list.<span class="hljs-title function_">size</span>());<br></code></pre></td></tr></table></figure>

<h3 id="双向链表-double-linked-list"><a href="#双向链表-double-linked-list" class="headerlink" title="双向链表(double linked list)"></a>双向链表(double linked list)</h3><p>单项链表的缺点：可以很轻松的到达下一个节点，但是回到前一个节点很难</p>
<p>双向链表，一个节点既有向前连接的引用，又有一个向后连接的引用</p>
<p>双向链表的缺点：</p>
<ul>
<li>每次在插入或删除某个节点时，需要处理四个引用</li>
<li>所占内存空间更大</li>
</ul>
<p>结构：</p>
<ul>
<li>可以使用head和tail分别指向头部和尾部的节点</li>
<li>每个节点由三部分组成：前一个节点的指针prev，保存的元素item，后一个节点的指针next</li>
<li>第一个节点的prev是null，最后一个节点的next是null</li>
</ul>
<p><img src="/img/sample/a011/3.%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8%E7%9A%84%E7%BB%93%E6%9E%84.png" alt="双向链表的结构"></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span> &#123;<br>    prev = <span class="hljs-literal">null</span><br>    next = <span class="hljs-literal">null</span><br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">data</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">data</span> = data<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DoubleLinkedList</span> &#123;<br>    head = <span class="hljs-literal">null</span>;<br>    tail = <span class="hljs-literal">null</span>;<br>    length = <span class="hljs-number">0</span><br><br>    <span class="hljs-title function_">append</span>(<span class="hljs-params">data</span>) &#123;<br>        <span class="hljs-keyword">let</span> newNode = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(data)<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">length</span> === <span class="hljs-number">0</span>) &#123; <span class="hljs-comment">//是第一个节点</span><br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">head</span> = newNode<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">let</span> current = <span class="hljs-variable language_">this</span>.<span class="hljs-property">head</span><br>            <span class="hljs-keyword">while</span> (current.<span class="hljs-property">next</span>) &#123;<br>                current = current.<span class="hljs-property">next</span><br>            &#125;<br>            current.<span class="hljs-property">next</span> = newNode<br>            newNode.<span class="hljs-property">prev</span> = current<br>        &#125;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">tail</span> = newNode<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">length</span> += <span class="hljs-number">1</span><br>    &#125;<br>    <span class="hljs-title function_">insert</span>(<span class="hljs-params">positon, data</span>) &#123;<br>        <span class="hljs-keyword">if</span> (positon &lt; <span class="hljs-number">0</span> || positon &gt; <span class="hljs-variable language_">this</span>.<span class="hljs-property">length</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>        <span class="hljs-keyword">let</span> newNode = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(data)<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">length</span> === <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">head</span> = newNode<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">tail</span> = newNode<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span> (positon === <span class="hljs-number">0</span>) &#123;<br>                newNode.<span class="hljs-property">next</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">head</span><br>                <span class="hljs-variable language_">this</span>.<span class="hljs-property">head</span>.<span class="hljs-property">prev</span> = newNode<br>                <span class="hljs-variable language_">this</span>.<span class="hljs-property">head</span> = newNode<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (positon === <span class="hljs-variable language_">this</span>.<span class="hljs-property">length</span>) &#123;<br>                newNode.<span class="hljs-property">prev</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">tail</span><br>                <span class="hljs-variable language_">this</span>.<span class="hljs-property">tail</span>.<span class="hljs-property">next</span> = newNode<br>                <span class="hljs-variable language_">this</span>.<span class="hljs-property">tail</span> = newNode<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">let</span> current = <span class="hljs-variable language_">this</span>.<span class="hljs-property">head</span><br>                <span class="hljs-keyword">let</span> index = <span class="hljs-number">0</span><br>                <span class="hljs-keyword">while</span> (index++ &lt; position) &#123;<br>                    current = current.<span class="hljs-property">next</span><br>                &#125;<br>                newNode.<span class="hljs-property">next</span> = current<br>                newNode.<span class="hljs-property">prev</span> = current.<span class="hljs-property">prev</span><br>                current.<span class="hljs-property">prev</span>.<span class="hljs-property">next</span> = newNode<br>                current.<span class="hljs-property">prev</span> = newNode<br>            &#125;<br>        &#125;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">length</span>++<br>    &#125;<br>    <span class="hljs-title function_">get</span>(<span class="hljs-params">position</span>) &#123;<br>        <span class="hljs-keyword">if</span> (position &lt; <span class="hljs-number">0</span> || position &gt;= <span class="hljs-variable language_">this</span>.<span class="hljs-property">length</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>        <span class="hljs-comment">//可以自己扩充</span><br>        <span class="hljs-comment">//this.length/2 &lt; position 从头查找</span><br>        <span class="hljs-comment">//this.length/2 &gt;position 从尾查找</span><br><br>        <span class="hljs-keyword">let</span> current = <span class="hljs-variable language_">this</span>.<span class="hljs-property">head</span><br>        <span class="hljs-keyword">let</span> index = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">while</span> (index++ &lt; position) &#123;<br>            current = current.<span class="hljs-property">next</span><br>        &#125;<br>        <span class="hljs-keyword">return</span> current.<span class="hljs-property">data</span><br>    &#125;<br>    <span class="hljs-title function_">indexOf</span>(<span class="hljs-params">data</span>) &#123;<br>        <span class="hljs-keyword">let</span> current = <span class="hljs-variable language_">this</span>.<span class="hljs-property">head</span><br>        <span class="hljs-keyword">let</span> index = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">while</span> (current) &#123;<br>            <span class="hljs-keyword">if</span> (current.<span class="hljs-property">data</span> === data) &#123;<br>                <span class="hljs-keyword">return</span> index<br>            &#125;<br>            current = current.<span class="hljs-property">next</span><br>            index++<br>        &#125;<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span><br>    &#125;<br>    <span class="hljs-title function_">update</span>(<span class="hljs-params">position, newData</span>) &#123;<br>        <span class="hljs-keyword">if</span> (position &lt; <span class="hljs-number">0</span> || position &gt;= <span class="hljs-variable language_">this</span>.<span class="hljs-property">length</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>        <span class="hljs-keyword">let</span> current = <span class="hljs-variable language_">this</span>.<span class="hljs-property">head</span><br>        <span class="hljs-keyword">let</span> index = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">while</span> (index++ &lt; position) &#123;<br>            current = current.<span class="hljs-property">next</span><br>        &#125;<br>        current.<span class="hljs-property">data</span> = newData<br>    &#125;<br>    <span class="hljs-title function_">removeAt</span>(<span class="hljs-params">position</span>) &#123;<br>        <span class="hljs-keyword">if</span> (position &lt; <span class="hljs-number">0</span> || position &gt;= <span class="hljs-variable language_">this</span>.<span class="hljs-property">length</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span><br>        <span class="hljs-keyword">let</span> current = <span class="hljs-variable language_">this</span>.<span class="hljs-property">head</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">length</span> === <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">head</span> = <span class="hljs-literal">null</span><br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">tail</span> = <span class="hljs-literal">null</span><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span> (position === <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-variable language_">this</span>.<span class="hljs-property">head</span>.<span class="hljs-property">next</span>.<span class="hljs-property">prev</span> = <span class="hljs-literal">null</span><br>                <span class="hljs-variable language_">this</span>.<span class="hljs-property">head</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">head</span>.<span class="hljs-property">next</span><br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (position === <span class="hljs-variable language_">this</span>.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>) &#123;<br>                current = <span class="hljs-variable language_">this</span>.<span class="hljs-property">tail</span><br>                <span class="hljs-variable language_">this</span>.<span class="hljs-property">tail</span>.<span class="hljs-property">next</span> = <span class="hljs-literal">null</span><br>                <span class="hljs-variable language_">this</span>.<span class="hljs-property">tail</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">tail</span>.<span class="hljs-property">prev</span><br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">let</span> index = <span class="hljs-number">0</span><br>                <span class="hljs-keyword">while</span> (index++ &lt; position) &#123;<br>                    current = current.<span class="hljs-property">next</span><br>                &#125;<br>                current.<span class="hljs-property">prev</span>.<span class="hljs-property">next</span> = current.<span class="hljs-property">next</span><br>                current.<span class="hljs-property">next</span>.<span class="hljs-property">prev</span> = current.<span class="hljs-property">prev</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">length</span>--<br>        <span class="hljs-keyword">return</span> current.<span class="hljs-property">data</span><br>    &#125;<br>    <span class="hljs-title function_">remove</span>(<span class="hljs-params">data</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">removeAt</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-title function_">indexOf</span>(data))<br>    &#125;<br>    <span class="hljs-title function_">isEmpty</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">length</span> === <span class="hljs-number">0</span><br>    &#125;<br>    <span class="hljs-title function_">size</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">length</span><br>    &#125;<br>    <span class="hljs-title function_">toString</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">backwardString</span>()<br>    &#125;<br>    <span class="hljs-title function_">getHead</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">head</span>.<span class="hljs-property">data</span><br>    &#125;<br>    <span class="hljs-title function_">getTail</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">tail</span>.<span class="hljs-property">data</span><br>    &#125;<br>    <span class="hljs-title function_">forwardString</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">let</span> current = <span class="hljs-variable language_">this</span>.<span class="hljs-property">tail</span><br>        <span class="hljs-keyword">let</span> str = <span class="hljs-string">&#x27;&#x27;</span><br>        <span class="hljs-keyword">while</span> (current) &#123;<br>            str += current.<span class="hljs-property">data</span> + <span class="hljs-string">&#x27;00&#x27;</span><br>            current = current.<span class="hljs-property">prev</span><br>        &#125;<br>        <span class="hljs-keyword">return</span> str<br>    &#125;<br>    <span class="hljs-title function_">backwardString</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">let</span> current = <span class="hljs-variable language_">this</span>.<span class="hljs-property">head</span><br>        <span class="hljs-keyword">let</span> str = <span class="hljs-string">&#x27;&#x27;</span><br>        <span class="hljs-keyword">while</span> (current) &#123;<br>            str += current.<span class="hljs-property">data</span> + <span class="hljs-string">&#x27;==&#x27;</span><br>            current = current.<span class="hljs-property">next</span><br>        &#125;<br>        <span class="hljs-keyword">return</span> str<br>    &#125;<br>&#125;<br><span class="hljs-keyword">let</span> list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DoubleLinkedList</span>()<br>list.<span class="hljs-title function_">append</span>(<span class="hljs-string">&#x27;h&#x27;</span>)<br>list.<span class="hljs-title function_">append</span>(<span class="hljs-string">&#x27;i&#x27;</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(list.<span class="hljs-title function_">backwardString</span>());<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(list.<span class="hljs-title function_">forwardString</span>());<br></code></pre></td></tr></table></figure>

<h3 id="集合-set"><a href="#集合-set" class="headerlink" title="集合(set)"></a>集合(set)</h3><p>集合常见的实现方式是哈希表</p>
<p>集合通常是一组无序的，不能重复的元素构成</p>
<p>可以将集合看作特殊的数组，没有顺序意味着不能通过下标访问，不重复意味着相同的对象在集合中只有一份</p>
<p><img src="/img/sample/a011/4.%E9%9B%86%E5%90%88%E9%97%B4%E7%9A%84%E6%93%8D%E4%BD%9C.png" alt="集合间的操作"></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Set</span> &#123;<br>    items = &#123;&#125;<br>    <span class="hljs-title function_">add</span>(<span class="hljs-params">value</span>) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-title function_">has</span>(value)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>        &#125;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">items</span>[value] = value<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>    &#125;<br>    <span class="hljs-title function_">remove</span>(<span class="hljs-params">value</span>) &#123;<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-variable language_">this</span>.<span class="hljs-title function_">has</span>(value)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>        &#125;<br>        <span class="hljs-keyword">delete</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">items</span>[value]<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>    &#125;<br>    <span class="hljs-title function_">has</span>(<span class="hljs-params">value</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">items</span>.<span class="hljs-title function_">hasOwnProperty</span>(value)<br>    &#125;<br>    <span class="hljs-title function_">clear</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">items</span> = &#123;&#125;<br>    &#125;<br>    <span class="hljs-title function_">size</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">items</span>).<span class="hljs-property">length</span><br>    &#125;<br>    <span class="hljs-title function_">values</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">items</span>)<br>    &#125;<br>    <span class="hljs-title function_">union</span>(<span class="hljs-params">otherSet</span>) &#123;<br>        <span class="hljs-keyword">let</span> unionSet = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>()<br>        <span class="hljs-keyword">let</span> values = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">values</span>()<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">size</span>(); i++) &#123;<br>            unionSet.<span class="hljs-title function_">add</span>(values[i])<br>        &#125;<br>        values = otherSet.<span class="hljs-title function_">values</span>()<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; values.<span class="hljs-property">length</span>; i++) &#123;<br>            unionSet.<span class="hljs-title function_">add</span>(values[i])<br>        &#125;<br>        <span class="hljs-keyword">return</span> unionSet<br>    &#125;<br>    <span class="hljs-title function_">intersection</span>(<span class="hljs-params">otherSet</span>) &#123;<br>        <span class="hljs-keyword">let</span> interSet = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>()<br>        <span class="hljs-keyword">let</span> values = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">values</span>()<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; values.<span class="hljs-property">length</span>; i++) &#123;<br>            <span class="hljs-keyword">let</span> item = values[i]<br>            <span class="hljs-keyword">if</span> (otherSet.<span class="hljs-title function_">has</span>(item)) &#123;<br>                interSet.<span class="hljs-title function_">add</span>(item)<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> interSet<br>    &#125;<br>    <span class="hljs-title function_">difference</span>(<span class="hljs-params">otherSet</span>) &#123;<br>        <span class="hljs-keyword">let</span> diffSet = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>()<br>        <span class="hljs-keyword">let</span> values = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">values</span>()<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; values.<span class="hljs-property">length</span>; i++) &#123;<br>            <span class="hljs-keyword">let</span> item = values[i]<br>            <span class="hljs-keyword">if</span> (!otherSet.<span class="hljs-title function_">has</span>(item)) &#123;<br>                diffSet.<span class="hljs-title function_">add</span>(item)<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> diffSet<br>    &#125;<br>    <span class="hljs-title function_">subset</span>(<span class="hljs-params">otherSet</span>) &#123;<br>        <span class="hljs-keyword">let</span> values = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">values</span>()<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; values.<span class="hljs-property">length</span>; i++) &#123;<br>            <span class="hljs-keyword">let</span> item = values[i]<br>            <span class="hljs-keyword">if</span> (!otherSet.<span class="hljs-title function_">has</span>(item)) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//并集</span><br><span class="hljs-keyword">let</span> set1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>()<br>set1.<span class="hljs-title function_">add</span>(<span class="hljs-string">&#x27;one_aaa&#x27;</span>)<br><span class="hljs-keyword">let</span> set2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>()<br>set2.<span class="hljs-title function_">add</span>(<span class="hljs-string">&#x27;two_aaa&#x27;</span>)<br>set2.<span class="hljs-title function_">add</span>(<span class="hljs-string">&#x27;one_aaa&#x27;</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(set1.<span class="hljs-title function_">union</span>(set2));<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(set1.<span class="hljs-title function_">intersection</span>(set2));<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(set2.<span class="hljs-title function_">difference</span>(set1));<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(set1.<span class="hljs-title function_">subset</span>(set2));<br></code></pre></td></tr></table></figure>

<h3 id="字典-dict"><a href="#字典-dict" class="headerlink" title="字典(dict)"></a>字典(dict)</h3><p>数组、集合、字典几乎是所有编程语言默认提供的数据类型</p>
<p>类似于上面的集合，但是集合不是键值对的形式</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">&#123;<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">18</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;akman&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure>

<p>可以通过key-value取出</p>
<p>key是不可重复的，value可以重复，key是无须的</p>
<p>相当于js中的对象</p>
<h3 id="哈希表-hash-table"><a href="#哈希表-hash-table" class="headerlink" title="哈希表(hash table)"></a>哈希表(hash table)</h3><p>哈希表通常是基于数组进行实现的，但是数据名称(单词)经过哈希函数的变换成了下标值，将该数据存到对应下标的数组中，通过下标值获取数据的效率非常高</p>
<p>相对数组它可以提供非常快速的插入、删除、查找操作</p>
<p>哈希表中的数据是没有顺序的，不能用一种固定的方式遍历其中的元素</p>
<p>缺点：</p>
<ul>
<li>哈希表中的key是不允许重复的；</li>
<li>哈希表中的数据是没有顺序的(集合，字典的实现都是基于哈希表)；</li>
<li>空间利用率不高；</li>
<li>不能快速找到表中的特殊值，如：最大值、最小值</li>
</ul>
<p>哈希化：</p>
<ul>
<li>将大数字转化成数组范围内下标的过程</li>
</ul>
<p>哈希函数：</p>
<ul>
<li>通常我们会将单词转换成大数字，大数组哈希化的代码放在一个函数中，这个函数我们成为哈希函数</li>
</ul>
<p>哈希表：</p>
<ul>
<li>最终将数据插入数组中，对整个结构进行封装，我们称之为一个哈希表</li>
</ul>
<p>下表冲突解决：</p>
<ul>
<li>链地址法<br>  链地址法解决冲突的办法是每个数组单元中的存储不再是单个数据，而是一个链条可以是数组也可以是链表</li>
</ul>
<p><img src="/img/sample/a011/5.%E9%93%BE%E5%9C%B0%E5%9D%80%E6%B3%95.png" alt="链地址法"></p>
<ul>
<li>开放地址法<br>线性探测    index位置+1查找空白位置<br>二次探测<br>再哈希法</li>
</ul>
<p><img src="/img/sample/a011/6.%E5%BC%80%E6%94%BE%E5%9C%B0%E5%9D%80%E6%B3%951.png" alt="开放地址法"></p>
<ul>
<li>开发中使用链地址法更多</li>
</ul>
<p><img src="/img/sample/a011/7.%E5%93%88%E5%B8%8C%E8%A1%A8%E7%9A%84%E7%BB%93%E6%9E%84.png" alt="哈希表的结构"></p>
<p>实质上是一个三重数组</p>
<p>为什么需要扩容</p>
<ul>
<li>随着数据量增加，bucket会越来越长，哈希表效率降低</li>
</ul>
<p>如何扩容</p>
<ul>
<li>可以简单的将容量扩大两倍(容量最好为质数，更利于数据的均匀分布)</li>
<li>扩容时，所用数据项需要重新获取位置</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">HashTable</span> &#123;<br>    storage = [] <span class="hljs-comment">//存放元素的数组</span><br>    count = <span class="hljs-number">0</span> <span class="hljs-comment">//数据量    用于计算加载因子， loadfactor &gt; 0.75时需要对数组进行扩容，&lt;0.25时减容     加载因子=存储数据量/数组长度 </span><br>    limit = <span class="hljs-number">7</span> <span class="hljs-comment">//数组当前总长度</span><br><br>    <span class="hljs-title function_">hashFunc</span>(<span class="hljs-params">str, size</span>) &#123;<br>        <span class="hljs-keyword">let</span> hashCode = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; str.<span class="hljs-property">length</span>; i++) &#123;<br>            hashCode = <span class="hljs-number">37</span> * hashCode<br>            hashCode = hashCode + str.<span class="hljs-title function_">charCodeAt</span>(i)<br>        &#125;<br>        <span class="hljs-keyword">let</span> index = hashCode % size<br>        <span class="hljs-keyword">return</span> index<br>    &#125;<br>    <span class="hljs-title function_">put</span>(<span class="hljs-params">key, value</span>) &#123; <span class="hljs-comment">//插入和修改是同一个操作，原表没有就插入，原表有就修改</span><br>        <span class="hljs-keyword">let</span> index = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">hashFunc</span>(key, <span class="hljs-variable language_">this</span>.<span class="hljs-property">limit</span>)<br>        <span class="hljs-keyword">let</span> bucket = <span class="hljs-variable language_">this</span>.<span class="hljs-property">storage</span>[index]<br>        <span class="hljs-keyword">if</span> (!bucket) &#123;<br>            bucket = []<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">storage</span>[index] = bucket<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; bucket.<span class="hljs-property">length</span>; i++) &#123;<br>            <span class="hljs-keyword">let</span> tuple = bucket[i] <span class="hljs-comment">//元组</span><br>            <span class="hljs-keyword">if</span> (key === tuple[<span class="hljs-number">0</span>]) &#123;<br>                tuple[<span class="hljs-number">1</span>] = value<br>                <span class="hljs-keyword">return</span><br>            &#125;<br>        &#125;<br>        bucket.<span class="hljs-title function_">push</span>([key, value])<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">count</span>++<br><br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">count</span> &gt; <span class="hljs-variable language_">this</span>.<span class="hljs-property">limit</span> * <span class="hljs-number">0.75</span>) &#123; <span class="hljs-comment">//扩容</span><br>            <span class="hljs-keyword">let</span> newPrime = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getPrime</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">limit</span> * <span class="hljs-number">2</span>)<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">resize</span>(newPrime)<br>        &#125;<br>    &#125;<br>    <span class="hljs-title function_">get</span>(<span class="hljs-params">key</span>) &#123; <span class="hljs-comment">//获取元素</span><br>        <span class="hljs-keyword">let</span> index = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">hashFunc</span>(key, <span class="hljs-variable language_">this</span>.<span class="hljs-property">limit</span>)<br>        <span class="hljs-keyword">let</span> bucket = <span class="hljs-variable language_">this</span>.<span class="hljs-property">storage</span>[index]<br>        <span class="hljs-keyword">if</span> (!bucket) <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; bucket.<span class="hljs-property">length</span>; i++) &#123;<br>            <span class="hljs-keyword">let</span> tuple = bucket[i]<br>            <span class="hljs-keyword">if</span> (key === tuple[<span class="hljs-number">0</span>]) <span class="hljs-keyword">return</span> tuple[<span class="hljs-number">1</span>]<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span><br>    &#125;<br>    <span class="hljs-title function_">remove</span>(<span class="hljs-params">key</span>) &#123;<br>        <span class="hljs-keyword">let</span> index = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">hashFunc</span>(key, <span class="hljs-variable language_">this</span>.<span class="hljs-property">limit</span>)<br>        <span class="hljs-keyword">let</span> bucket = <span class="hljs-variable language_">this</span>.<span class="hljs-property">storage</span>[index]<br>        <span class="hljs-keyword">if</span> (!bucket) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; bucket.<span class="hljs-property">length</span>; i++) &#123;<br>            <span class="hljs-keyword">let</span> tuple = bucket[i]<br>            <span class="hljs-keyword">if</span> (key === tuple[<span class="hljs-number">0</span>]) &#123;<br>                bucket.<span class="hljs-title function_">splice</span>(i, <span class="hljs-number">1</span>)<br>                <span class="hljs-variable language_">this</span>.<span class="hljs-property">count</span>--<br>                <span class="hljs-keyword">return</span> tuple[<span class="hljs-number">1</span>]<br><br>                <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">limit</span> &gt; <span class="hljs-number">7</span> &amp;&amp; <span class="hljs-variable language_">this</span>.<span class="hljs-property">count</span> &lt; <span class="hljs-variable language_">this</span>.<span class="hljs-property">limit</span> * <span class="hljs-number">0.25</span>) &#123; <span class="hljs-comment">//缩容</span><br>                    <span class="hljs-keyword">let</span> newPrime = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getPrime</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">limit</span> / <span class="hljs-number">2</span>))<br>                    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">resize</span>(newPrime)<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>    &#125;<br>    <span class="hljs-title function_">isEmpty</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">count</span> === <span class="hljs-number">0</span><br>    &#125;<br>    <span class="hljs-title function_">size</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">count</span><br>    &#125;<br>    <span class="hljs-title function_">resize</span>(<span class="hljs-params">newLimit</span>) &#123; <span class="hljs-comment">//扩容</span><br>        oldStorage = <span class="hljs-variable language_">this</span>.<span class="hljs-property">storage</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">storage</span> = []<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">count</span> = <span class="hljs-number">0</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">limit</span> = newLimit<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; oldStorage.<span class="hljs-property">length</span>; i++) &#123;<br>            <span class="hljs-keyword">let</span> bucket = oldStorage[i]<br>            <span class="hljs-keyword">if</span> (!bucket) <span class="hljs-keyword">continue</span> <span class="hljs-comment">//为空跳过本次循环</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> j = <span class="hljs-number">0</span>; j &lt; bucket.<span class="hljs-property">length</span>; j++) &#123;<br>                <span class="hljs-keyword">let</span> tuple = bucket[j]<br>                <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">put</span>(tuple[<span class="hljs-number">0</span>], tuple[<span class="hljs-number">1</span>])<br>            &#125;<br>        &#125;<br><br>    &#125;<br>    <span class="hljs-title function_">isPrime</span>(<span class="hljs-params">num</span>) &#123;<br>        <span class="hljs-keyword">let</span> temp = <span class="hljs-built_in">parseInt</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">sqrt</span>(num))<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">2</span>; i &lt; temp; i++) &#123;<br>            <span class="hljs-keyword">if</span> (num % i === <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>    &#125;<br>    <span class="hljs-title function_">getPrime</span>(<span class="hljs-params">num</span>) &#123;<br>        <span class="hljs-keyword">while</span> (!<span class="hljs-variable language_">this</span>.<span class="hljs-title function_">isPrime</span>()) &#123;<br>            num++<br>        &#125;<br>        <span class="hljs-keyword">return</span> num<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">let</span> hashtable1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashTable</span>()<br>hashtable1.<span class="hljs-title function_">put</span>(<span class="hljs-string">&#x27;dogulas&#x27;</span>, &#123;<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">18</span>,<br>    <span class="hljs-attr">gender</span>: <span class="hljs-string">&#x27;male&#x27;</span><br>&#125;)<br>hashtable1.<span class="hljs-title function_">put</span>(<span class="hljs-string">&#x27;july&#x27;</span>, &#123;<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">22</span>,<br>    <span class="hljs-attr">gender</span>: <span class="hljs-string">&#x27;famale&#x27;</span><br>&#125;)<br><span class="hljs-comment">// console.log(hashtable1);</span><br><span class="hljs-comment">// console.log(hashtable1.get(&#x27;july&#x27;));</span><br>hashtable1.<span class="hljs-title function_">remove</span>(<span class="hljs-string">&#x27;dogulas&#x27;</span>)<br><span class="hljs-comment">// console.log(hashtable1);</span><br><span class="hljs-comment">// console.log(hashtable1.isEmpty());</span><br><span class="hljs-comment">// console.log(hashtable1.size());</span><br></code></pre></td></tr></table></figure>

<h3 id="树结构-tree"><a href="#树结构-tree" class="headerlink" title="树结构(tree)"></a>树结构(tree)</h3><p>树结构是非线性的，可以表示一对多的关系</p>
<p>树结构的表示方法</p>
<blockquote>
<p>普通表示法<br>儿子-兄弟表示法</p>
</blockquote>
<p>相关术语</p>
<blockquote>
<p>节点的度：节点的子树个数<br>树的度：树的所有节点中最大度数<br>路径和路径长度：路径所包含边的个数为路径的长度<br>节点的层次：根节点在1层，其他任意节点的层数是其父节点的层数+1<br>树的深度：树中所有节点中的最大层次是这棵树的深度 </p>
</blockquote>
<p>二叉树：</p>
<blockquote>
<p>如果树中每个节点最多只能有两个子节点，这样的数成为二叉树</p>
</blockquote>
<blockquote>
<p>任何树都可以用二叉树模拟出来</p>
</blockquote>
<p><img src="/img/sample/a011/8.%E6%A0%91%E7%9A%84%E6%9C%AC%E8%B4%A8-%E4%BA%8C%E5%8F%89%E6%A0%91.png" alt="树的本质-二叉树"></p>
<p>特性：</p>
<blockquote>
<p>第i层的最大节点数为2^(i-1), i&gt;&#x3D;1<br>深度为k的二叉树最大节点总数为2^k-1, k&gt;&#x3D;1<br>对任何非空二叉树T，若n0表示叶节点的个数，n2是度为2的非叶节点个数，那么两者满足关系n0&#x3D;n2+1<br>完美二叉树；完全二叉树</p>
</blockquote>
<p>二叉搜索树</p>
<blockquote>
<p>Binary search tree<br>非空左子树的所有键值小于其根节点的键值<br>非空右子树的所有键值大于其根节点的键值<br>左右子树本身也是二叉搜索树</p>
</blockquote>
<p><img src="/img/sample/a011/9.%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E7%BB%93%E6%9E%84.png" alt="二叉搜索树的结构"></p>
<p><img src="/img/sample/a011/10.%E5%85%88%E5%BA%8F%E9%81%8D%E5%8E%86.png" alt="先序遍历"></p>
<p><img src="/img/sample/a011/11.%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86.png" alt="中序遍历"></p>
<p><img src="/img/sample/a011/12.%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86.png" alt="后序遍历"></p>
<p>平衡树</p>
<blockquote>
<p>树中每个节点左边的子孙节点的个数，应该尽可能等于右边的子孙节点个数<br>使其深度尽可能小，从而提高查找、插入、删除效率</p>
</blockquote>
<p>红黑树</p>
<blockquote>
<p>节点是红色或者黑色<br>根节点是黑色<br>每个叶子节点都是黑色的空节点(NIL节点)<br>每个红色节点的两个子节点都是黑色，从每个叶子到根的所有路径上不能有两个连续的红色节点<br>从任一节点到其每个叶子的所有路径都包含相同数目的黑色节点<br>红黑树的平衡</p>
</blockquote>
<ul>
<li>变色</li>
<li>左旋转</li>
<li>右旋转</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span> &#123;<br>    left = <span class="hljs-literal">null</span><br>    right = <span class="hljs-literal">null</span><br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">key</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">key</span> = key<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BinarySearchTree</span> &#123;<br>    root = <span class="hljs-literal">null</span><br>    <span class="hljs-comment">//插入</span><br>    <span class="hljs-title function_">insert</span>(<span class="hljs-params">key</span>) &#123;<br>        <span class="hljs-keyword">let</span> newNode = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(key)<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">root</span> === <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">root</span> = newNode<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">insertNode</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">root</span>, newNode)<br>        &#125;<br>    &#125;<br>    <span class="hljs-title function_">insertNode</span>(<span class="hljs-params">node, newNode</span>) &#123; <span class="hljs-comment">//私有方法  递归函数(其实就是一个压栈过程)  递归基本都可以转成循环</span><br>        <span class="hljs-keyword">if</span> (newNode.<span class="hljs-property">key</span> &lt; node.<span class="hljs-property">key</span>) &#123; <span class="hljs-comment">//向左查找</span><br>            <span class="hljs-keyword">if</span> (node.<span class="hljs-property">left</span> === <span class="hljs-literal">null</span>) &#123;<br>                node.<span class="hljs-property">left</span> = newNode<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">insertNode</span>(node.<span class="hljs-property">left</span>, newNode)<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">//向右查找</span><br>            <span class="hljs-keyword">if</span> (node.<span class="hljs-property">right</span> === <span class="hljs-literal">null</span>) &#123;<br>                node.<span class="hljs-property">right</span> = newNode<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">insertNode</span>(node.<span class="hljs-property">right</span>, newNode)<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//查找是否含有某值</span><br>    <span class="hljs-title function_">search</span>(<span class="hljs-params">key</span>) &#123;<br>        <span class="hljs-keyword">let</span> node = <span class="hljs-variable language_">this</span>.<span class="hljs-property">root</span><br>        <span class="hljs-keyword">while</span> (node !== <span class="hljs-literal">null</span>) &#123; <span class="hljs-comment">//递归代码简单，空间复杂度高；循环代码复杂，空间复杂度低</span><br>            <span class="hljs-keyword">if</span> (key &lt; node.<span class="hljs-property">key</span>) &#123;<br>                node = node.<span class="hljs-property">left</span><br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (key &gt; node.<span class="hljs-property">key</span>) &#123;<br>                node = node.<span class="hljs-property">right</span><br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>    &#125;<br><br>    <span class="hljs-comment">//中序遍历  中间处理root    访问顺序node.left-&gt;node-&gt;node.right</span><br>    <span class="hljs-title function_">inOrderTraverse</span>(<span class="hljs-params">handler</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">inOrderTraverseNode</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">root</span>, handler)<br>    &#125;<br>    <span class="hljs-title function_">inOrderTraverseNode</span>(<span class="hljs-params">node, handler</span>) &#123;<br>        <span class="hljs-keyword">if</span> (node !== <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">inOrderTraverseNode</span>(node.<span class="hljs-property">left</span>, handler)<br>            <span class="hljs-title function_">handler</span>(node.<span class="hljs-property">key</span>)<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">inOrderTraverseNode</span>(node.<span class="hljs-property">right</span>, handler)<br>        &#125;<br>        <span class="hljs-keyword">return</span><br>    &#125;<br><br>    <span class="hljs-comment">//先序遍历  先处理root   访问顺序node-&gt;node.left-&gt;node.right</span><br>    <span class="hljs-title function_">preOrderTraverse</span>(<span class="hljs-params">handler</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">preOrderTraverseNode</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">root</span>, handler)<br>    &#125;<br>    <span class="hljs-title function_">preOrderTraverseNode</span>(<span class="hljs-params">node, handler</span>) &#123; <span class="hljs-comment">//私有方法</span><br>        <span class="hljs-keyword">if</span> (node !== <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-title function_">handler</span>(node.<span class="hljs-property">key</span>)<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">preOrderTraverseNode</span>(node.<span class="hljs-property">left</span>, handler)<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">preOrderTraverseNode</span>(node.<span class="hljs-property">right</span>, handler)<br>        &#125;<br>        <span class="hljs-keyword">return</span><br>    &#125;<br><br>    <span class="hljs-comment">//后序遍历  后处理root</span><br>    <span class="hljs-title function_">postOrderTraverse</span>(<span class="hljs-params">handler</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">postOrderTraverseNode</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">root</span>, handler)<br>    &#125;<br>    <span class="hljs-title function_">postOrderTraverseNode</span>(<span class="hljs-params">node, handler</span>) &#123;<br>        <span class="hljs-keyword">if</span> (node !== <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">postOrderTraverseNode</span>(node.<span class="hljs-property">left</span>, handler)<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">postOrderTraverseNode</span>(node.<span class="hljs-property">right</span>, handler)<br>            <span class="hljs-title function_">handler</span>(node.<span class="hljs-property">key</span>)<br>        &#125;<br>        <span class="hljs-keyword">return</span><br>    &#125;<br><br>    <span class="hljs-comment">//最大最小值</span><br>    <span class="hljs-title function_">min</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">let</span> node = <span class="hljs-variable language_">this</span>.<span class="hljs-property">root</span><br>        <span class="hljs-keyword">while</span> (node.<span class="hljs-property">left</span> !== <span class="hljs-literal">null</span>) &#123;<br>            node = node.<span class="hljs-property">left</span><br>        &#125;<br>        <span class="hljs-keyword">return</span> node.<span class="hljs-property">key</span><br>    &#125;<br>    <span class="hljs-title function_">max</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">let</span> node = <span class="hljs-variable language_">this</span>.<span class="hljs-property">root</span><br>        <span class="hljs-keyword">while</span> (node.<span class="hljs-property">right</span> !== <span class="hljs-literal">null</span>) &#123;<br>            node = node.<span class="hljs-property">right</span><br>        &#125;<br>        <span class="hljs-keyword">return</span> node.<span class="hljs-property">key</span><br>    &#125;<br><br>    <span class="hljs-comment">//删除节点</span><br>    <span class="hljs-title function_">remove</span>(<span class="hljs-params">key</span>) &#123;<br>        <span class="hljs-keyword">let</span> current = <span class="hljs-variable language_">this</span>.<span class="hljs-property">root</span><br>        <span class="hljs-keyword">let</span> parent = <span class="hljs-literal">null</span><br>        <span class="hljs-keyword">let</span> isLeft = <span class="hljs-literal">true</span> <span class="hljs-comment">//current 是左节点还是右节点</span><br><br>        <span class="hljs-keyword">while</span> (current.<span class="hljs-property">key</span> !== key) &#123;<br>            parent = current<br>            <span class="hljs-keyword">if</span> (key &lt; current.<span class="hljs-property">key</span>) &#123;<br>                isLeft = <span class="hljs-literal">true</span><br>                current = current.<span class="hljs-property">left</span><br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                isLeft = <span class="hljs-literal">false</span><br>                current = current.<span class="hljs-property">right</span><br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (current === <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>        &#125;<br><br>        <span class="hljs-comment">//删除节点是叶子节点</span><br>        <span class="hljs-keyword">if</span> (current.<span class="hljs-property">left</span> === <span class="hljs-literal">null</span> &amp;&amp; current.<span class="hljs-property">right</span> === <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">if</span> (current === <span class="hljs-variable language_">this</span>.<span class="hljs-property">root</span>) &#123;<br>                <span class="hljs-variable language_">this</span>.<span class="hljs-property">root</span> = <span class="hljs-literal">null</span><br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (isLeft) &#123;<br>                parent.<span class="hljs-property">left</span> = <span class="hljs-literal">null</span><br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                parent.<span class="hljs-property">right</span> = <span class="hljs-literal">null</span><br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">//删除节点有一个子节点</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (current.<span class="hljs-property">right</span> === <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">if</span> (current === <span class="hljs-variable language_">this</span>.<span class="hljs-property">root</span>) &#123;<br>                <span class="hljs-variable language_">this</span>.<span class="hljs-property">root</span> = current.<span class="hljs-property">left</span><br>                <span class="hljs-keyword">return</span><br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (isLeft) &#123;<br>                parent.<span class="hljs-property">left</span> = current.<span class="hljs-property">left</span><br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                parent.<span class="hljs-property">right</span> = current.<span class="hljs-property">left</span><br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (current.<span class="hljs-property">left</span> === <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">if</span> (current === <span class="hljs-variable language_">this</span>.<span class="hljs-property">root</span>) &#123;<br>                <span class="hljs-variable language_">this</span>.<span class="hljs-property">root</span> = current.<span class="hljs-property">right</span><br>                <span class="hljs-keyword">return</span><br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (isLeft) &#123;<br>                parent.<span class="hljs-property">left</span> = current.<span class="hljs-property">right</span><br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                parent.<span class="hljs-property">right</span> = current.<span class="hljs-property">right</span><br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">//删除节点有两个子节点</span><br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">let</span> successor = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getSuccessor</span>(current)<br>            <span class="hljs-keyword">if</span> (current === <span class="hljs-variable language_">this</span>.<span class="hljs-property">root</span>) &#123;<br>                <span class="hljs-variable language_">this</span>.<span class="hljs-property">root</span> = successor<br>                <span class="hljs-keyword">return</span><br>            &#125;<br>            <span class="hljs-keyword">if</span> (isLeft) &#123;<br>                parent.<span class="hljs-property">left</span> = successor<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                parent.<span class="hljs-property">right</span> = successor<br>            &#125;<br><br>            successor.<span class="hljs-property">left</span> = current.<span class="hljs-property">left</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-title function_">getSuccessor</span>(<span class="hljs-params">delNode</span>) &#123;<br>        <span class="hljs-keyword">let</span> successor = delNode<br>        <span class="hljs-keyword">let</span> current = delNode.<span class="hljs-property">right</span><br>        <span class="hljs-keyword">let</span> successorParent = delNode<br>        <span class="hljs-keyword">while</span> (current !== <span class="hljs-literal">null</span>) &#123;<br>            successorParent = successor<br>            successor = current<br>            current = current.<span class="hljs-property">left</span><br>        &#125;<br>        <span class="hljs-keyword">if</span> (successor !== delNode.<span class="hljs-property">right</span>) &#123;<br>            successorParent.<span class="hljs-property">left</span> = successor.<span class="hljs-property">right</span><br>            successor.<span class="hljs-property">right</span> = delNode.<span class="hljs-property">right</span><br>        &#125;<br>        <span class="hljs-keyword">return</span> successor<br>    &#125;<br><br>&#125;<br><br><span class="hljs-keyword">const</span> bst = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BinarySearchTree</span>()<br>bst.<span class="hljs-title function_">insert</span>(<span class="hljs-number">8</span>)<br>bst.<span class="hljs-title function_">insert</span>(<span class="hljs-number">7</span>)<br>bst.<span class="hljs-title function_">insert</span>(<span class="hljs-number">15</span>)<br>bst.<span class="hljs-title function_">insert</span>(<span class="hljs-number">5</span>)<br>bst.<span class="hljs-title function_">insert</span>(<span class="hljs-number">3</span>)<br>bst.<span class="hljs-title function_">insert</span>(<span class="hljs-number">9</span>)<br>bst.<span class="hljs-title function_">insert</span>(<span class="hljs-number">10</span>)<br><span class="hljs-comment">// console.log(bst);</span><br><br><span class="hljs-keyword">let</span> preStr = <span class="hljs-string">&#x27;^&#x27;</span><br>bst.<span class="hljs-title function_">preOrderTraverse</span>(<span class="hljs-function">(<span class="hljs-params">key</span>) =&gt;</span> &#123; <span class="hljs-comment">//闭包</span><br>    preStr += key + <span class="hljs-string">&#x27;==&#x27;</span><br>&#125;)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(preStr);<br><br><span class="hljs-keyword">let</span> inStr = <span class="hljs-string">&#x27;*&#x27;</span><br>bst.<span class="hljs-title function_">inOrderTraverse</span>(<span class="hljs-function">(<span class="hljs-params">key</span>) =&gt;</span> &#123;<br>    inStr += key + <span class="hljs-string">&#x27;==&#x27;</span><br>&#125;)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(inStr);<br><br><span class="hljs-keyword">let</span> postStr = <span class="hljs-string">&#x27;$&#x27;</span><br>bst.<span class="hljs-title function_">postOrderTraverse</span>(<span class="hljs-function">(<span class="hljs-params">key</span>) =&gt;</span> &#123;<br>    postStr += key + <span class="hljs-string">&#x27;==&#x27;</span><br>&#125;)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(postStr);<br><br><span class="hljs-comment">// console.log(bst.min());</span><br><span class="hljs-comment">// console.log(bst.max());</span><br><br><span class="hljs-comment">// console.log(bst.search(25));</span><br><span class="hljs-comment">// console.log(bst.search(15));</span><br>bst.<span class="hljs-title function_">remove</span>(<span class="hljs-number">7</span>)<br><span class="hljs-keyword">let</span> str = <span class="hljs-string">&#x27;&#x27;</span><br>bst.<span class="hljs-title function_">inOrderTraverse</span>(<span class="hljs-function">(<span class="hljs-params">key</span>) =&gt;</span> &#123;<br>    str += key + <span class="hljs-string">&#x27;==&#x27;</span><br>&#125;)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str);<br></code></pre></td></tr></table></figure>

<h3 id="图-Graph"><a href="#图-Graph" class="headerlink" title="图(Graph)"></a>图(Graph)</h3><p>图主要研究事物之间的关系，顶点代表事物，边代表两个事物间的关系</p>
<p>通常用V(vertex)表示顶点的集合</p>
<p>通常用E(Edge)表示边的集合</p>
<blockquote>
<p>边是顶点和顶点之间的连线<br>边可以是有向的，也可以是无向</p>
</blockquote>
<p>欧拉七桥问题</p>
<blockquote>
<p>连接一点的边的数目如果是奇数条，就成为奇点；偶数条则为偶点</p>
</blockquote>
<p>相关术语</p>
<blockquote>
<p>度：一个顶点相邻顶点的个数<br>简单路径：路径不包含重复的顶点<br>回路：第一个顶点和最后一个顶点相同的路径<br>无向图和有向图(边是否带有方向)<br>无权图和有权图(边是否带有权重)</p>
</blockquote>
<p>邻接矩阵</p>
<blockquote>
<p>每个节点和一个整数相关联，该整数作为数组的下标<br>用二维数组表示顶点之间的连接 </p>
</blockquote>
<p><img src="/img/sample/a011/13.%E9%82%BB%E6%8E%A5%E7%9F%A9%E9%98%B5.png" alt="邻接矩阵"></p>
<blockquote>
<p>缺点：如果是稀疏图(边很少)，还是需要大量的0表示不存在的边，造成空间浪费</p>
</blockquote>
<p>邻接表</p>
<blockquote>
<p>每个顶点以及和顶点相邻的顶点列表组成<br>类似于hash表</p>
</blockquote>
<p><img src="/img/sample/a011/14.%E9%82%BB%E6%8E%A5%E8%A1%A8.png" alt="邻接表"></p>
<blockquote>
<p>出度：指向别人的数量；入度：指向自己的数量<br>缺点：出度好计算；入度不好计算，不需构建一个逆邻接表，才能有效的计算入度，开发中计算入度较少</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dictionary</span> &#123; <span class="hljs-comment">//字典</span><br>    items = &#123;&#125;<br><br>    <span class="hljs-title function_">set</span>(<span class="hljs-params">key, value</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">items</span>[key] = value<br>    &#125;<br>    <span class="hljs-title function_">has</span>(<span class="hljs-params">key</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">items</span>.<span class="hljs-title function_">hasOwnProperty</span>(key)<br>    &#125;<br>    <span class="hljs-title function_">remove</span>(<span class="hljs-params">key</span>) &#123;<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-variable language_">this</span>.<span class="hljs-title function_">has</span>(key)) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>        <span class="hljs-keyword">delete</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">items</span>[key]<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>    &#125;<br>    <span class="hljs-title function_">get</span>(<span class="hljs-params">key</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">has</span>(key) ? <span class="hljs-variable language_">this</span>.<span class="hljs-property">items</span>[key] : <span class="hljs-literal">undefined</span><br>    &#125;<br>    <span class="hljs-title function_">keys</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">items</span>)<br>    &#125;<br>    <span class="hljs-title function_">values</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">values</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">items</span>)<br>    &#125;<br>    <span class="hljs-title function_">size</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">keys</span>.<span class="hljs-property">length</span><br>    &#125;<br>    <span class="hljs-title function_">clear</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">items</span> = &#123;&#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Queue</span> &#123;<br>    items = []<br>    <span class="hljs-title function_">enqueue</span>(<span class="hljs-params">element</span>) &#123; <span class="hljs-comment">//向队尾添加一个或多个元素</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">items</span>.<span class="hljs-title function_">push</span>(element)<br>    &#125;<br>    <span class="hljs-title function_">dequeue</span>(<span class="hljs-params"></span>) &#123; <span class="hljs-comment">//移除队列第一项，并返回被移除的元素</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">items</span>.<span class="hljs-title function_">shift</span>()<br>    &#125;<br>    <span class="hljs-title function_">front</span>(<span class="hljs-params"></span>) &#123; <span class="hljs-comment">//返回队列第一个元素</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">items</span>[<span class="hljs-number">0</span>]<br>    &#125;<br>    <span class="hljs-title function_">isEmpty</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">items</span>.<span class="hljs-property">length</span> === <span class="hljs-number">0</span><br>    &#125;<br>    <span class="hljs-title function_">size</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">items</span>.<span class="hljs-property">length</span><br>    &#125;<br>    <span class="hljs-title function_">toString</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">let</span> str = <span class="hljs-string">&#x27;&#x27;</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">items</span>.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> &#123;<br>            str += item + <span class="hljs-string">&#x27;&#x27;</span><br>        &#125;)<br>        <span class="hljs-keyword">return</span> str<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Graph</span> &#123;<br>    vertexes = [] <span class="hljs-comment">//顶点</span><br>    edges = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dictionary</span>() <span class="hljs-comment">//边</span><br><br>    <span class="hljs-title function_">addVertexes</span>(<span class="hljs-params">v</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">vertexes</span>.<span class="hljs-title function_">push</span>(v)<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">edges</span>.<span class="hljs-title function_">set</span>(v, [])<br>    &#125;<br>    <span class="hljs-title function_">addEdge</span>(<span class="hljs-params">v1, v2</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">edges</span>.<span class="hljs-title function_">get</span>(v1).<span class="hljs-title function_">push</span>(v2)<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">edges</span>.<span class="hljs-title function_">get</span>(v2).<span class="hljs-title function_">push</span>(v1) <span class="hljs-comment">//无向图</span><br>    &#125;<br>    <span class="hljs-title function_">toString</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">let</span> str = <span class="hljs-string">&#x27;&#x27;</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">vertexes</span>.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> &#123;<br>            str += item + <span class="hljs-string">&#x27; -&gt; &#x27;</span><br>            <span class="hljs-keyword">let</span> vEdge = <span class="hljs-variable language_">this</span>.<span class="hljs-property">edges</span>.<span class="hljs-title function_">get</span>(item)<br>            vEdge.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">ite</span> =&gt;</span> &#123;<br>                str += ite + <span class="hljs-string">&#x27; &#x27;</span><br>            &#125;)<br>            str += <span class="hljs-string">&#x27;\n&#x27;</span><br>        &#125;)<br>        <span class="hljs-keyword">return</span> str<br>    &#125;<br>    <span class="hljs-title function_">initializeColor</span>(<span class="hljs-params"></span>) &#123; <span class="hljs-comment">//遍历时 顶点状态颜色   white没有被访问   gray被访问但未被探索    black被访问且被完全探索</span><br>        <span class="hljs-keyword">let</span> colors = &#123;&#125;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">vertexes</span>.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> &#123;<br>            colors[item] = <span class="hljs-string">&#x27;white&#x27;</span><br>        &#125;)<br>        <span class="hljs-keyword">return</span> colors<br>    &#125;<br>    <span class="hljs-title function_">bfs</span>(<span class="hljs-params">initV, handler</span>) &#123; <span class="hljs-comment">//广度优先搜索</span><br>        <span class="hljs-keyword">let</span> colors = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">initializeColor</span>()<br>        <span class="hljs-keyword">let</span> queue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Queue</span>()<br>        queue.<span class="hljs-title function_">enqueue</span>(initV)<br>        <span class="hljs-keyword">while</span> (!queue.<span class="hljs-title function_">isEmpty</span>()) &#123;<br>            <span class="hljs-keyword">let</span> v = queue.<span class="hljs-title function_">dequeue</span>()<br>            <span class="hljs-keyword">let</span> vList = <span class="hljs-variable language_">this</span>.<span class="hljs-property">edges</span>.<span class="hljs-title function_">get</span>(v)<br>            colors[v] = <span class="hljs-string">&#x27;gray&#x27;</span><br>            vList.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> &#123;<br>                <span class="hljs-keyword">if</span> (colors[item] === <span class="hljs-string">&#x27;white&#x27;</span>) &#123;<br>                    colors[item] = <span class="hljs-string">&#x27;gray&#x27;</span><br>                    queue.<span class="hljs-title function_">enqueue</span>(item)<br>                &#125;<br>            &#125;)<br>            <span class="hljs-title function_">handler</span>(v)<br>            colors[v] = <span class="hljs-string">&#x27;black&#x27;</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-title function_">dfs</span>(<span class="hljs-params">initV, handler</span>) &#123; <span class="hljs-comment">//深度优先搜索</span><br>        <span class="hljs-keyword">let</span> colors = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">initializeColor</span>()<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">dfsVisit</span>(initV, colors, handler)<br>    &#125;<br>    <span class="hljs-title function_">dfsVisit</span>(<span class="hljs-params">v, colors, handler</span>) &#123; <span class="hljs-comment">//私有方法，递归函数</span><br>        colors[v] = <span class="hljs-string">&#x27;gray&#x27;</span><br>        <span class="hljs-title function_">handler</span>(v)<br>        <span class="hljs-keyword">let</span> vList = <span class="hljs-variable language_">this</span>.<span class="hljs-property">edges</span>.<span class="hljs-title function_">get</span>(v)<br>        vList.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> &#123;<br>            <span class="hljs-keyword">if</span> (colors[item] === <span class="hljs-string">&#x27;white&#x27;</span>) &#123;<br>                colors[item] = <span class="hljs-string">&#x27;gray&#x27;</span><br>                <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">dfsVisit</span>(item, colors, handler)<br>            &#125;<br>        &#125;)<br>        colors[v] = <span class="hljs-string">&#x27;black&#x27;</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">let</span> g1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Graph</span>()<br><span class="hljs-keyword">const</span> varr = [<span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-string">&#x27;C&#x27;</span>, <span class="hljs-string">&#x27;D&#x27;</span>, <span class="hljs-string">&#x27;E&#x27;</span>, <span class="hljs-string">&#x27;F&#x27;</span>, <span class="hljs-string">&#x27;G&#x27;</span>, <span class="hljs-string">&#x27;H&#x27;</span>, <span class="hljs-string">&#x27;I&#x27;</span>]<br>varr.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> &#123;<br>    g1.<span class="hljs-title function_">addVertexes</span>(item)<br>&#125;)<br>g1.<span class="hljs-title function_">addEdge</span>(<span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>)<br>g1.<span class="hljs-title function_">addEdge</span>(<span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;C&#x27;</span>)<br>g1.<span class="hljs-title function_">addEdge</span>(<span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;D&#x27;</span>)<br>g1.<span class="hljs-title function_">addEdge</span>(<span class="hljs-string">&#x27;C&#x27;</span>, <span class="hljs-string">&#x27;D&#x27;</span>)<br>g1.<span class="hljs-title function_">addEdge</span>(<span class="hljs-string">&#x27;C&#x27;</span>, <span class="hljs-string">&#x27;G&#x27;</span>)<br>g1.<span class="hljs-title function_">addEdge</span>(<span class="hljs-string">&#x27;D&#x27;</span>, <span class="hljs-string">&#x27;G&#x27;</span>)<br>g1.<span class="hljs-title function_">addEdge</span>(<span class="hljs-string">&#x27;D&#x27;</span>, <span class="hljs-string">&#x27;H&#x27;</span>)<br>g1.<span class="hljs-title function_">addEdge</span>(<span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-string">&#x27;E&#x27;</span>)<br>g1.<span class="hljs-title function_">addEdge</span>(<span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-string">&#x27;F&#x27;</span>)<br>g1.<span class="hljs-title function_">addEdge</span>(<span class="hljs-string">&#x27;E&#x27;</span>, <span class="hljs-string">&#x27;I&#x27;</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(g1.<span class="hljs-title function_">toString</span>());<br><br><span class="hljs-keyword">let</span> result = <span class="hljs-string">&#x27;&#x27;</span><br>g1.<span class="hljs-title function_">bfs</span>(g1.<span class="hljs-property">vertexes</span>[<span class="hljs-number">0</span>], <span class="hljs-function">(<span class="hljs-params">v</span>) =&gt;</span> &#123;<br>    result += v + <span class="hljs-string">&#x27;==&#x27;</span><br>&#125;)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result);<br><br><span class="hljs-keyword">let</span> res = <span class="hljs-string">&#x27;&#x27;</span><br>g1.<span class="hljs-title function_">dfs</span>(g1.<span class="hljs-property">vertexes</span>[<span class="hljs-number">0</span>], <span class="hljs-function">(<span class="hljs-params">v</span>) =&gt;</span> &#123;<br>    res += v + <span class="hljs-string">&#x27;==&#x27;</span><br>&#125;)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res);<br></code></pre></td></tr></table></figure>

<h3 id="大O表示法"><a href="#大O表示法" class="headerlink" title="大O表示法"></a>大O表示法</h3><p>![常见的大O表示法](&#x2F;img&#x2F;sample&#x2F;a011&#x2F;15. 常见的大O表示法.png)</p>
<p>大O表示法的推导方法</p>
<blockquote>
<p>用常量1取代运行时间中所有的加法常量<br>在修改后的运行次数函数中，只保留最高项<br>如果最高项存在且常数不为1，则去除与这个项相乘的常数</p>
</blockquote>
<h3 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h3><p>简单排序：</p>
<blockquote>
<p>冒泡排序<br>选择排序<br>插入排序</p>
</blockquote>
<p>高级排序：</p>
<blockquote>
<p>希尔排序</p>
</blockquote>
<p>![希尔排序思路](&#x2F;img&#x2F;sample&#x2F;a011&#x2F;16. 希尔排序思路.png)</p>
<blockquote>
<p>增量 N&#x2F;2</p>
<p>快速排序</p>
</blockquote>
<p>为什么需要排序？</p>
<blockquote>
<p>对数据进行排序后可以更方便的对数据进行操作，如：查找、删除等</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrayList</span> &#123;<br>    array = []<br>    <span class="hljs-title function_">insert</span>(<span class="hljs-params">item</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">array</span>.<span class="hljs-title function_">push</span>(item)<br>    &#125;<br>    <span class="hljs-title function_">toString</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">array</span>.<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;-&#x27;</span>)<br>    &#125;<br>    <span class="hljs-title function_">swap</span>(<span class="hljs-params">a, b</span>) &#123; <span class="hljs-comment">//交换数据</span><br>        <span class="hljs-keyword">let</span> temp = <span class="hljs-variable language_">this</span>.<span class="hljs-property">array</span>[a]<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">array</span>[a] = <span class="hljs-variable language_">this</span>.<span class="hljs-property">array</span>[b]<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">array</span>[b] = temp<br>    &#125;<br>    <span class="hljs-title function_">bubbleSort</span>(<span class="hljs-params"></span>) &#123; <span class="hljs-comment">//冒泡排序  交换最大值   交换次数O(N^2)  比较次数O(N^2)</span><br>        <span class="hljs-keyword">let</span> length = <span class="hljs-variable language_">this</span>.<span class="hljs-property">array</span>.<span class="hljs-property">length</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> j = length - <span class="hljs-number">1</span>; j &gt;= <span class="hljs-number">0</span>; j--) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; j; i++) &#123;<br>                <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">array</span>[i] &gt; <span class="hljs-variable language_">this</span>.<span class="hljs-property">array</span>[i + <span class="hljs-number">1</span>]) &#123;<br>                    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">swap</span>(i, i + <span class="hljs-number">1</span>)<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-title function_">selectionSort</span>(<span class="hljs-params"></span>) &#123; <span class="hljs-comment">//选择排序  选择最小值  交换次数O(N)    比较次数O(N^2)</span><br>        <span class="hljs-keyword">let</span> length = <span class="hljs-variable language_">this</span>.<span class="hljs-property">array</span>.<span class="hljs-property">length</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> j = <span class="hljs-number">0</span>; j &lt; length - <span class="hljs-number">1</span>; j++) &#123;<br>            <span class="hljs-keyword">let</span> min = j <span class="hljs-comment">//从index j 开始查找最小值</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = min + <span class="hljs-number">1</span>; i &lt; length; i++) &#123;<br>                <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">array</span>[min] &gt; <span class="hljs-variable language_">this</span>.<span class="hljs-property">array</span>[i]) &#123;<br>                    min = i<br>                &#125;<br>            &#125;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">swap</span>(min, j)<br>        &#125;<br>    &#125;<br>    <span class="hljs-title function_">insertionSort</span>(<span class="hljs-params"></span>) &#123; <span class="hljs-comment">//插入排序  局部有序   复制次数O(N^2/4) 比较次数O(N^2/4)</span><br>        <span class="hljs-keyword">let</span> length = <span class="hljs-variable language_">this</span>.<span class="hljs-property">array</span>.<span class="hljs-property">length</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">1</span>; i &lt; length; i++) &#123;<br>            <span class="hljs-keyword">let</span> temp = <span class="hljs-variable language_">this</span>.<span class="hljs-property">array</span>[i]<br>            <span class="hljs-keyword">let</span> j = i<br>            <span class="hljs-keyword">while</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">array</span>[j - <span class="hljs-number">1</span>] &gt; temp &amp;&amp; j &gt; <span class="hljs-number">0</span>) &#123; <span class="hljs-comment">//使用while循环因为不知道比较次数</span><br>                <span class="hljs-variable language_">this</span>.<span class="hljs-property">array</span>[j] = <span class="hljs-variable language_">this</span>.<span class="hljs-property">array</span>[j - <span class="hljs-number">1</span>]<br>                j--<br>            &#125;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">array</span>[j] = temp<br>        &#125;<br>    &#125;<br>    <span class="hljs-title function_">shellSort</span>(<span class="hljs-params"></span>) &#123; <span class="hljs-comment">//希尔排序  分组局部有序   最坏情况下时间复杂度为O(N^2)</span><br>        <span class="hljs-keyword">let</span> length = <span class="hljs-variable language_">this</span>.<span class="hljs-property">array</span>.<span class="hljs-property">length</span><br>        <span class="hljs-keyword">let</span> gap = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(length / <span class="hljs-number">2</span>) <span class="hljs-comment">//增量</span><br>        <span class="hljs-keyword">while</span> (gap &gt;= <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = gap; i &lt; length; i++) &#123;<br>                <span class="hljs-keyword">let</span> temp = <span class="hljs-variable language_">this</span>.<span class="hljs-property">array</span>[i]<br>                <span class="hljs-keyword">let</span> j = i<br>                <span class="hljs-keyword">while</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">array</span>[j - gap] &gt; temp &amp;&amp; j &gt; gap - <span class="hljs-number">1</span>) &#123;<br>                    <span class="hljs-variable language_">this</span>.<span class="hljs-property">array</span>[j] = <span class="hljs-variable language_">this</span>.<span class="hljs-property">array</span>[j - gap]<br>                    j -= gap<br>                &#125;<br>                <span class="hljs-variable language_">this</span>.<span class="hljs-property">array</span>[j] = temp<br>            &#125;<br>            gap = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(gap / <span class="hljs-number">2</span>)<br>        &#125;<br>    &#125;<br>    <span class="hljs-title function_">quickSort</span>(<span class="hljs-params"></span>) &#123; <span class="hljs-comment">//快速排序  分而治之  选出一个数字 将小于自己的放在左边 将大于自己的放在右边  平均效率O(N*logN)</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">quick</span>(<span class="hljs-number">0</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">array</span>.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>)<br>    &#125;<br>    <span class="hljs-title function_">quick</span>(<span class="hljs-params">left, right</span>) &#123; <span class="hljs-comment">//快速排序递归函数</span><br>        <span class="hljs-keyword">if</span> (left &gt;= right) <span class="hljs-keyword">return</span><br>        <span class="hljs-keyword">let</span> pivot = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">median</span>(left, right) <span class="hljs-comment">//枢纽</span><br>        <span class="hljs-keyword">let</span> i = left - <span class="hljs-number">1</span><br>        <span class="hljs-keyword">let</span> j = right - <span class="hljs-number">1</span><br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-keyword">while</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">array</span>[++i] &lt; pivot) &#123;&#125;<br>            <span class="hljs-keyword">while</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">array</span>[--j] &gt; pivot) &#123;&#125;<br>            <span class="hljs-keyword">if</span> (i &lt; j) &#123;<br>                <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">swap</span>(i, j)<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">break</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">swap</span>(i, right - <span class="hljs-number">1</span>)<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">quick</span>(left, i - <span class="hljs-number">1</span>)<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">quick</span>(i + <span class="hljs-number">1</span>, right)<br>    &#125;<br>    <span class="hljs-title function_">median</span>(<span class="hljs-params">left, right</span>) &#123; <span class="hljs-comment">//选择中位数，作为快速排序的枢纽</span><br>        <span class="hljs-keyword">let</span> center = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>((left + right) / <span class="hljs-number">2</span>)<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">array</span>[left] &gt; <span class="hljs-variable language_">this</span>.<span class="hljs-property">array</span>[center]) &#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">swap</span>(left, center)<br>        &#125;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">array</span>[center] &gt; <span class="hljs-variable language_">this</span>.<span class="hljs-property">array</span>[right]) &#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">swap</span>(center, right)<br>        &#125;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">array</span>[left] &gt; <span class="hljs-variable language_">this</span>.<span class="hljs-property">array</span>[right]) &#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">swap</span>(left, right)<br>        &#125;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">swap</span>(center, right - <span class="hljs-number">1</span>)<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">array</span>[right - <span class="hljs-number">1</span>]<br>    &#125;<br>&#125;<br><span class="hljs-keyword">let</span> arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>()<br>arr.<span class="hljs-title function_">insert</span>(<span class="hljs-number">29</span>)<br>arr.<span class="hljs-title function_">insert</span>(<span class="hljs-number">56</span>)<br>arr.<span class="hljs-title function_">insert</span>(<span class="hljs-number">1</span>)<br>arr.<span class="hljs-title function_">insert</span>(<span class="hljs-number">100</span>)<br>arr.<span class="hljs-title function_">insert</span>(<span class="hljs-number">12</span>)<br>arr.<span class="hljs-title function_">insert</span>(<span class="hljs-number">79</span>)<br><span class="hljs-comment">// console.log(arr.toString());</span><br><br><span class="hljs-comment">// arr.bubbleSort()</span><br><span class="hljs-comment">// arr.selectionSort()</span><br><span class="hljs-comment">// arr.insertionSort()</span><br><span class="hljs-comment">// arr.shellSort()</span><br>arr.<span class="hljs-title function_">quickSort</span>()<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr.<span class="hljs-title function_">toString</span>());<br></code></pre></td></tr></table></figure>

<hr>
<p>参考视频：<a href="https://www.bilibili.com/video/BV1x7411L7Q7?spm_id_from=333.999.0.0">BV1x7411L7Q7</a></p>
]]></content>
      <categories>
        <category>前端学习</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>前端框架之React</title>
    <url>/2022/07/19/a013-%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6%E4%B9%8BReact/</url>
    <content><![CDATA[<p><strong>版本答案(22.07.19)<code>Hooks + react-router(v6) + reduxjs/toolkit</code></strong></p>
<h3 id="react简介"><a href="#react简介" class="headerlink" title="react简介"></a>react简介</h3><p>react将数据渲染为HTML视图的js库；vue是毛坯房</p>
<p>原生操作DOM繁琐，直接操作DOM会有大量的回流重绘，占用浏览器性能；没有组件化编码方案，代码复用率低</p>
<p>react声明式编码，不用什么事都亲力亲为，只用告诉你应该是怎么样的，不会告诉你具体应该怎么做</p>
<p>使用虚拟DOM和优秀的diffing算法,减少与真实DOM的交互从而减少回流重绘；案例：原生和框架对于数据增加的渲染过程比较</p>
<h3 id="react核心模块"><a href="#react核心模块" class="headerlink" title="react核心模块"></a>react核心模块</h3><ol>
<li><p>babel<br>ES6&#x3D;&gt;ES5 JSX&#x3D;&gt;JS</p>
</li>
<li><p>react-development<br>核心库</p>
</li>
<li><p>react-dom<br>扩展库帮你操作dom</p>
</li>
<li><p>为什么选择使用jsx语法?<br>更加简单的创建虚拟DOM;但是babel会将JSX翻译成原始创建虚拟dom(方式二)的写法，即方式一是方式二的语法糖</p>
</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//方式一</span><br> <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">VDOM</span> = (<span class="hljs-comment">//可缩进写法加小括号</span><br>   <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;title&quot;</span>&gt;</span></span><br><span class="language-xml">     <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Hello, React!<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">   <span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br> )<br><br><span class="hljs-comment">//方式二</span><br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">VDOM</span> = <span class="hljs-title class_">React</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;h1&#x27;</span>,&#123;<span class="hljs-attr">id</span>:<span class="hljs-string">&#x27;title&#x27;</span>&#125;,<span class="hljs-title class_">React</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;span&#x27;</span>,&#123;&#125;,<span class="hljs-string">&#x27;Hello, React!&#x27;</span>))<br></code></pre></td></tr></table></figure>


<h3 id="虚拟dom和真实dom"><a href="#虚拟dom和真实dom" class="headerlink" title="虚拟dom和真实dom"></a>虚拟dom和真实dom</h3><p>本质是Object类型的对象(一般对象)</p>
<p>真实dom身上属性多(document.creatElement);虚拟dom(ReactDOM.creatElement)属性少,因为虚拟dom是react内部用，无需那么多属性</p>
<p>虚拟dom最终会被react转换为真实dom呈现在页面中</p>
<h3 id="JSX语法规则"><a href="#JSX语法规则" class="headerlink" title="JSX语法规则"></a>JSX语法规则</h3><p>JSX全称JavaScript XML，XML早期用于存储和传输数据(微信公众号服务器和开发者服务器还是用的xml)，现在使用json</p>
<p>xml语法：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">student</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>tomatoes<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">age</span>&gt;</span>23<span class="hljs-tag">&lt;/<span class="hljs-name">age</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">student</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p>jsx规则：    </p>
<ol>
<li>定义虚拟dom时，不要写引号;  </li>
<li>标签中混入js表达式要用{},且只能是表达式，js代码语句不能写;<br>let 变量名 &#x3D; 表达式&#x2F;js语句，能接到值的即表达式，函数本身其实也是表达式</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 表达式      </span><br>a;a+b;<span class="hljs-title function_">demo</span>(<span class="hljs-number">1</span>);arr.<span class="hljs-title function_">map</span>();<span class="hljs-keyword">function</span> <span class="hljs-title function_">test</span>(<span class="hljs-params"></span>) &#123;&#125;; <br><br><span class="hljs-comment">//代码        </span><br><span class="hljs-keyword">if</span>()&#123;&#125;;<span class="hljs-keyword">for</span>()&#123;&#125;;<span class="hljs-keyword">switch</span>()&#123;&#125;;<br></code></pre></td></tr></table></figure>

<ol start="3">
<li>样式的类名指定不要用class，要用className；因为class为es6中的类定义关键字; </li>
<li>行内样式要用<code>style=&#123;&#123;key:value&#125;&#125;</code>的形式，外面的{}表示里面是js表达式，里面的{}表示对象.需要连接符表示的样式名要用小驼峰; </li>
<li>虚拟dom只有一个根标签  </li>
<li>标签必须闭合 <code>&lt;input type=&quot;text&quot;/&gt;</code></li>
<li>标签首字母：<br>小写字母开头，则必须与html中的标签一致，若html中没有则报错，如：<code>&lt;good&gt;&lt;/good&gt;</code><br>大写字母开头，则react渲染相应的组件，若组件没有定义则报错，如：<code>&lt;Good&gt;&lt;/Good&gt;</code></li>
<li>react会自动遍历数组，但是不能遍历对象</li>
<li>jsx中的普通函数不要加(),否则在渲染的时候就会调用(和vue不一样)。加了()是将函数的返回值作为事件的回调</li>
</ol>
<h3 id="模块与组件"><a href="#模块与组件" class="headerlink" title="模块与组件"></a>模块与组件</h3><p>模块：向外提供特定功能的js程序，一般就是一个js文件</p>
<p>组件：用来实现局部功能效果的代码和资源的集合(html&#x2F;css&#x2F;js&#x2F;img&#x2F;video&#x2F;font等)</p>
<h3 id="开发者工具"><a href="#开发者工具" class="headerlink" title="开发者工具"></a>开发者工具</h3><p>components：观察网页的组件，以及组件的属性</p>
<p>profiler：记录网站的性能，渲染用了多久，哪个组件加载最慢</p>
<h3 id="函数式组件"><a href="#函数式组件" class="headerlink" title="函数式组件"></a>函数式组件</h3><p>函数命名使用大驼峰;</p>
<p>组件内部的this指向undefined，babel解析时开启了严格模式禁止自定义函数的this指向window;</p>
<p>执行ReactDOM.render后发生了什么？react解析组件标签，找到MyComponent组件;发现组件是函数定义的，随后调用该函数;将返回的虚拟dom转换为真实dom呈现到页面</p>
<h3 id="类式组件"><a href="#类式组件" class="headerlink" title="类式组件"></a>类式组件</h3><p>类基础：  </p>
<blockquote>
<p>类中的constructor在new 实例时调用; </p>
<p>只使用父类的属性则constructor可以省略，相当于自动帮你调用了，实例化时同样需要传入参数；若需添加子类属性则需要constructor且super()必须写且参数个数等于父类属性个数加子类属性个数;  </p>
<p>类中所定义的方法，都是放在了类的原型对象上，供实例去使用;  </p>
<p>子类prototype上的_proto_指向父类的prototype; </p>
<p><strong>super用来调用父类的构造器必须放在当前构造器的最前面（对于this操作的最前面）,就像调用函数类似</strong> </p>
<p>super除了调用父类构造器，还能调用父类上的实例方法，如super.say();</p>
<p>js中构造器的主要作用是用来接收参数，调用this，可以写变量声明，如let a&#x3D;1; </p>
<p>若子类上有和父类相同的属性则实例中子类属性会覆盖父类实例;  </p>
<p>当时子类和父类相同的方法是不会覆盖的，都各自在自己的原型对象上，只是调用时原型链有就近原则;  </p>
<p>类里面的内容：构造器、构造器外面的赋值语句的属性和方法，如a&#x3D;1、方法(写在原型身上)、静态static(写在类身上);</p>
</blockquote>
<p>类式组件继承自React.Component,暂时不用考虑构造器,但是必须要有有返回值的render方法</p>
<p>执行ReactDOM.render后发生了什么？</p>
<blockquote>
<p>react解析组件标签，找到MyComponent组件;发现组件是类定义的，随后new出该类的实例并通过该实例调用(所以render中的this没有问题)到原型上的render方法;将返回的虚拟dom转换为真实dom呈现到页面</p>
</blockquote>
<h3 id="理解state"><a href="#理解state" class="headerlink" title="理解state"></a>理解state</h3><p>复杂组件(类式组件)和简单组件(函数式组件)的判断标准，即有无state；函数式组件连this都没有，但是可以使用hooks</p>
<p>state存在于组件实例对象上</p>
<h3 id="组件三大核心属性"><a href="#组件三大核心属性" class="headerlink" title="组件三大核心属性"></a>组件三大核心属性</h3><p>仅限类式组件</p>
<h4 id="state"><a href="#state" class="headerlink" title="state"></a>state</h4><blockquote>
<p>state最开始定义在React.Component类上值为null，通过继承到了类组件上;类组件通过重新定义从而覆盖了父类上的state，并应用到了每一个组件实例上。 </p>
<p>为什么会this丢失？ 因为this.changeWheather并不是直接调用，而是给了onClick作为回调点击之后才调用。<br><img src="/source/img/sample/a013/this%E4%B8%A2%E5%A4%B1.png" alt="this丢失"></p>
</blockquote>
<blockquote>
<p>注意状态不可直接更改，要借助一个内置的API(setState存在于React.Component的原型上)，setState更新状态是一个合并的动作不是替换;  </p>
<p><strong>类里面可以直接写赋值语句。所有实例都有的属性且值一样，可以不用写在constructor里面；如果是new实例传入的则必须通过constructor接收;</strong>  </p>
<p>简写：state直接写赋值语句，实例方法不用写在原型上而是直接赋值语句+箭头函数;</p>
</blockquote>
<h4 id="props"><a href="#props" class="headerlink" title="props"></a>props</h4><blockquote>
<p>将实例化组件时的组件属性传递到类的props中；疑问：为什么不写super(props)也会值也会传递到React.Component的this.props上？(相当于react帮你自动调用了super(props));</p>
<p>es6扩展运算符(浅拷贝)，可以展开数组(…arr)不能直接展开对象(…obj)，但是能够以字面量形式复制对象({…obj});  </p>
<p>props是只读的;  </p>
<p>构造器写不写没有任何影响，但是如果写的话就要传props否则会出现在构造器中访问this.props&#x3D;&#x3D;undefined；所以说类中的构造器基本都省略。构造器中扩展state则必须传props;</p>
<p>函数式组件没有state、refs，但是可以有props</p>
</blockquote>
<h4 id="refs"><a href="#refs" class="headerlink" title="refs"></a>refs</h4><blockquote>
<p>refs拿到的是真实dom;</p>
<p>不要过度使用ref;</p>
<p>不推荐使用字符串形式的ref，存在一些效率的问题;  </p>
<p>回调函数形式的ref，是往实例自身上挂真实dom;</p>
<p>内联函数形式<code>ref=&#123;c=&gt;&#123;this.xx = c&#125;&#125;</code>，react会在render时自动调用函数，并且将当前节点作为实参传入; </p>
<p><strong>内联函数在页面首次render时会调用一次，但是state改变时render再次调用且将之前的内联函数清除创建一个新的函数实例，所以每次state更新回调两次内联函数,且第一次打印的参数为null，第二次才是当前的真实dom;</strong></p>
<p>class的绑定函数形式的ref，第一次render时调用绑定函数，之后改变state触发render时，组件知道函数为自身函数并且之前调用过，不会创建一个新的函数实例且不再调用函数；</p>
<p>内联函数的问题无关紧要，真实开发常用；  </p>
<p>createRef调用后可以返回一个容器，该容器可以存储被ref所标识的节点,该容器是专人专用,用一个创建一个,虽然繁琐但是强烈推荐  </p>
<p>使用： 字符串形式：<code>this.refs.xxx</code> 回调函数形式：<code>this.xxx</code> createRef形式：<code>this.xxx.current</code></p>
</blockquote>
<h3 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h3><p>通过onXxx属性指定事件处理函数(注意大小写)</p>
<p>react使用的是自定义(合成)事件，而不是原生dom事件，为了更好的兼容性</p>
<p>react中的事件是通过事件委托方式处理的(委托给组件最外层的元素<code>&lt;div&gt;&lt;/div&gt;</code>，冒泡)，为了高效</p>
<p>通过event.target得到的是触发事件的dom元素对象(事件源)，可以避免过度使用ref</p>
<h3 id="收集表单数据"><a href="#收集表单数据" class="headerlink" title="收集表单数据"></a>收集表单数据</h3><p>非受控组件  </p>
<blockquote>
<p>表单提交默认会刷新页面使用e.preventDefault()可阻止提交，一般使用ajax页面无刷新获取数据;<br>点击按钮后取节点的value值(现用现取);</p>
</blockquote>
<p>受控组件  </p>
<blockquote>
<p>随着输入维护状态(类似vue的双向数据绑定)，推荐使用，基本没用ref</p>
</blockquote>
<h3 id="高阶函数和函数柯里化"><a href="#高阶函数和函数柯里化" class="headerlink" title="高阶函数和函数柯里化"></a>高阶函数和函数柯里化</h3><p>一个函数接受的参数是一个函数，或者调用的返回值是一个函数。那么该函数称之为高阶函数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 常见的高阶函数</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">reslove,reject</span>) =&gt;</span> &#123;&#125;)<br><br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">()=&gt;</span>&#123;&#125;, <span class="hljs-number">1000</span>)<br><br>arr.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">item,index</span>) =&gt;</span> &#123;&#125;)<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">saveData</span> = (<span class="hljs-params">type</span>) =&gt; &#123; <span class="hljs-keyword">return</span> <span class="hljs-function">(<span class="hljs-params">event</span>) =&gt;</span> &#123; <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123; [type]: event.<span class="hljs-property">target</span>.<span class="hljs-property">value</span> &#125;)&#125;&#125;<br></code></pre></td></tr></table></figure>

<p>函数柯里化，通过函数调用继续返回函数的方式。实现多次接收参数最后统一处理的函数编码形式。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">sum</span>(<span class="hljs-params">a</span>) &#123;  <br>    <span class="hljs-keyword">return</span><span class="hljs-function">(<span class="hljs-params">b</span>)=&gt;</span> &#123;  <br>        <span class="hljs-keyword">return</span><span class="hljs-function">(<span class="hljs-params">c</span>) =&gt;</span>&#123;  <br>          <span class="hljs-keyword">return</span> a + b +c  <br>        &#125;    <br>    &#125;  <br>&#125;  <br><span class="hljs-title function_">sum</span>(<span class="hljs-number">1</span>)(<span class="hljs-number">2</span>)(<span class="hljs-number">3</span>)<br></code></pre></td></tr></table></figure>

<p>不用柯里化的方式是函数里面返回函数，回调地狱是函数里面调函数</p>
<h3 id="组件的生命周期"><a href="#组件的生命周期" class="headerlink" title="组件的生命周期"></a>组件的生命周期</h3><h4 id="旧生命周期"><a href="#旧生命周期" class="headerlink" title="旧生命周期"></a>旧生命周期</h4><p><img src="/source/img/sample/a013/%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F(%E6%97%A7).png" alt="旧生命周期"></p>
<p>常用：  </p>
<blockquote>
<p>componentDidMount               一般做一些初始化的事，例如：开启定时器、发送网络请求、订阅消息<br>componentWillUnmount            一般做一些收尾的事，例如：关闭定时器、取消订阅消息<br>render                          必须使用  </p>
</blockquote>
<h4 id="新生命周期"><a href="#新生命周期" class="headerlink" title="新生命周期"></a>新生命周期</h4><p><img src="/source/img/sample/a013/%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F(%E6%96%B0).png" alt="新生命周期"></p>
<p>新旧生命周期对比：   </p>
<blockquote>
<p>旧废弃三个(componentWillMount、componentWillUpdate、componentWillRecieveProps)<br>新增加两个(getDerivedStateFromProps、getSnapshotBeforeUpdate)，不常用</p>
</blockquote>
<h3 id="DOM的diffing算法"><a href="#DOM的diffing算法" class="headerlink" title="DOM的diffing算法"></a>DOM的diffing算法</h3><p>diff的最小单位是节点</p>
<h4 id="虚拟DOM中的key的作用："><a href="#虚拟DOM中的key的作用：" class="headerlink" title="虚拟DOM中的key的作用："></a>虚拟DOM中的key的作用：</h4><p>当状态数据发生变化时，react会根据新的数据生成一堆新的虚拟dom，随后进行新虚拟dom和旧虚拟dom的diff比较 </p>
<p>旧虚拟dom中找到与新虚拟dom中相同的key：</p>
<blockquote>
<p>若虚拟dom中的内容没变，直接使用之前的真实dom<br>若虚拟dom中内容变了，则生成新的真实dom，随后替换掉页面中之前的真实dom </p>
</blockquote>
<p>旧虚拟dom中未找到与新虚拟dom中相同的key：根据数据创建新的真实dom，随后渲染到页面</p>
<h4 id="用index作为key可能会引发的问题："><a href="#用index作为key可能会引发的问题：" class="headerlink" title="用index作为key可能会引发的问题："></a>用index作为key可能会引发的问题：</h4><p>对数据进行逆序添加、逆序删除等破坏顺序操作，会产生没有必要的真实dom更新。界面效果没有问题，但效率低。</p>
<p><img src="/source/img/sample/a013/index%E4%BD%9C%E4%B8%BAkey%E9%80%A0%E6%88%90%E4%B8%8D%E5%BF%85%E8%A6%81%E7%9A%84%E7%9C%9F%E5%AE%9Edom%E6%9B%B4%E6%96%B0.png" alt="index作为key造成不必要的真实dom更新"></p>
<p>如果不存在上述情况，使用index作为key是没有问题的</p>
<h3 id="create-react-app"><a href="#create-react-app" class="headerlink" title="create-react-app"></a>create-react-app</h3><h4 id="xxx脚手架"><a href="#xxx脚手架" class="headerlink" title="xxx脚手架"></a>xxx脚手架</h4><blockquote>
<p>用来帮助程序员快速创建一个基于xxx库的模板项目<br>包含了所有需要的配置(语法检查、jsx编译、devserver…)<br>下载好了所有相关依赖<br>可以直接运行一个简单效果</p>
</blockquote>
<p>react提供了一个用于创建react项目的脚手架库：create-react-app；整体架构为react+webpack+es6+eslint</p>
<p>使用脚手架开发项目的特点：模块化、组件化、工程化</p>
<p>创建项目并启动：<code>npm i -g create-react-app =&gt; create-react-app xxx =&gt; cd xxx =&gt; npm start</code>    </p>
<h4 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h4><p>public 静态资源文件(页面、样式、公共图片)  </p>
<blockquote>
<p>  –robots.txt    爬虫规则文件</p>
</blockquote>
<p>src  源文件</p>
<blockquote>
<p>  –App.js        App组件，首字母大写的都是组件<br>  –App.test.js   测试App的，几乎不用<br>  –index.css     公用样式<br>  –index.js      入口文件，和vue中的main.js类似<br>  –logon.svg     dome页面中一直旋转的图<br>  –reportWebVitals.js   记录页面性能<br>  –setupTest.js          组件测试：性能整体测试，模块的单元测试</p>
</blockquote>
<h4 id="todolist案例"><a href="#todolist案例" class="headerlink" title="todolist案例"></a>todolist案例</h4><ol>
<li>vscode代码提示<br>快捷生成组件结构，先进入文件，生成类式组件rcc,生成函数式组件rfc(类似于.vue)，需要安装插件；<br>jsx中html标签提示，在setting.json中加入</li>
</ol>
<figure class="highlight json"><table><tr><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;emmet.includeLanguages&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;javascript&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;javascriptreact&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure>

<ol start="2">
<li><p>可以在子组件中更改父组件中的状态，即将父组件更改自己状态的函数当做props传给子组件；<br>类似于vue中子组件调用this.$emit(‘xxx’,’参数’),或者直接 :fn&#x3D;”fn”,子组件this.fn(‘参数’)</p>
</li>
<li><p>状态在哪里，操作状态的方法就在哪里</p>
</li>
<li><p>checkbox 上使用checked属性，则必须使用onChange事件;defaultChecked只在第一次能用，后面改变勾选和不勾选状态和它无关<br>defaultValue和value的区别同上</p>
</li>
<li><p>动态初始化列表，如何确定将数据放在哪个组件的state中？<br>某个组件使用：放在其自身的state中<br>某些组件使用：放在他们的共同组件state中(状态提升)</p>
</li>
<li><p>父子组件通信：<br>父组件给子组件传递数据，通过props<br>子组件给父组件传递数据，通过props(函数)，子组件通过调用父组件传过来的函数向父组件传参</p>
</li>
</ol>
<h4 id="ajax"><a href="#ajax" class="headerlink" title="ajax"></a>ajax</h4><p><strong>跨域代理</strong><br><img src="/source/img/sample/a013/%E8%B7%A8%E5%9F%9F%E4%BB%A3%E7%90%86%E5%8E%9F%E7%90%86.png" alt="跨域代理"></p>
<p>方式一</p>
<blockquote>
<p>package.json中配置 (这种方式只能配一个代理)<br>“proxy”: “<a href="http://localhost:5000&quot;">http://localhost:5000&quot;</a><br>axios中url写localhost:3000，会自动转发给5000<br>如果请求为3000(public目录下)有的则返回，没有的则找5000,5000也没有则404</p>
</blockquote>
<p>方式二</p>
<blockquote>
<p>在src目录下建立setupProxy.js文件(使用commonjs语法)<br>可以配置多个代理  </p>
</blockquote>
<p>方式三</p>
<blockquote>
<p>后端解决(cors 一劳永逸)</p>
</blockquote>
<h4 id="消息订阅-发布机制"><a href="#消息订阅-发布机制" class="headerlink" title="消息订阅-发布机制"></a>消息订阅-发布机制</h4><p>兄弟(任意)组件通信(传递数据),PubSubJs(类似vue中的eventBus,($on|subscribe)、($emit|publish)、($off|unsubscribe))</p>
<h4 id="fetch"><a href="#fetch" class="headerlink" title="fetch"></a>fetch</h4><p>axios、jquery都是对原生xhr(window自带api)的封装<br>fetch是window自带的api，也是promise风格;老版本浏览器可能不支持<br>xhr和fetch都是用来发送ajax请求<br>参考博客：<a href="https://segmentfault.com/a/1190000003810652">https://segmentfault.com/a/1190000003810652</a></p>
<h4 id="route"><a href="#route" class="headerlink" title="route"></a>route</h4><ol>
<li>前后端路由<blockquote>
<p>单页面应用(SPA)，<strong>点击页面中的链接不会刷新页面或打开新的页面，只会做页面的局部刷新</strong>，单页面多组件；<br>一个路由就是一个映射关系(key|path,value|component(前端路由)或function(后端路由))；<br>后端路由：route.get(path,function(req,res){})；</p>
<p>route的底层是通过操作BOM上的history实现的<br>方式一：直接使用H5退出的history身上的api<br>方式二：hash值(类似于锚点跳转，不会刷新页面，并且有跳转记录)，兼容性好，#号后面的东西不会带给服务器</p>
</blockquote>
</li>
</ol>
<p><img src="/source/img/sample/a013/%E5%90%8E%E7%AB%AF%E8%B7%AF%E7%94%B1.png" alt="后端路由"></p>
<p><img src="/source/img/sample/a013/%E5%89%8D%E7%AB%AF%E8%B7%AF%E7%94%B1%E5%8E%9F%E7%90%86.png" alt="前端路由"></p>
<ol start="2">
<li><p>react-router-dom  </p>
<blockquote>
<p>路由工作过程：点击导航链接引起路径变化，路径变化被路由器检测到进行匹配组件从而展示</p>
<p>封装NavLink，标签内容会以children传到子组件的this.props中，同时子组件可以设置children改变自己的内容<br>需要选中样式时使用NavLink,之后封装MyNavLink；不需要时直接使用Link</p>
<p>使用Routes包裹后相同的路径只匹配一次，后面的不会再匹配，效果同之前的Switch(提高路由匹配效率，单一匹配)</p>
</blockquote>
</li>
<li><p>解决样式丢失问题</p>
<blockquote>
<p>当路由出现多级时，如：&#x2F;a&#x2F;home，之后点击刷新会出现样式丢失，因为此时请求文件路径localhost:3000&#x2F;a&#x2F;css&#x2F;bootstrap.css  </p>
<p>请求文件地址localhost:3000&#x2F;css&#x2F;bootstrap.css,其实是请求public下的&#x2F;css&#x2F;bootstrap.css。  </p>
<p>在不设置跨域的情况下，请求文件在public没有则默认返回public&#x2F;index.html </p>
<p>方式一：直接&#x2F;css&#x2F;bootstrap.css不要.&#x2F;<br>方式二：%PUBLIC_URL%&#x2F;&#x2F;css&#x2F;bootstrap.css(此方法只适用与react脚手架)<br>方式三：仍然使用.&#x2F;css&#x2F;bootstrap.css，index.js中使用HashRouter  </p>
</blockquote>
</li>
<li><p>模糊匹配<br>v6以上版本默认为精准匹配<br>模糊匹配navlink上的to，按&#x2F;从前往后匹配，第一个有则展示相应的route</p>
</li>
<li><p>重定向<br>路由和组件的匹配是从上往下匹配的<br>重定向一般写在路由注册的最下方，当所有路由都无法匹配时，跳转到redirect指定的路由</p>
</li>
<li><p>路由传参</p>
<blockquote>
<p>嵌套路由的匹配是从最外层开始的，当点击home&#x2F;news时匹配<code>&lt;Route path=&quot;/home&quot;&gt;</code>完美匹配，加载路由对应的组件。然后匹配当前组件中对应的路由&#x2F;home&#x2F;news<br>react-router-dom V6- 直接在路由组件的this.props上取<br><a href="https://react-router.docschina.org/web/guides/philosophy">中文文档</a> </p>
<p>react-router-dom V6 在<strong>函数组件</strong>中<br>获取params可以使用useParams；<br>获取search可以使用useSearchParams或useLocation；(使用useLocation需要将字符串转义为对象)<br>获取state可以使用useLocation<br>该方法虽然浏览器地址没有记录(不同的state，history栈中只记录一个)，但是在使用BrowserRouter刷新传递的参数不会丢失<br><strong>HashRouter刷新传递的参数会丢失</strong><br><a href="https://reactrouter.com/docs/en/v6/api">官方文档</a></p>
</blockquote>
</li>
<li><p>编程式路由导航  </p>
<blockquote>
<p>react-router-dom V6- this.props.history.push()<br>只有路由组件中才有history，普通组件中没有，因为路由组件中自动传了路由相关的props；<br>普通组件中使用export default withRouter(组件名) </p>
<p>react-router-dom V6  使用useNavigate<br>hook必须在函数组件内部调用，且在最外层</p>
<p>react-router-dom 没有像vue-router中的集中管理文件router&#x2F;index.js</p>
</blockquote>
</li>
</ol>
<h4 id="react-UI组件库"><a href="#react-UI组件库" class="headerlink" title="react UI组件库"></a>react UI组件库</h4><p>国外：material-ui<br>国内：ant-design</p>
<h3 id="redux"><a href="#redux" class="headerlink" title="redux"></a>redux</h3><p>redux是专门用于状态管理的js库(不是react插件库)<br>集中管理react中多个组件共享的状态，可用于状态共享和组件通信</p>
<h4 id="redux工作原理"><a href="#redux工作原理" class="headerlink" title="redux工作原理"></a>redux工作原理</h4><ol>
<li><p>action<br>包含两个属性(就是一个简单的js对象)<br>type：标识属性，值为字符串，唯一必要属性(初始化时为@@REDUX&#x2F;INIT_a.3.b.4)<br>data：数据属性，值为任意类型，可选属性(初始化时没有该属性) </p>
</li>
<li><p>reducers<br>用于加工状态、初始化状态。加工时，根据旧的state和action，产生新的state的纯函数<br>初始化时previousState为undefined  </p>
</li>
<li><p>store<br>将state、action、reduce联系在一起的对象</p>
</li>
</ol>
<p><img src="/source/img/sample/a013/redux%E5%8E%9F%E7%90%86%E5%9B%BE.png" alt="原理图"></p>
<ol start="4">
<li><p>redux只负责管理状态，状态改变驱动页面展示，需要自己写</p>
</li>
<li><p>异步action<br>就是action的值为函数，store会帮忙调用传过去的函数；<br>异步action中一般都会调用同步action；<br>想要对状态进行操作，但是具体数据靠异步任务返回；<br>异步action不是必须要用的，完全可以自己等待异步任务的结果后再去分发同步action </p>
</li>
<li><p>同步action<br>action的值为Object的一般对象</p>
</li>
</ol>
<h4 id="react-redux"><a href="#react-redux" class="headerlink" title="react-redux"></a>react-redux</h4><p>UI组件：不使用任何redux的api，只负责页面的呈现、交互<br>容器组件：负责和redux通信，将结果交给UI组件<br>mapDispatchToProps也可以是一个对象<br>react-redux不需要监听状态更新驱动页面展示<br>Provider不需要在每个容器组件上通过props传递store，自动给所有容器组件传递store；这样传UI组件的props中没有store<br>数据共享，需要引入combineReducers；redux管理的状态合并为一个对象</p>
<p><img src="/source/img/sample/a013/react-redux%E6%A8%A1%E5%9E%8B%E5%9B%BE.png" alt="react-redux模型图"></p>
<h4 id="纯函数"><a href="#纯函数" class="headerlink" title="纯函数"></a>纯函数</h4><p>只要是同样的输入，必定得到同样的输出<br>不得改写参数数据  所以personReducer中不能preState.push(data)<br>不会产生任何副作用，例如不会调用网络请求(不确定什么时候返回结果)<br>不能调用Date.now()或Math.random()等不纯的方法(同样的输入，没有同样的输出)<br>redux中的reducer必须是一个纯函数</p>
<h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>redux开发者工具 npm i redux-devtools-extension，store中配置composeWithDevTools<br>项目打包运行全局安装npm i serve -g，npm run build之后serve build将build作为根目录快速启动一台服务器，可以看到react图标是蓝色而不是红色</p>
<h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><h4 id="setState"><a href="#setState" class="headerlink" title="setState"></a>setState</h4><p>回调函数在状态更新完毕，页面也更新后(render调用后)才被调用<br>对象式setState是函数式setState的语法糖<br>如果新状态不依赖于原状态——建议使用对象式(不管原来和是多少,点击按钮最终变成99)<br>如果新状态以来于原状态——建议使用函数式<br>使用没那么绝对，都可以用</p>
<h4 id="lazyload"><a href="#lazyload" class="headerlink" title="lazyload"></a>lazyload</h4><p>不使用懒加载，查看开发者工具network，将disable cache勾上，点击切换路由组件没有网络请求，说明网页加载时将所有组件都加载了<br>使用懒加载后，路由组件随用随请求，且只请求一次，后面切换到相同的路由不会重复请求</p>
<h4 id="Hooks"><a href="#Hooks" class="headerlink" title="Hooks"></a>Hooks</h4><p>Hook是react 16.8.0版本增加的新特性&#x2F;新语法，可以让你在函数式组件中使用state以及其他的react特性<br>函数组件相当于类式组件的render执行 1+n次  </p>
<ol>
<li><p>stateHook：  </p>
<blockquote>
<p>可以让函数组件用state状态<br>const[xxx,setxxx] &#x3D; React.useState(初始值)，setxxx用法同类式组件的setState都有两种用法 </p>
</blockquote>
</li>
<li><p>EffectHook：  </p>
<blockquote>
<p>可以让你再函数式组件中执行副作用操作(用于模拟类组件中的生命周期)<br>可以把EffectHook看做componentDidMount、componentDidUpdate、componentWillUnmount的组合 </p>
</blockquote>
</li>
<li><p>RefHook</p>
</li>
</ol>
<h4 id="Fragment"><a href="#Fragment" class="headerlink" title="Fragment"></a>Fragment</h4><p>避免页面结构层级过深，占位标签</p>
<h4 id="Context"><a href="#Context" class="headerlink" title="Context"></a>Context</h4><p>常用于祖孙组件之间的通信<br>在应用开发中一般不用context，一般都用它封装react插件，如：react-redux 的 <code>&lt;Provider store=&#123;store&#125;&gt;</code></p>
<h4 id="组件优化"><a href="#组件优化" class="headerlink" title="组件优化"></a>组件优化</h4><p>component的两个问题：  </p>
<blockquote>
<p>只要执行setState()即使不改变状态，组件也会重新render()<br>当前组件重新render()，其子组件也会重新render()，导致效率低</p>
</blockquote>
<p>解决：<br>方式一：shouldComponentUpdate  </p>
<blockquote>
<p>在shouldComponentUpdate中比较新旧state或props，如果有变化返回true，没有则返回false</p>
</blockquote>
<p>方式二：PureComponent(常用)  </p>
<blockquote>
<p>PureComponent重写了shouldComponentUpdate，只有state或props有变化时才返回true<br>只是进行了state和props的浅比较，如果只是数据对象内部数据变了，数据引用地址没变，返回false；正常更新state也是同理<br>即：this.setState(新对象)，如果新对象为空返回false，如果新对象是this.state的地址应用同样返回false<br>所以说不要直接修改state数据，而是要产生新数据</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//如：</span><br>state = &#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;rose&#x27;</span>&#125;<br>    <span class="hljs-keyword">const</span> obj = <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span><br>    obj.<span class="hljs-property">name</span> = <span class="hljs-string">&#x27;jack&#x27;</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(obj)<br><br><span class="hljs-comment">//又如：</span><br>state=&#123;<span class="hljs-attr">arr</span>:[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>]&#125;<br>      <span class="hljs-keyword">const</span> &#123;arr&#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span><br>      arr.<span class="hljs-title function_">unshift</span>(<span class="hljs-number">3</span>)<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;arr&#125;)<br></code></pre></td></tr></table></figure>

<p>childrenProps：son向grandson通过props传递自身state不方便      <code>&lt;Son&gt;&lt;GrandSon/&gt;&lt;/Son&gt;</code>              <code>this.props.children</code><br>renderProps：类似于vue中的插槽                                <code>&lt;Son render=&#123;(xxx)=&gt;&lt;GrandSon xxx=&#123;xxx&#125;/&gt;&#125;/&gt;</code>     <code>this.props.render(this.state.xxx)</code></p>
<p>错误边界  </p>
<blockquote>
<p>将错误控制在一定范围内，子组件出错不会影响外层的组件，使用getDerivedStateFromError写在子组件的父组件里<br>配合componentDidCatch统计错误，反馈给后台<br>只适用于生产环境，开发环境还是会报错(20220210两处都能用)<br>只能捕获后代组件生命周期产生的错误，不能捕获自己组件产生的错误和其他组件在合成事件、定时器中产生的错误</p>
</blockquote>
<p>组件通信<br>组件之间相互传递东西(状态、修改状态的方法)  </p>
<blockquote>
<p>父子组件：props<br>兄弟组件：消息订阅-发布、集中管理(redux)<br>祖孙组件：消息订阅-发布、集中管理(redux)、conText(开发用的较少，主要用来封装插件)</p>
</blockquote>
<h3 id="router-v6"><a href="#router-v6" class="headerlink" title="router-v6"></a>router-v6</h3><h4 id="Routes与Route"><a href="#Routes与Route" class="headerlink" title="Routes与Route"></a>Routes与Route</h4><p><code>&lt;Routes&gt;</code>必须要包裹<code>&lt;Route&gt;</code>使用<br><code>&lt;Route&gt;</code>相当于一个if语句，如果其路径与当前url匹配，则呈现其对应的组件<br>当url发生变化时，<code>&lt;Routes&gt;</code>会查看子<code>&lt;Route&gt;</code>找到最佳匹配并呈现组件<br><code>&lt;Route&gt;</code>也可以嵌套使用，且可配合<code>useRoutes()</code>配置路由表，但需要通过<code>&lt;Outlet&gt;</code>来渲染其子路由</p>
<h4 id="Navgate"><a href="#Navgate" class="headerlink" title="Navgate"></a>Navgate</h4><p>只要<Navgate>被渲染，就会修改url，切换视图</p>
<h4 id="Outlet"><a href="#Outlet" class="headerlink" title="Outlet"></a>Outlet</h4><p>指定路由组件的展示位置</p>
<h4 id="路由传参"><a href="#路由传参" class="headerlink" title="路由传参"></a>路由传参</h4><p>params参数，可通过 useParams,useMatch 两种方式获取<br>search参数，可通过 useSearchParams,useLocation 两种方式获取</p>
<h4 id="编程式路由"><a href="#编程式路由" class="headerlink" title="编程式路由"></a>编程式路由</h4><p>使用 useNavigate hook</p>
<h4 id="useInRouterContext"><a href="#useInRouterContext" class="headerlink" title="useInRouterContext()"></a>useInRouterContext()</h4><p>如果组件在<code>&lt;Router&gt;</code>(BrowserRouter、HashRouter)的上下文中呈现，则useInRouterContext钩子返回true，否则返回false</p>
<h4 id="useNavigationType"><a href="#useNavigationType" class="headerlink" title="useNavigationType()"></a>useNavigationType()</h4><p>返回当前的导航类型，用户是如何来到当前页面的<br>返回值，POP(刷新)、PUSH、REPLACE</p>
<h4 id="useOutlet"><a href="#useOutlet" class="headerlink" title="useOutlet()"></a>useOutlet()</h4><p>呈现当前组件中要渲染的嵌套路由<br>如果嵌套路由没有挂载，则为null；如果已经挂载，则为路由对象</p>
<h4 id="useResolvedPath"><a href="#useResolvedPath" class="headerlink" title="useResolvedPath()"></a>useResolvedPath()</h4><p>给定一个url，解析其中的path、search、hash值</p>
<h3 id="React中使用ts"><a href="#React中使用ts" class="headerlink" title="React中使用ts"></a>React中使用ts</h3><p>创建支持ts的react项目<br><code>npx create-react-app 项目名称 --template=typescript</code><br><code>yarn create react-app 项目名称 --template=typescript</code></p>
<p>在已有的项目中使用ts<br><a href="https://create-react-app.bootcss.com/docs/adding-typescript">参考文档</a></p>
<h4 id="文件变化说明"><a href="#文件变化说明" class="headerlink" title="文件变化说明"></a>文件变化说明</h4><p>tsconfig.json，指定ts的编译选项，如：编译时是否移除注释；也可以手动生成tsc –init<br>react组件的文件扩展名变为.tsx<br>src目录下新增react-app-env.d.ts，react项目默认的类型声明文件</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">/// &lt;reference types=&quot;react-scripts&quot; /&gt;</span><br></code></pre></td></tr></table></figure>

<blockquote>
<p>三斜线指令，指定依赖的其他类型声明文件，types表示依赖的类型声明文件包的名称，告诉ts帮我加载react-scripts这个包提供的类型声明文件<br>react-scripts中又依赖了其他的类型声明文件(react、react-dom、node)，声明了图片、样式等模块的类型<br>react项目中会自动加载src下的.d.ts文件，通过修改tsconfig.json中的include配置；react项目中会自动处理.tsx文件</p>
</blockquote>
<h4 id="tsconfig-json"><a href="#tsconfig-json" class="headerlink" title="tsconfig.json"></a>tsconfig.json</h4><p><a href="https://www.typescriptlang.org/tsconfig">配置参考文档</a><br>可通过鼠标移入的方式查看解释说明</p>
<figure class="highlight json"><table><tr><td class="code"><pre><code class="hljs json">  <span class="hljs-attr">&quot;compilerOptions&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span>                              <span class="hljs-comment">//编译选项</span><br>    <span class="hljs-attr">&quot;target&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;es5&quot;</span><span class="hljs-punctuation">,</span>                                <span class="hljs-comment">//生成代码的语言版本</span><br>    <span class="hljs-attr">&quot;lib&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span>                                        <span class="hljs-comment">//指定要包含在编译中的library</span><br>    <span class="hljs-string">&quot;dom&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-string">&quot;dom.iterable&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-string">&quot;esnext&quot;</span><br>    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;allowJs&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span><span class="hljs-punctuation">,</span>                                <span class="hljs-comment">//允许ts编译器编译js文件</span><br>    <span class="hljs-attr">&quot;skipLibCheck&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span><span class="hljs-punctuation">,</span>                           <span class="hljs-comment">//跳过类型声明文件的所写类型的检查，可能会有类型准确性的问题</span><br>    <span class="hljs-attr">&quot;esModuleInterop&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span><span class="hljs-punctuation">,</span>                        <span class="hljs-comment">//es模块互操作，屏蔽EsModule和commonJS之间的差异</span><br>    <span class="hljs-attr">&quot;allowSyntheticDefaultImports&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span><span class="hljs-punctuation">,</span>           <span class="hljs-comment">//允许import a form &#x27;b，即使模块中没有显示指定export导出</span><br>    <span class="hljs-attr">&quot;strict&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span><span class="hljs-punctuation">,</span>                                 <span class="hljs-comment">//开启严格模式</span><br>    <span class="hljs-attr">&quot;forceConsistentCasingInFileNames&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span><span class="hljs-punctuation">,</span>       <span class="hljs-comment">//对文件名称强制区分大小写</span><br>    <span class="hljs-attr">&quot;noFallthroughCasesInSwitch&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span><span class="hljs-punctuation">,</span>             <span class="hljs-comment">//为switch语句启动错误报告</span><br>    <span class="hljs-attr">&quot;module&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;esnext&quot;</span><span class="hljs-punctuation">,</span>                             <span class="hljs-comment">//生成js代码的模块化标准</span><br>    <span class="hljs-attr">&quot;moduleResolution&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;node&quot;</span><span class="hljs-punctuation">,</span>                     <span class="hljs-comment">//模块查找策略</span><br>    <span class="hljs-attr">&quot;resolveJsonModule&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span><span class="hljs-punctuation">,</span>                      <span class="hljs-comment">//允许导入.json的模块</span><br>    <span class="hljs-attr">&quot;isolatedModules&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span><span class="hljs-punctuation">,</span>                        <span class="hljs-comment">//是否将没有import|export的文件视为全局脚本文件</span><br>    <span class="hljs-attr">&quot;noEmit&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span><span class="hljs-punctuation">,</span>                                 <span class="hljs-comment">//编译时不生成任何文件，只进行类型检查；</span><br>                                                    <span class="hljs-comment">//开启时使用babel进行类型转换，通过babel-loader处理ts文件</span><br>    <span class="hljs-attr">&quot;jsx&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;react-jsx&quot;</span>                              <span class="hljs-comment">//指定将jsx编译成什么形式</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;include&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span>                                        <span class="hljs-comment">//指定允许ts处理的目录</span><br>    <span class="hljs-string">&quot;src&quot;</span><br><span class="hljs-punctuation">]</span><br></code></pre></td></tr></table></figure>

<p>可通过命令行为文件指定编译配置，tsc .&#x2F;index.ts –target es6，这种方式将忽略tsconfig.json文件<br>直接使用tsc命令，会将当前目录下的ts文件按照tsconfig.json转换成js文件<br>推荐使用tscofig.json配置文件</p>
<h4 id="react中的常用类型"><a href="#react中的常用类型" class="headerlink" title="react中的常用类型"></a>react中的常用类型</h4><p>在不使用ts时，可以使用prop-types，为react组件提供类型检查<br>ts项目中，推荐使用ts实现组件类型校验，代替prop-types<br>react项目通过@types&#x2F;react、@types&#x2F;react-dom类型声明包，来提供类型。CRA已帮我们安装(react-app-env.d.ts)，直接使用即可</p>
<h4 id="函数组件"><a href="#函数组件" class="headerlink" title="函数组件"></a>函数组件</h4><p>组件类型、属性类型、属性默认值(解构时提供默认值)、事件和事件对象类型<br>如何知道e的类型<code>onChange=&#123;e=&gt;&#123;&#125;&#125;</code>，将鼠标放在e上，利用ts的类型推断查看事件对象类型</p>
<h4 id="类式组件-1"><a href="#类式组件-1" class="headerlink" title="类式组件"></a>类式组件</h4><p>组件类型、属性类型、属性默认值(解构时提供默认值)、状态类型、事件</p>
<hr>
<p>参考文档：<br><a href="https://react.docschina.org/docs/getting-started.html">react文档</a><br><a href="https://reactrouter.com/docs/en/v6">react-router</a><br><a href="https://react-redux.js.org/">react-redux</a><br><a href="http://cn.redux.js.org/introduction/getting-started">redux</a></p>
<p>参考视频：<a href="https://www.bilibili.com/video/BV1wy4y1D7JT?spm_id_from=333.999.0.0">BV1wy4y1D7JT</a></p>
]]></content>
      <categories>
        <category>前端学习</category>
      </categories>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>前端框架之vue</title>
    <url>/2022/07/20/a014-%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6%E4%B9%8Bvue/</url>
    <content><![CDATA[<p><strong>版本答案（22.07.20）<code>&lt;script setup&gt; + typescript + vite + vloar + pinia</code></strong></p>
<h3 id="vue3项目目录"><a href="#vue3项目目录" class="headerlink" title="vue3项目目录"></a>vue3项目目录</h3><p>主入口文件main.ts<br>main.ts中create方法，创建对应的应用，产生应用的实例对象<br>组件模板可以没有根标签<br>组件中defineComponent方法，定义组件，内部可以传入该组件的配置对象，配置对象和vue2的写法一样 </p>
<h3 id="Composition-API-常用部分"><a href="#Composition-API-常用部分" class="headerlink" title="Composition API(常用部分)"></a>Composition API(常用部分)</h3><p><strong>setup</strong><br>只在初始化时执行一次，函数中如果返回对象(包括属性和方法)，则当前组件的模板中可以直接使用；<br>setup在beforeCreate之前执行,且只执行一次,当前组件实例还没有创建，组件实例对象this不能用；<br>返回对象中的属性会与data函数返回对象的属性合并成为组件对象的属性；<br>返回对象中的方法会与methods中的方法合并成为组件对象的方法；<br>如果有重名setup优先(实际使用报错:有重复属性)；<br>methods可以访问setup中的方法，但是setup不能访问methods，一般不要混合使用；<br>setup加了async，返回promise对象，则模板中不能使用promise对象中的属性或方法。</p>
<p>setup(props,context)参数：<br>props：是一个对象，父向子传的并且在子中用props接收的数据<br>context：</p>
<blockquote>
<p>attrs：当前组件标签上且没有用props接收的数据<br>emit：分发事件<br>slots：插槽</p>
</blockquote>
<p><strong>ref</strong><br>定义一个<strong>基本类型的响应式的数据</strong>，返回的是ref对象.对象中有一个value，如果要对数据进行操作需要通过ref对象.value的方式；<br>组件模板中展示数据是不需要ref对象.value的方式,内部解析模板是自动添加.value；<br>类型是Ref类型；</p>
<p><strong>reactive</strong><br>定义多个数据的响应式,<strong>复杂类型的响应式数据</strong>.接收一个普通对象(目标对象)然后返回该目标对象的代理对象；<br>直接更改普通对象中的成员值，是不响应的；<br>类型是Proxy类型；<br>响应式的影响是深层次的，会影响内部嵌套对象的属性；<br>内部基于es6的Proxy实现；</p>
<p><strong>ref和reactive细节</strong><br>如果用ref代理对象&#x2F;数组，内部会自动将value转换为reactive的代理对象；<br>ref实现原理：通过给value添加getter&#x2F;setter实现数据响应式；<br>reactive实现原理：递归深度响应式，通过Proxy实现目标对象数据的劫持，通过Reflect操作对象内部数据；<br>vue3响应式原理，通过Proxy和Reflect</p>
<h4 id="计算属性和watch"><a href="#计算属性和watch" class="headerlink" title="计算属性和watch"></a>计算属性和watch</h4><p>计算属性如果值传入一个回调，则表示get；<br>计算属性返回的是一个ref对象；<br>watch可以监视多个数据(数据必须是响应式数据)，监视非响应式数据需要回调函数写法；</p>
<h4 id="生命周期对比"><a href="#生命周期对比" class="headerlink" title="生命周期对比"></a>生命周期对比</h4><p>vue3.x中使用组合式api；<br>beforeCreate和Created使用setup代替；<br>3.x中的同级生命周期要比2.x中的执行更快；</p>
<h4 id="自定义hook函数"><a href="#自定义hook函数" class="headerlink" title="自定义hook函数"></a>自定义hook函数</h4><p>类似于mixin；<br>请求的json数据需要放在public中，请求时&#x2F;data&#x2F;data.json不用补全相对路径；</p>
<h4 id="toRefs的使用"><a href="#toRefs的使用" class="headerlink" title="toRefs的使用"></a>toRefs的使用</h4><p>toRefs可以把一个响应式对象转换为普通对象，该普通对象的每一个属性都是ref对象</p>
<h3 id="Composition-API-其他部分"><a href="#Composition-API-其他部分" class="headerlink" title="Composition API(其他部分)"></a>Composition API(其他部分)</h3><h4 id="shallowReactive与shallowRef"><a href="#shallowReactive与shallowRef" class="headerlink" title="shallowReactive与shallowRef"></a>shallowReactive与shallowRef</h4><p>shallowReactive：只处理代理对象最外层属性的响应式，浅响应式(实际使用失效)；<br>shallowRef：只处理value的响应式，不进行ref代理对象的响应式(实际使用失效)；<br>一般使用reactive和ref即可；</p>
<h4 id="readonly和shallowReadonly"><a href="#readonly和shallowReadonly" class="headerlink" title="readonly和shallowReadonly"></a>readonly和shallowReadonly</h4><p>readonly：深度只读，接收一个响应式对象；<br>shallowReadonly：浅只读，深层的属性可以更改。</p>
<h4 id="toRaw和markRaw"><a href="#toRaw和markRaw" class="headerlink" title="toRaw和markRaw"></a>toRaw和markRaw</h4><p>toRaw：返回由reactive和readonly方法转换成响应式的普通对象；<br>markRaw：标记一个对象，使其永远不会转换为代理对象，返回对象本身。</p>
<h4 id="toRef的特点及使用"><a href="#toRef的特点及使用" class="headerlink" title="toRef的特点及使用"></a>toRef的特点及使用</h4><p>toRef与响应式数据是关联的，不管改变哪个数据都会改变；将普通数据变为Ref类型数据；<br>ref是拷贝一份当前响应式数据，互不影响；</p>
<h4 id="customRef的使用"><a href="#customRef的使用" class="headerlink" title="customRef的使用"></a>customRef的使用</h4><p>防抖案例</p>
<h4 id="provide和injec"><a href="#provide和injec" class="headerlink" title="provide和injec"></a>provide和injec</h4><p>跨层级组件通信</p>
<h4 id="响应式数据的判断"><a href="#响应式数据的判断" class="headerlink" title="响应式数据的判断"></a>响应式数据的判断</h4><p>isRef：判断是否为ref对象；<br>isReactive：是否为reactive创建的响应式代理；<br>isReadonly：是否为readonly创建的只读代理；<br>isProxy：检查是否为reactive和readonly创建的代理；</p>
<h3 id="新组件"><a href="#新组件" class="headerlink" title="新组件"></a>新组件</h3><p>Fragment(片段)：</p>
<blockquote>
<p>组件可以没有根标签，内部会将多个标签包含在Fragment虚拟元素中<br>减少标签层级，减少内存占用</p>
</blockquote>
<p>Teleport(瞬移)：提供了一种方法，让组件在父组件外的标签下显示</p>
<p>Suspense(不确定的)：应用程序在等待异步组件时渲染一些后备内容，可以让我们创建一个平滑的用户体验</p>
<h3 id="组件通信"><a href="#组件通信" class="headerlink" title="组件通信"></a>组件通信</h3><p>父向子传值props；<br>子向父传值emit；<br>后代调用父的方法，父通过props将自己的方法传给后代，后代调用。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol>
<li>2020年9月发布正式版</li>
<li>Vue3支持大部分Vue2的特性</li>
<li>Vue3设计了一套强大的Composition API代替了Vue2中的Option API，复用性更好</li>
<li>更好的支持ts</li>
<li>Vue3使用了Proxy配合Reflect代替了Vue2中的Object.defineProperty()方法数据响应式</li>
<li>重写了虚拟DOM，速度更快</li>
<li>新的组件：Fragment(片段)、Teleport(瞬移)、Suspense(不确定)</li>
<li>设计了新的脚手架工具vite</li>
</ol>
<hr>
<p>官方文档：<a href="https://v3.cn.vuejs.org/">vue</a></p>
<p>参考视频：<a href="https://www.bilibili.com/video/BV1ra4y1H7ih">BV1ra4y1H7ih</a>  <a href="https://www.bilibili.com/video/BV1BA4y1X7bp?spm_id_from=333.1007.top_right_bar_window_custom_collection.content.click&vd_source=1b26e7eb1ec7cfea25ba7eb77782eb66">BV19P4y1g7Vp</a></p>
]]></content>
      <categories>
        <category>前端学习</category>
      </categories>
      <tags>
        <tag>vue3</tag>
      </tags>
  </entry>
  <entry>
    <title>electron构建跨平台桌面应用</title>
    <url>/2022/07/22/a015-electron%E6%9E%84%E5%BB%BA%E8%B7%A8%E5%B9%B3%E5%8F%B0%E6%A1%8C%E9%9D%A2%E5%BA%94%E7%94%A8/</url>
    <content><![CDATA[<h3 id="electron-vue应用自动更新"><a href="#electron-vue应用自动更新" class="headerlink" title="electron-vue应用自动更新"></a>electron-vue应用自动更新</h3><ol>
<li>安装 npm i electron-updater –save<br>npm包版本：</li>
</ol>
<figure class="highlight json"><table><tr><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;vue&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^2.5.16&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;vue-electron&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^1.0.6&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;electron-updater&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^4.3.0&quot;</span><span class="hljs-punctuation">,</span><br></code></pre></td></tr></table></figure>

<ol start="2">
<li>package.json build下添加</li>
</ol>
<figure class="highlight json"><table><tr><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;nsis&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;perMachine&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">false</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;allowToChangeInstallationDirectory&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">false</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;runAfterFinish&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;publish&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;provider&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;generic&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;url&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;https://csfile.ossxrcloud.net/moon&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br></code></pre></td></tr></table></figure>

<ol start="3">
<li>util&#x2F;update.js</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; autoUpdater &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;electron-updater&#x27;</span><br><span class="hljs-keyword">import</span> &#123; ipcMain &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;electron&#x27;</span><br><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>)<br><span class="hljs-keyword">let</span> mainWindow = <span class="hljs-literal">null</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">updateHandle</span>(<span class="hljs-params"><span class="hljs-variable language_">window</span>, feedUrl</span>) &#123;<br>    mainWindow = <span class="hljs-variable language_">window</span>;<br>    <span class="hljs-keyword">let</span> message = &#123;<br>        <span class="hljs-attr">error</span>: <span class="hljs-string">&#x27;检查更新出错&#x27;</span>,<br>        <span class="hljs-attr">checking</span>: <span class="hljs-string">&#x27;正在检查更新……&#x27;</span>,<br>        <span class="hljs-attr">updateAva</span>: <span class="hljs-string">&#x27;检测到新版本，正在下载……&#x27;</span>,<br>        <span class="hljs-attr">updateNotAva</span>: <span class="hljs-string">&#x27;现在使用的就是最新版本，不用更新&#x27;</span>,<br>    &#125;;<br>    <span class="hljs-comment">// autoUpdater.autoDownload = false</span><br>    <span class="hljs-comment">//设置更新包的地址</span><br>    autoUpdater.<span class="hljs-title function_">setFeedURL</span>(feedUrl);<br>    <span class="hljs-comment">//监听升级失败事件</span><br>    autoUpdater.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;error&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">error</span>) &#123;<br>        <span class="hljs-title function_">sendUpdateMessage</span>(&#123;<br>            <span class="hljs-attr">cmd</span>: <span class="hljs-string">&#x27;error&#x27;</span>,<br>            <span class="hljs-attr">message</span>: error<br>        &#125;)<br>    &#125;);<br>    <span class="hljs-comment">//监听开始检测更新事件</span><br>    autoUpdater.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;checking-for-update&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">message</span>) &#123;<br>        <span class="hljs-title function_">sendUpdateMessage</span>(&#123;<br>            <span class="hljs-attr">cmd</span>: <span class="hljs-string">&#x27;checking-for-update&#x27;</span>,<br>            <span class="hljs-attr">message</span>: message<br>        &#125;)<br>    &#125;);<br>    <span class="hljs-comment">//监听发现可用更新事件</span><br>    autoUpdater.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;update-available&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">message</span>) &#123;<br>        <span class="hljs-comment">//先删除当前文件夹及其文件</span><br>        <span class="hljs-title function_">deleteall</span>(<span class="hljs-string">&#x27;C:/Users/Administrator/AppData/Local/moonbox-updater/pending&#x27;</span>)<br>        <span class="hljs-title function_">sendUpdateMessage</span>(&#123;<br>            <span class="hljs-attr">cmd</span>: <span class="hljs-string">&#x27;update-available&#x27;</span>,<br>            <span class="hljs-attr">message</span>: message<br>        &#125;)<br>    &#125;);<br><br>    <span class="hljs-comment">//监听没有可用更新事件</span><br>    autoUpdater.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;update-not-available&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">message</span>) &#123;<br>        <span class="hljs-title function_">sendUpdateMessage</span>(&#123;<br>            <span class="hljs-attr">cmd</span>: <span class="hljs-string">&#x27;update-not-available&#x27;</span>,<br>            <span class="hljs-attr">message</span>: message<br>        &#125;)<br>    &#125;);<br><br>    <span class="hljs-comment">// 更新下载进度事件</span><br>    autoUpdater.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;download-progress&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">progressObj</span>) &#123;<br>        <span class="hljs-title function_">sendUpdateMessage</span>(&#123;<br>            <span class="hljs-attr">cmd</span>: <span class="hljs-string">&#x27;download-progress&#x27;</span>,<br>            <span class="hljs-attr">message</span>: progressObj<br>        &#125;)<br>        mainWindow.<span class="hljs-property">webContents</span>.<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;downloadProgress&#x27;</span>, progressObj)<br>    &#125;);<br><br>    <span class="hljs-comment">//监听下载完成事件</span><br>    autoUpdater.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;update-downloaded&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">event, releaseNotes, releaseName, releaseDate, updateUrl</span>) &#123;<br>        <span class="hljs-title function_">sendUpdateMessage</span>(&#123;<br>            <span class="hljs-attr">cmd</span>: <span class="hljs-string">&#x27;update-downloaded&#x27;</span>,<br>            <span class="hljs-attr">message</span>: &#123;<br>                releaseNotes,<br>                releaseName,<br>                releaseDate,<br>                updateUrl<br>            &#125;<br>        &#125;)<br>        <span class="hljs-comment">//退出并安装更新包</span><br>        autoUpdater.<span class="hljs-title function_">quitAndInstall</span>();<br>    &#125;);<br><br>    ipcMain.<span class="hljs-title function_">on</span>(<span class="hljs-string">&quot;checkForUpdate&quot;</span>, <span class="hljs-function">(<span class="hljs-params">e, arg</span>) =&gt;</span> &#123;<br>        <span class="hljs-comment">//组件created执行自动更新检查</span><br>        autoUpdater.<span class="hljs-title function_">checkForUpdates</span>();<br>    &#125;)<br><br>    ipcMain.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;downloadUpdate&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-comment">//点击更新按钮</span><br>        autoUpdater.<span class="hljs-title function_">downloadUpdate</span>()<br>    &#125;)<br>&#125;<br><br><span class="hljs-comment">//给渲染进程发送消息</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">sendUpdateMessage</span>(<span class="hljs-params">text</span>) &#123;<br>    mainWindow.<span class="hljs-property">webContents</span>.<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;message&#x27;</span>, text)<br>&#125;<br><br><span class="hljs-comment">//更新时删除文件夹及其文件</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">deleteall</span>(<span class="hljs-params">path</span>) &#123;<br>    <span class="hljs-keyword">var</span> files = [];<br>    <span class="hljs-keyword">if</span> (fs.<span class="hljs-title function_">existsSync</span>(path)) &#123;<br>        files = fs.<span class="hljs-title function_">readdirSync</span>(path);<br>        files.<span class="hljs-title function_">forEach</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">file, index</span>) &#123;<br>            <span class="hljs-keyword">var</span> curPath = path + <span class="hljs-string">&quot;/&quot;</span> + file;<br>            <span class="hljs-keyword">if</span> (fs.<span class="hljs-title function_">statSync</span>(curPath).<span class="hljs-title function_">isDirectory</span>()) &#123; <span class="hljs-comment">// recurse</span><br>                <span class="hljs-title function_">deleteall</span>(curPath);<br>            &#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// delete file</span><br>                fs.<span class="hljs-title function_">unlinkSync</span>(curPath);<br>            &#125;<br>        &#125;);<br>        fs.<span class="hljs-title function_">rmdirSync</span>(path);<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>

<ol start="4">
<li>main&#x2F;index.js 主进程</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123;<br>    updateHandle<br>&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../renderer/utils/update&#x27;</span><br><br><span class="hljs-comment">//检测版本更新</span><br><span class="hljs-keyword">let</span> feedUrl = <span class="hljs-string">&quot;https://csfile.ossxrcloud.net/moon&quot;</span>;<br><span class="hljs-title function_">updateHandle</span>(mainWindow, feedUrl);<br></code></pre></td></tr></table></figure>

<ol start="5">
<li>.vue文件</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">&lt;template&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;homeview&quot;</span>&gt;</span></span><br><span class="language-xml">     <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;update-model&quot;</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;updateModal.updateShow&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mask&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;wrap&quot;</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;title&quot;</span>&gt;</span></span><br><span class="language-xml">            更新中...(&#123;&#123; updateModal.downloadPercent + &quot;%&quot; &#125;&#125;)</span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;update-progress&quot;</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">Progress</span></span></span><br><span class="hljs-tag"><span class="language-xml">              <span class="hljs-attr">:percent</span>=<span class="hljs-string">&quot;updateModal.downloadPercent&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">              <span class="hljs-attr">:stroke-width</span>=<span class="hljs-string">&quot;8&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">              <span class="hljs-attr">:stroke-color</span>=<span class="hljs-string">&quot;[&#x27;#00C9FF&#x27;, &#x27;#2D6FFF&#x27;]&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">              <span class="hljs-attr">hide-info</span></span></span><br><span class="hljs-tag"><span class="language-xml">            /&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">     <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> &#123; shell, ipcRenderer &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;electron&quot;</span>;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">return</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-comment">//自动更新</span></span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">updateModal</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">downloadPercent</span>: <span class="hljs-number">0</span>,</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">updateShow</span>: <span class="hljs-literal">false</span>,</span></span><br><span class="language-javascript"><span class="language-xml">      &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;,</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-title function_">created</span>(<span class="hljs-params"></span>) &#123; </span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">//自动更新</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">listenUpdate</span>();</span></span><br><span class="language-javascript"><span class="language-xml">    ipcRenderer.<span class="hljs-title function_">send</span>(<span class="hljs-string">&quot;checkForUpdate&quot;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">&#125;,</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-attr">methods</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">//自动更新</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-title function_">listenUpdate</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      ipcRenderer.<span class="hljs-title function_">on</span>(<span class="hljs-string">&quot;message&quot;</span>, <span class="hljs-function">(<span class="hljs-params">event, arg</span>) =&gt;</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// console.log(arg);</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;update-available&quot;</span> == arg.<span class="hljs-property">cmd</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-variable language_">this</span>.<span class="hljs-property">updateModal</span>.<span class="hljs-property">updateShow</span> = <span class="hljs-literal">true</span>;</span></span><br><span class="language-javascript"><span class="language-xml">        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;download-progress&quot;</span> == arg.<span class="hljs-property">cmd</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-variable language_">this</span>.<span class="hljs-property">updateModal</span>.<span class="hljs-property">downloadPercent</span> = <span class="hljs-built_in">parseInt</span>(arg.<span class="hljs-property">message</span>.<span class="hljs-property">percent</span>);</span></span><br><span class="language-javascript"><span class="language-xml">        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;error&quot;</span> == arg.<span class="hljs-property">cmd</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-comment">// this.updateModal.updateErrorShow = true;</span></span></span><br><span class="language-javascript"><span class="language-xml">        &#125;</span></span><br><span class="language-javascript"><span class="language-xml">      &#125;);</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure>

<h3 id="应用打包踩坑"><a href="#应用打包踩坑" class="headerlink" title="应用打包踩坑"></a>应用打包踩坑</h3><ol>
<li>配置项 <blockquote>
<p>打包文件时将dist和release清除干净，否则有些项目的配置会将dist的剩余文件打包到exe文件中导致包体积过大；</p>
<p>下面的electron-builder.json5中的files配置为打包dist下的文件；</p>
<p>若项目中没有单独的build配置文件，则需在package.json中加入配置项build； </p>
<p><a href="http://www.icodebang.com/article/322621">参考博客</a>；</p>
<p>具体配置如下：</p>
</blockquote>
</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs json5">/**<br> * @see https://www.electron.build/configuration/configuration 官方文档<br> */<br>&#123;<br>  appId: &#x27;YourAppID&#x27;,<br>  productName: &#x27;知识产权从业人员信息化管理系统V1.0&#x27;,<br>  asar: true,<br>  directories: &#123;<br>    output: &#x27;release&#x27;<br>  &#125;,<br>  files: [&#x27;dist&#x27;],<br>  mac: &#123;<br>    icon: &#x27;dist/renderer/icon.icns&#x27;,<br>    artifactName: &#x27;$&#123;productName&#125;_$&#123;version&#125;.$&#123;ext&#125;&#x27;,<br>    target: [&#x27;dmg&#x27;]<br>  &#125;,<br>  win: &#123;<br>    icon: &#x27;dist/renderer/icon.ico&#x27;,<br>    target: [<br>      &#123;<br>        target: &#x27;nsis&#x27;,<br>        arch: [&#x27;x64&#x27;]<br>      &#125;<br>    ],<br>    artifactName: &#x27;$&#123;productName&#125;.$&#123;ext&#125;&#x27;<br>  &#125;,<br>  nsis: &#123;<br>    oneClick: false,<br>    perMachine: false,<br>    allowToChangeInstallationDirectory: true,<br>    deleteAppDataOnUninstall: false<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<ol start="2">
<li>所需依赖包，报错问题<blockquote>
<p><a href="https://segmentfault.com/a/1190000018533945">参考博客</a></p>
</blockquote>
</li>
</ol>
<hr>
<p>官方文档：<a href="https://www.electronjs.org/">electronjs</a></p>
]]></content>
      <categories>
        <category>前端学习</category>
      </categories>
      <tags>
        <tag>electron</tag>
      </tags>
  </entry>
  <entry>
    <title>vue+swiper实现弹幕滚动效果</title>
    <url>/2022/08/16/a016-vue-swiper%E5%AE%9E%E7%8E%B0%E5%BC%B9%E5%B9%95%E6%BB%9A%E5%8A%A8%E6%95%88%E6%9E%9C/</url>
    <content><![CDATA[<h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><img src="/img/sample/a016/a016.gif" alt="">

<h3 id="依赖版本"><a href="#依赖版本" class="headerlink" title="依赖版本"></a>依赖版本</h3><ol>
<li>package.json</li>
</ol>
<figure class="highlight json"><table><tr><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;swiper&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^3.4.2&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;vue&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^2.5.2&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;vue-awesome-swiper&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^3.1.3&quot;</span><br></code></pre></td></tr></table></figure>
<ol start="2">
<li>main.js</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">VueAwesomeSwiper</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-awesome-swiper&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;swiper/dist/css/swiper.css&#x27;</span><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">VueAwesomeSwiper</span>)<br></code></pre></td></tr></table></figure>


<h3 id="html部分"><a href="#html部分" class="headerlink" title="html部分"></a>html部分</h3><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;recom&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;notice-inner&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">swiper</span></span><br><span class="hljs-tag">          <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;mySwiper&quot;</span></span><br><span class="hljs-tag">          <span class="hljs-attr">:options</span>=<span class="hljs-string">&quot;swiperOptions&quot;</span></span><br><span class="hljs-tag">          <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;operatorList.length &gt; 0&quot;</span></span><br><span class="hljs-tag">          <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;notice-warp notice-box1&quot;</span></span><br><span class="hljs-tag">        &gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">swiper-slide</span></span><br><span class="hljs-tag">            <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;notice-item&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(item, index) in operatorList&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;index&quot;</span></span><br><span class="hljs-tag">          &gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">:src</span>=<span class="hljs-string">&quot;item.headpoart&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span> /&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;&#123; item.nickname &#125;&#125;：&#123;&#123; item.content &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">swiper-slide</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">swiper</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br></code></pre></td></tr></table></figure>


<h3 id="js部分"><a href="#js部分" class="headerlink" title="js部分"></a>js部分</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">operatorList</span>: [<br>        &#123;<br>          <span class="hljs-attr">content</span>: <span class="hljs-string">&#x27;推荐了该商品&#x27;</span>,<br>          <span class="hljs-attr">headpoart</span>:<br>            <span class="hljs-string">&#x27;http://thirdqq.qlogo.cn/g?b=oidb&amp;k=rUNicgjviaaXicdnhE5hsicKcg&amp;s=640&amp;t=1557262645&#x27;</span>,<br>          <span class="hljs-attr">nickname</span>: <span class="hljs-string">&#x27;韩宝妞~&#x27;</span><br>        &#125;,<br>        &#123;<br>          <span class="hljs-attr">content</span>: <span class="hljs-string">&#x27;兑换了该商品1次&#x27;</span>,<br>          <span class="hljs-attr">headpoart</span>:<br>            <span class="hljs-string">&#x27;https://csfile.ossxrcloud.net/ydnResource/2022-01-25/155590301611_1643100097337.jpg&#x27;</span>,<br>          <span class="hljs-attr">nickname</span>: <span class="hljs-string">&#x27;菜菜&#x27;</span><br>        &#125;,<br>        &#123;<br>          <span class="hljs-attr">content</span>: <span class="hljs-string">&#x27;推荐了该商品&#x27;</span>,<br>          <span class="hljs-attr">headpoart</span>:<br>            <span class="hljs-string">&#x27;https://csfile.ossxrcloud.net/ydnResource/2021-09-16/162400612511_1631762223869.jpg&#x27;</span>,<br>          <span class="hljs-attr">nickname</span>: <span class="hljs-string">&#x27;耳机分泥一半&#x27;</span><br>        &#125;,<br>        &#123;<br>          <span class="hljs-attr">content</span>: <span class="hljs-string">&#x27;推荐了该商品&#x27;</span>,<br>          <span class="hljs-attr">headpoart</span>:<br>            <span class="hljs-string">&#x27;https://csfile.ossxrcloud.net/ydnImg/200X200/802dac9a93084_1641346280372.png&#x27;</span>,<br>          <span class="hljs-attr">nickname</span>: <span class="hljs-string">&#x27;本特利&#x27;</span><br>        &#125;,<br>        &#123;<br>          <span class="hljs-attr">content</span>: <span class="hljs-string">&#x27;推荐了该商品&#x27;</span>,<br>          <span class="hljs-attr">headpoart</span>:<br>            <span class="hljs-string">&#x27;https://file.xinruiyun.cn/resource/2020-05-15/8349373d-9ab1-4a4d-a59c-8c65e150deb4.png&#x27;</span>,<br>          <span class="hljs-attr">nickname</span>: <span class="hljs-string">&#x27;哈哈哈&#x27;</span><br>        &#125;<br>      ],<br>      <span class="hljs-attr">swiperOptions</span>: &#123;<br>        <span class="hljs-attr">autoplay</span>: &#123;<br>          <span class="hljs-attr">delay</span>: <span class="hljs-number">3000</span><br>        &#125;,<br>        <span class="hljs-attr">direction</span>: <span class="hljs-string">&#x27;vertical&#x27;</span>,<br>        <span class="hljs-attr">loop</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-comment">// width: 4.2 * parseInt(document.documentElement.style.fontSize),</span><br>        <span class="hljs-attr">height</span>: <span class="hljs-number">0.68</span> * <span class="hljs-built_in">parseInt</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-property">documentElement</span>.<span class="hljs-property">style</span>.<span class="hljs-property">fontSize</span>),<br>        <span class="hljs-comment">// freeMode:true,</span><br>        <span class="hljs-attr">slidesPerView</span>: <span class="hljs-string">&#x27;auto&#x27;</span>,<br>        <span class="hljs-attr">centeredSlides</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-attr">on</span>: &#123;<br>          <span class="hljs-attr">slideChange</span>: <span class="hljs-function">() =&gt;</span> &#123;<br>            <span class="hljs-comment">// this.swiperIndex = this.$refs[&#x27;mySwiper&#x27;].swiper.realIndex;</span><br>          &#125;<br>        &#125;<br>      &#125;,<br>      <span class="hljs-attr">swiperIndex</span>: <span class="hljs-number">0</span><br>    &#125;;<br>  &#125;<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>


<h3 id="css部分"><a href="#css部分" class="headerlink" title="css部分"></a>css部分</h3><figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css">&lt;style&gt;<br>* &#123;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-selector-class">.recom</span> &#123;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">0.28rem</span> <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">2.4rem</span>;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br>  <span class="hljs-attribute">background</span>: skyblue;<br>  <span class="hljs-comment">/* pointer-events: none; */</span><br>&#125;<br><br><span class="hljs-selector-class">.notice-inner</span> &#123;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> <span class="hljs-number">0.4rem</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">2.04rem</span>;<br>  <span class="hljs-attribute">overflow</span>: hidden;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">14px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.notice-item</span> &#123;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">0.68rem</span>;<br>  <span class="hljs-attribute">background</span>: orangered;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">0.26rem</span>;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#ffffff</span>;<br>  <span class="hljs-attribute">display</span>: flex;<br>  <span class="hljs-attribute">transition-property</span>: top;<br>  <span class="hljs-attribute">transition-timing-function</span>: linear;<br>&#125;<br><br><span class="hljs-selector-class">.notice-item</span><span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">2</span>n) &#123;<br>  <span class="hljs-attribute">background</span>: pink;<br>&#125;<br><br><span class="hljs-selector-class">.notice-item</span><span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">3</span>n) &#123;<br>  <span class="hljs-attribute">background</span>: yellowgreen;<br>&#125;<br><br><span class="hljs-selector-class">.notice-item</span><span class="hljs-selector-class">.swiper-slide</span> &#123;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">0.68rem</span>;<br>&#125;<br><br><span class="hljs-selector-class">.notice-item</span> <span class="hljs-selector-tag">img</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">0.48rem</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">0.48rem</span>;<br>  <span class="hljs-attribute">margin-right</span>: <span class="hljs-number">0.2rem</span>;<br>  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">50%</span>;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端学习</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>swiper</tag>
      </tags>
  </entry>
  <entry>
    <title>小程序开发</title>
    <url>/2022/09/09/a017-%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<h3 id="不同形式的移动客户端"><a href="#不同形式的移动客户端" class="headerlink" title="不同形式的移动客户端"></a>不同形式的移动客户端</h3><ol>
<li><p>H5</p>
</li>
<li><p>原生App</p>
</li>
<li><p>基于App的二级生态</p>
<blockquote>
<p>  公众号<br>  小程序</p>
</blockquote>
</li>
</ol>
<h3 id="各部分组成"><a href="#各部分组成" class="headerlink" title="各部分组成"></a>各部分组成</h3><ol>
<li><p>App</p>
<blockquote>
<p>  是一个全局对象，代表整个小程序，有且只有一个</p>
<p>  app.js    监听app的生命周期，存储全局数据                                             是否必须(否)</p>
<p>  app.wxss  全局样式配置                                                                是否必须(否)</p>
<p>  app.json  pages注册，必须注册pages，至少一个；window窗口；导航栏；tabbar选项卡等         是否必须(是)</p>
</blockquote>
</li>
<li><p>Page</p>
<blockquote>
<p>  用户所看到的一整个页面</p>
<p>  page.js   监听page的生命周期，页面数据，页面逻辑                                      是否必须(是)</p>
<p>  page.wxml 页面结构，数据渲染，事件绑定                                                是否必须(是)</p>
<p>  page.wxss 页面样式                                                                    是否必须(否)</p>
<p>  page.json component注册，导航栏，上下拉刷新等                                            是否必须(否)</p>
</blockquote>
</li>
<li><p>Component</p>
<blockquote>
<p>  组成页面的一小部分</p>
<p>  component.js      组件数据，组件逻辑                                                  是否必须(是)</p>
<p>  component.wxml    数据渲染，事件绑定                                                  是否必须(是)</p>
<p>  component.wxss    组件样式                                                             是否必须(否)</p>
<p>  component.json    组件设置”component”: true；组件注册                                   是否必须(否)</p>
</blockquote>
</li>
</ol>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>小程序开发不需要依赖其他的库或自己写功能，好多功能都有自带的配置</p>
<ol>
<li><p>项目开发配置</p>
<blockquote>
<p>  project.config.json</p>
<p>  也可以通过可视化界面设置：开发工具右上角 &#x3D;&gt; 详情 &#x3D;&gt; 本地设置</p>
</blockquote>
</li>
<li><p>小程序收录配置</p>
<blockquote>
<p>  <a href="https://developers.weixin.qq.com/miniprogram/dev/reference/configuration/sitemap.html">sitemap.json</a></p>
<p>  微信小程序在20190329推出了sitemap功能</p>
<p>  将会默认收录所有小程序的页面内容，用于微信搜索场景。类似于网站的SEO</p>
<p>  这意味着开发者的小程序曝光率的增加</p>
</blockquote>
</li>
<li><p>全局配置</p>
<blockquote>
<p>  <a href="https://developers.weixin.qq.com/miniprogram/dev/reference/configuration/app.html">app.json</a></p>
<p>  对小程序进行全局配置</p>
<p>  决定页面路径；窗口表现；设置网络超时时间等。重点掌握window|pages|tabBar</p>
</blockquote>
</li>
<li><p>页面配置</p>
<blockquote>
<p>  <a href="https://developers.weixin.qq.com/miniprogram/dev/reference/configuration/page.html">page.json</a></p>
<p>  对小程序单个页面生效</p>
</blockquote>
</li>
</ol>
<h3 id="WXML"><a href="#WXML" class="headerlink" title="WXML"></a>WXML</h3><ol>
<li><p><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/wxml/data.html">数据绑定</a></p>
<blockquote>
<p>  数据绑定使用 Mustache 语法（双大括号）将变量包起来</p>
<p>  <code>&#123;&#123;&#125;&#125;</code>中只能写表达式，不能写代码。同vue和react</p>
</blockquote>
</li>
<li><p><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/wxml/conditional.html">条件渲染</a></p>
<blockquote>
<p>  <code>&lt;block/&gt;</code> 并不是一个组件，它仅仅是一个包装元素，不会在页面中做任何渲染，只接受控制属性。</p>
<p>  hidden  组件始终会被渲染，只是简单的控制显示与隐藏。</p>
<p>  wx:if 有更高的切换消耗而 hidden 有更高的初始渲染消耗</p>
</blockquote>
</li>
<li><p><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/wxml/list.html">列表渲染</a></p>
<blockquote>
<p>  wx:key 默认为index</p>
<p>  wx:key 的值以两种形式提供<br>  字符串，代表在 for 循环的 array 中 item 的某个 property，该 property 的值需要是列表中唯一的字符串或数字，且不能动态改变。<br>  保留关键字 *this 代表在 for 循环中的 item 本身，这种表示需要 item 本身是一个唯一的字符串或者数字。</p>
<p>  setData 数据更新并触发视图更新，增量式更新。同react</p>
</blockquote>
</li>
<li><p><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/view/wxml/event.html">事件绑定</a></p>
<blockquote>
<p>  事件是视图层到逻辑层的通讯方式</p>
<p>  事件对象可以携带额外的参数，如id、dataset、touches。</p>
<p>  target，触发事件的源组件。<br>  currentTarget，事件绑定的当前组件。</p>
<p>  从外到内传递(找到目标元素)的过程称为捕获，从内到外处理(事件处理)的过程称为冒泡。</p>
<p>  touches，表示当前停留在屏幕上的触摸点。<br>  changedTouches， 表示有变化的触摸点。</p>
<p>  除 bind 外，也可以用 catch 来绑定事件。与 bind 不同， catch 会阻止事件向上冒泡。</p>
<p>  需要在捕获阶段监听事件时，可以采用capture-bind。capture-catch关键字，将中断捕获阶段和取消冒泡阶段。</p>
<p>  互斥事件绑定，mut-bind</p>
</blockquote>
</li>
<li><p><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/wxml/template.html">模板</a></p>
<blockquote>
<p>  WXML提供模板（template），可以在模板中定义代码片段，然后在不同的地方调用。</p>
<p>  可以理解为只能渲染的组件，没有自己的对应js和css文件。使用场景不多</p>
</blockquote>
</li>
<li><p><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/wxml/import.html">引用</a></p>
<blockquote>
<p>  import可以在该文件中使用目标文件定义的template</p>
<p>  include 可以将目标文件除了 <code>&lt;template/&gt;</code> <code>&lt;wxs/&gt;</code> 外的整个代码引入，相当于是拷贝到 include 位置</p>
</blockquote>
</li>
</ol>
<h3 id="WXS"><a href="#WXS" class="headerlink" title="WXS"></a>WXS</h3><ol>
<li><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/view/wxs/">文档</a></li>
<li>写一些函数，辅助做一些渲染层的数据处理 </li>
<li>可以在渲染层主动调用方法，例如格式化日期、截取字符串</li>
</ol>
<h3 id="WXSS"><a href="#WXSS" class="headerlink" title="WXSS"></a>WXSS</h3><ol>
<li><p><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/view/wxss.html">文档</a></p>
<blockquote>
<p>  全局样式app.wxss，可以作用于页面，但不能作用于组件</p>
</blockquote>
</li>
<li><p>尺寸单位rpx</p>
<blockquote>
<p>  所有设备类型的宽度都为750rpx</p>
<p>   以iPhone6 作为视觉稿的标准，1px &#x3D; 2rpx</p>
</blockquote>
</li>
<li><p><a href="https://developers.weixin.qq.com/miniprogram/dev/platform-capabilities/extended/weui/">weUI</a></p>
 <figure class="highlight livescript"><table><tr><td class="code"><pre><code class="hljs livescript"><span class="hljs-built_in">npm</span> init -y<br><span class="hljs-built_in">npm</span> i weui-miniprogram<br>左上角工具 =&gt; 构建<span class="hljs-built_in">npm</span><br>app.wxss 里面引入 weui.wxss<br>page.json 中引入组件 =&gt; 页面中使用组件<br></code></pre></td></tr></table></figure></li>
</ol>
<h3 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h3><ol>
<li><p>text组件，用于展示文本，内部只能嵌套text组件</p>
</li>
<li><p>背景图使用FeHelper将图片转换成base64编码格式</p>
</li>
<li><p><a href="https://developers.weixin.qq.com/miniprogram/dev/component/swiper.html">swiper</a></p>
</li>
<li><p><a href="https://developers.weixin.qq.com/miniprogram/dev/component/movable-area.html">movable-area</a></p>
</li>
<li><p><a href="https://developers.weixin.qq.com/miniprogram/dev/component/scroll-view.html">scroll-view</a></p>
</li>
<li><p><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/custom-component/">自定义组件</a></p>
</li>
</ol>
<h3 id="生命周期、路由、API"><a href="#生命周期、路由、API" class="headerlink" title="生命周期、路由、API"></a>生命周期、路由、API</h3><ol>
<li><p><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/api/App.html">App生命周期</a></p>
</li>
<li><p><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/api/Page.html">Page生命周期</a></p>
</li>
<li><p><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/custom-component/lifetimes.html">Component生命周期</a></p>
</li>
<li><p><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/app-service/route.html">页面路由</a></p>
</li>
<li><p><a href="https://developers.weixin.qq.com/miniprogram/dev/api/">API</a></p>
<blockquote>
<p>wx.request 接口请求</p>
<ul>
<li>生产环境：微信公众平台    &#x3D;&gt;  开发管理    &#x3D;&gt;  开发设置    &#x3D;&gt;  服务器域名中配置(需要支持https)</li>
<li>开发环境：右上角详情   &#x3D;&gt;  本地设置    &#x3D;&gt;  不校验合法域名</li>
</ul>
</blockquote>
</li>
</ol>
<h3 id="云开发"><a href="#云开发" class="headerlink" title="云开发"></a>云开发</h3><ol>
<li><p>不使用云开发<br>一门后端语言 + 购买服务器(只有ip) + 购买域名 + 购买证书(支持https)</p>
</li>
<li><p>使用云开发</p>
<blockquote>
<p>  在一个全部都已经部署好的环境中(云环境),直接以函数的形式使用各种服务(文件存储、数据库存储、计算处理、三方服务等)，完成各种操作。可以理解为前后端代码放在一块，可以直接调用</p>
<p>  <a href="https://developers.weixin.qq.com/miniprogram/dev/wxcloud/basis/capabilities.html">云开发能力</a></p>
<p>  云函数内部可以操作云存储、云数据库、云调用；HTTP API可以操作云存储、云数据库、云函数。    </p>
</blockquote>
</li>
<li><p><a href="https://developers.weixin.qq.com/miniprogram/dev/wxcloud/basis/quickstart.html">云开发介绍</a></p>
<blockquote>
<p>  云环境和AppID是绑定的，会自动识别项目的AppID</p>
<p>  云环境创建后名称不能修改</p>
<p>  云环境最多创建两个(开发、发布)</p>
</blockquote>
</li>
<li><p><a href="https://developers.weixin.qq.com/miniprogram/dev/wxcloud/guide/database/init.html">云数据库</a></p>
</li>
<li><p><a href="https://developers.weixin.qq.com/miniprogram/dev/wxcloud/guide/functions/getting-started.html">云函数</a></p>
</li>
</ol>
<ul>
<li><p>云函数需要手动创建</p>
</li>
<li><p>已有项目中添加云函数功能</p>
<blockquote>
<p>  项目中用两个文件夹区分 项目文件(除projec.config.json) 云函数</p>
<p>  并在projec.config.json中添加，<code>&quot;miniprogramRoot&quot;: &quot;app/&quot;</code>，<code>&quot;cloudfunctionRoot&quot;: &quot;appFunc/&quot;</code></p>
</blockquote>
</li>
<li><p>新建项目中添加云函数功能</p>
<blockquote>
<p>  创建项目时勾选使用云开发，即可自动创建相应目录，并包含相关测试云函数</p>
</blockquote>
</li>
<li><p>API分类</p>
<blockquote>
<p>  小程序端调用、服务端调用(云函数中调用)</p>
</blockquote>
</li>
<li><p>使用</p>
<blockquote>
<p>  axios使用会报错，建议使用request-promise</p>
<p>  每次修改函数内容，都需要重新上传和部署；或者右键点击函数的index.js，选择增量式更新</p>
</blockquote>
</li>
</ul>
<hr>
<p>参考文档:</p>
<ul>
<li><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/structure.html">微信官方文档</a></li>
<li><a href="https://mp.weixin.qq.com/">微信公众平台</a></li>
</ul>
<p>参考视频:</p>
<ul>
<li><a href="https://www.bilibili.com/video/BV1YJ411W7YA">BV1YJ411W7YA</a></li>
</ul>
]]></content>
      <categories>
        <category>前端学习</category>
      </categories>
      <tags>
        <tag>小程序</tag>
        <tag>云开发</tag>
      </tags>
  </entry>
  <entry>
    <title>h5实现拖拽排序</title>
    <url>/2022/12/08/a018-h5%E5%AE%9E%E7%8E%B0%E6%8B%96%E6%8B%BD%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><img src="/img/sample/a018/a018.gif" alt="">

<h3 id="依赖版本"><a href="#依赖版本" class="headerlink" title="依赖版本"></a>依赖版本</h3><ol>
<li>package.json</li>
</ol>
<figure class="highlight json"><table><tr><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;sortablejs&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^1.15.0&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;vue&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^3.2.41&quot;</span><br></code></pre></td></tr></table></figure>

<h3 id="html-部分"><a href="#html-部分" class="headerlink" title="html 部分"></a>html 部分</h3><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;wrapper&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span></span><br><span class="hljs-tag">        <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;item&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(item, index) in items&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;item.id&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">:style</span>=<span class="hljs-string">&quot;&#123; background: item.color &#125;&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">:data-id</span>=<span class="hljs-string">&quot;item.id&quot;</span></span><br><span class="hljs-tag">      &gt;</span><br>        &#123;&#123; item &#125;&#125;<br>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h3 id="js-部分"><a href="#js-部分" class="headerlink" title="js 部分"></a>js 部分</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">&lt;script setup lang=<span class="hljs-string">&quot;ts&quot;</span>&gt;<br><span class="hljs-keyword">import</span> &#123; ref, onMounted &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Sortable</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;sortablejs&#x27;</span>;<br><span class="hljs-keyword">const</span> items = <span class="hljs-title function_">ref</span>([<br>  &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">color</span>: <span class="hljs-string">&quot;#3883a0&quot;</span> &#125;,<br>  &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">color</span>: <span class="hljs-string">&quot;#4883a0&quot;</span> &#125;,<br>  &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">3</span>, <span class="hljs-attr">color</span>: <span class="hljs-string">&quot;#5883a0&quot;</span> &#125;,<br>  &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">4</span>, <span class="hljs-attr">color</span>: <span class="hljs-string">&quot;#6883a0&quot;</span> &#125;,<br>  &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">5</span>, <span class="hljs-attr">color</span>: <span class="hljs-string">&quot;#7883a0&quot;</span> &#125;,<br>  &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">6</span>, <span class="hljs-attr">color</span>: <span class="hljs-string">&quot;#8883a0&quot;</span> &#125;,<br>  &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">7</span>, <span class="hljs-attr">color</span>: <span class="hljs-string">&quot;#9883a0&quot;</span> &#125;<br>])<br><br><span class="hljs-keyword">const</span> sort = ref&lt;any[]&gt;([])<br><br><span class="hljs-title function_">onMounted</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">let</span> el = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.container&#x27;</span>)<br>  <span class="hljs-title class_">Sortable</span>.<span class="hljs-title function_">create</span>(&lt;<span class="hljs-title class_">HTMLElement</span>&gt;el, &#123;<br>    <span class="hljs-attr">animation</span>: <span class="hljs-number">150</span>,<br>    <span class="hljs-title function_">onStart</span>(<span class="hljs-params"></span>) &#123;<br>      sort.<span class="hljs-property">value</span> = []<br>    &#125;,<br>    <span class="hljs-title function_">onEnd</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>((<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.container&#x27;</span>) <span class="hljs-keyword">as</span> any).<span class="hljs-property">children</span>).<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">item: any</span>) =&gt;</span> &#123;<br>        sort.<span class="hljs-property">value</span>.<span class="hljs-title function_">push</span>(item.<span class="hljs-property">dataset</span>.<span class="hljs-property">id</span>)<br>      &#125;)<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(sort.<span class="hljs-property">value</span>)));<br>    &#125;<br>  &#125;)<br>&#125;)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>

<h3 id="css-部分"><a href="#css-部分" class="headerlink" title="css 部分"></a>css 部分</h3><figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css">&lt;style lang=&quot;less&quot; scoped&gt;<br><span class="hljs-selector-class">.container</span> &#123;<br>  <span class="hljs-attribute">display</span>: flex;<br>  <span class="hljs-attribute">flex-wrap</span>: wrap;<br>&#125;<br><br><span class="hljs-selector-class">.item</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">10px</span>;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端学习</category>
      </categories>
      <tags>
        <tag>拖拽排序</tag>
        <tag>sortablejs</tag>
      </tags>
  </entry>
  <entry>
    <title>js迭代器和生成器</title>
    <url>/2023/06/11/a020-js%E8%BF%AD%E4%BB%A3%E5%99%A8%E5%92%8C%E7%94%9F%E6%88%90%E5%99%A8/</url>
    <content><![CDATA[<h3 id="迭代器和生成器-Iterators-amp-generators"><a href="#迭代器和生成器-Iterators-amp-generators" class="headerlink" title="迭代器和生成器(Iterators&amp;generators)"></a>迭代器和生成器(Iterators&amp;generators)</h3><h3 id="可迭代对象的应用场景"><a href="#可迭代对象的应用场景" class="headerlink" title="可迭代对象的应用场景"></a>可迭代对象的应用场景</h3><blockquote>
<p>js中语法：for…of、展开语法(spread syntax)、yield*、解构赋值(Destructuring_assignment)；<br>创建一些对象时：new Map([Iterable])、new WeakMap([Iterable])、new Set([Iterable])、new WeakSet([Iterable])；<br>一些方法的调用：Promise.all(Iterable)、Promise.race(Iterable)、Array.from(Iterable)</p>
</blockquote>
<h3 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h3><p>是 es6 中新增的一种函数控制、使用方案，可以让我们更加灵活的控制函数什么时候继续执行、暂停执行等。</p>
<blockquote>
<p>生成器函数需要加*<br>生成器函数可以通过 yield 关键字来控制函数的执行流程<br>生成器函数的返回值是一个生成器(Generator)<br>生成器是一种特殊的迭代器<br>生成器是async&#x2F;await的语法糖</p>
</blockquote>
<h3 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> names = [<span class="hljs-string">&#x27;hello&#x27;</span>, <span class="hljs-string">&#x27;iterators&#x27;</span>, <span class="hljs-string">&#x27;speak&#x27;</span>]<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">createArrIterators</span>(<span class="hljs-params">arr</span>) &#123;<br>    <span class="hljs-keyword">let</span> index = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">return</span> &#123;<br>        <span class="hljs-title function_">next</span>(<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-keyword">if</span> (index &lt; arr.<span class="hljs-property">length</span>) &#123;<br>                <span class="hljs-keyword">return</span> &#123;<br>                    <span class="hljs-attr">done</span>: <span class="hljs-literal">false</span>,<br>                    <span class="hljs-attr">value</span>: arr[index++]<br>                &#125;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">return</span> &#123;<br>                    <span class="hljs-attr">done</span>: <span class="hljs-literal">true</span>,<br>                    <span class="hljs-attr">value</span>: <span class="hljs-literal">undefined</span><br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">const</span> namesIterator = <span class="hljs-title function_">createArrIterators</span>(names)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(namesIterator.<span class="hljs-title function_">next</span>());<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(namesIterator.<span class="hljs-title function_">next</span>());<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(namesIterator.<span class="hljs-title function_">next</span>());<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(namesIterator.<span class="hljs-title function_">next</span>());<br></code></pre></td></tr></table></figure>

<h3 id="可迭代对象"><a href="#可迭代对象" class="headerlink" title="可迭代对象"></a>可迭代对象</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> info = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;jack&#x27;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">25</span>,<br>    <span class="hljs-attr">gender</span>: <span class="hljs-string">&#x27;男&#x27;</span>,<br>    [<span class="hljs-title class_">Symbol</span>.<span class="hljs-property">iterator</span>]() &#123; <span class="hljs-comment">//计算属性名</span><br>        <span class="hljs-comment">// const keys = Object.keys(this)</span><br>        <span class="hljs-comment">// const values = Object.values(this)</span><br>        <span class="hljs-keyword">const</span> entries = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">entries</span>(<span class="hljs-variable language_">this</span>)<br>        <span class="hljs-keyword">let</span> index = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">return</span> &#123;<br>            <span class="hljs-attr">next</span>: <span class="hljs-function">() =&gt;</span> &#123;<br>                <span class="hljs-keyword">if</span> (index &lt; entries.<span class="hljs-property">length</span>) &#123;<br>                    <span class="hljs-keyword">return</span> &#123;<br>                        <span class="hljs-attr">done</span>: <span class="hljs-literal">false</span>,<br>                        <span class="hljs-attr">value</span>: entries[index++]<br>                    &#125;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-keyword">return</span> &#123;<br>                        <span class="hljs-attr">done</span>: <span class="hljs-literal">true</span>,<br>                        <span class="hljs-attr">value</span>: <span class="hljs-literal">undefined</span><br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">const</span> infoIterator = info[<span class="hljs-title class_">Symbol</span>.<span class="hljs-property">iterator</span>]()<br><span class="hljs-comment">// console.log(infoIterator.next());</span><br><span class="hljs-comment">// console.log(infoIterator.next());</span><br><span class="hljs-comment">// console.log(infoIterator.next());</span><br><span class="hljs-comment">// console.log(infoIterator.next());</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> item <span class="hljs-keyword">of</span> info) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(item);<br>&#125;<br><br><span class="hljs-keyword">const</span> numarr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br><span class="hljs-keyword">const</span> numarrIterator = numarr[<span class="hljs-title class_">Symbol</span>.<span class="hljs-property">iterator</span>]()<br><span class="hljs-comment">// console.log(numarrIterator.next());</span><br><span class="hljs-comment">// console.log(numarrIterator.next());</span><br><span class="hljs-comment">// console.log(numarrIterator.next());</span><br><span class="hljs-comment">// console.log(numarrIterator.next());</span><br></code></pre></td></tr></table></figure>

<h3 id="自定义类的迭代"><a href="#自定义类的迭代" class="headerlink" title="自定义类的迭代"></a>自定义类的迭代</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">name, age, gender, friend</span>) &#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">gender</span> = gender<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">friend</span> = friend<br>        &#125;<br>        [<span class="hljs-title class_">Symbol</span>.<span class="hljs-property">iterator</span>]() &#123;<br>            <span class="hljs-keyword">const</span> entries = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">entries</span>(<span class="hljs-variable language_">this</span>)<br>            <span class="hljs-keyword">let</span> index = <span class="hljs-number">0</span><br>            <span class="hljs-keyword">return</span> &#123;<br>                <span class="hljs-attr">next</span>: <span class="hljs-function">() =&gt;</span> &#123;<br>                    <span class="hljs-keyword">if</span> (index &lt; entries.<span class="hljs-property">length</span>) &#123;<br>                        <span class="hljs-keyword">return</span> &#123;<br>                            <span class="hljs-attr">value</span>: entries[index++],<br>                            <span class="hljs-attr">done</span>: <span class="hljs-literal">false</span><br>                        &#125;<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        <span class="hljs-keyword">return</span> &#123;<br>                            <span class="hljs-attr">value</span>: <span class="hljs-literal">undefined</span>,<br>                            <span class="hljs-attr">done</span>: <span class="hljs-literal">true</span><br>                        &#125;<br>                    &#125;<br>                &#125;,<br>                <span class="hljs-attr">return</span>: <span class="hljs-function">() =&gt;</span> &#123; <span class="hljs-comment">//中断检测</span><br>                    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;迭代器中断了...&#x27;</span>);<br>                    <span class="hljs-keyword">return</span> &#123;<br>                        <span class="hljs-attr">value</span>: <span class="hljs-literal">undefined</span>,<br>                        <span class="hljs-attr">done</span>: <span class="hljs-literal">true</span><br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>&#125;<br><span class="hljs-keyword">const</span> p1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&#x27;jack&#x27;</span>, <span class="hljs-number">25</span>, <span class="hljs-string">&#x27;男&#x27;</span>, [<span class="hljs-string">&#x27;rose&#x27;</span>, <span class="hljs-string">&#x27;akman&#x27;</span>])<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> item <span class="hljs-keyword">of</span> p1) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(item);<br>    <span class="hljs-keyword">const</span> [key, value] = item<br>    <span class="hljs-comment">// if (key === &#x27;gender&#x27;) break //return throw</span><br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="生成器函数的使用"><a href="#生成器函数的使用" class="headerlink" title="生成器函数的使用"></a>生成器函数的使用</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span>* <span class="hljs-title function_">foo</span>(<span class="hljs-params">params1</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">111</span>, params1);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">222</span>, params1);<br>    <span class="hljs-keyword">const</span> params2 = <span class="hljs-keyword">yield</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;aaa&#x27;</span>);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">333</span>, params2);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">444</span>, params2);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">555</span>, params2);<br>    <span class="hljs-keyword">const</span> params3 = <span class="hljs-keyword">yield</span> <span class="hljs-string">&#x27;bbb&#x27;</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">666</span>, params3);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;ccc&#x27;</span><br>&#125;<br><span class="hljs-keyword">const</span> generator = <span class="hljs-title function_">foo</span>(<span class="hljs-string">&#x27;next1&#x27;</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(generator.<span class="hljs-title function_">next</span>()); <span class="hljs-comment">//&#123;value:undefined,done:false&#125;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(generator.<span class="hljs-title function_">next</span>(<span class="hljs-string">&#x27;next2&#x27;</span>)); <span class="hljs-comment">//&#123;value:&#x27;bbb&#x27;,done:false&#125;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(generator.<span class="hljs-title function_">next</span>(<span class="hljs-string">&#x27;next3&#x27;</span>)); <span class="hljs-comment">//&#123;value:&#x27;ccc&#x27;,done:true&#125;</span><br></code></pre></td></tr></table></figure>

<h3 id="生成器函数提前结束"><a href="#生成器函数提前结束" class="headerlink" title="生成器函数提前结束"></a>生成器函数提前结束</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span>* <span class="hljs-title function_">foo</span>(<span class="hljs-params">params1</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">111</span>, params1);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">222</span>, params1);<br>    <span class="hljs-keyword">const</span> params2 = <span class="hljs-keyword">yield</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;aaa&#x27;</span>);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">333</span>, params2);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">444</span>, params2);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">555</span>, params2);<br>    <span class="hljs-keyword">const</span> params3 = <span class="hljs-keyword">yield</span> <span class="hljs-string">&#x27;bbb&#x27;</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">666</span>, params3);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;ccc&#x27;</span><br>&#125;<br><span class="hljs-keyword">const</span> generator = <span class="hljs-title function_">foo</span>(<span class="hljs-string">&#x27;next1&#x27;</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(generator.<span class="hljs-title function_">next</span>()); <span class="hljs-comment">//&#123;value:undefined,done:false&#125;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(generator.<span class="hljs-keyword">return</span>(<span class="hljs-string">&#x27;next2&#x27;</span>)); <span class="hljs-comment">//&#123;value:&#x27;next2&#x27;,done:true&#125;</span><br><span class="hljs-comment">// console.log(generator.throw(new Error(&#x27;next2&#x27;)));</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;------------------------&#x27;</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(generator.<span class="hljs-title function_">next</span>(<span class="hljs-string">&#x27;next3&#x27;</span>)); <span class="hljs-comment">//&#123;value:undefined,done:true&#125;</span><br></code></pre></td></tr></table></figure>

<h3 id="生成器代替迭代器"><a href="#生成器代替迭代器" class="headerlink" title="生成器代替迭代器"></a>生成器代替迭代器</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> names = [<span class="hljs-string">&#x27;jack&#x27;</span>, <span class="hljs-string">&#x27;rose&#x27;</span>, <span class="hljs-string">&#x27;akman&#x27;</span>]<br><br><span class="hljs-keyword">function</span>* <span class="hljs-title function_">createItretaor</span>(<span class="hljs-params">arr</span>) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; arr.<span class="hljs-property">length</span>; i++) &#123;<br>        <span class="hljs-keyword">yield</span> arr[i];<br>    &#125;<br>&#125;<br><span class="hljs-keyword">const</span> namesItretaor = <span class="hljs-title function_">createItretaor</span>(names)<br><span class="hljs-comment">// console.log(namesItretaor.next());</span><br><span class="hljs-comment">// console.log(namesItretaor.next());</span><br><span class="hljs-comment">// console.log(namesItretaor.next());</span><br><span class="hljs-comment">// console.log(namesItretaor.next());</span><br><br><span class="hljs-comment">//生成器函数，可以生成某个范围的值</span><br><span class="hljs-keyword">function</span>* <span class="hljs-title function_">createRangeGenerator</span>(<span class="hljs-params">start, end</span>) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = start; i &lt; end; i++) &#123;<br>        <span class="hljs-keyword">yield</span> i<br>    &#125;<br>&#125;<br><span class="hljs-keyword">const</span> rangeGen = <span class="hljs-title function_">createRangeGenerator</span>(<span class="hljs-number">3</span>, <span class="hljs-number">7</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(rangeGen.<span class="hljs-title function_">next</span>());<br></code></pre></td></tr></table></figure>

<h3 id="生成器yield语法糖"><a href="#生成器yield语法糖" class="headerlink" title="生成器yield语法糖"></a>生成器yield语法糖</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span>* <span class="hljs-title function_">foo</span>(<span class="hljs-params">params1</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">111</span>, params1);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">222</span>, params1);<br>    <span class="hljs-keyword">const</span> params2 = <span class="hljs-keyword">yield</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;aaa&#x27;</span>);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">333</span>, params2);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">444</span>, params2);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">555</span>, params2);<br>    <span class="hljs-keyword">const</span> params3 = <span class="hljs-keyword">yield</span> <span class="hljs-string">&#x27;bbb&#x27;</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">666</span>, params3);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;ccc&#x27;</span><br>&#125;<br><span class="hljs-keyword">const</span> generator = <span class="hljs-title function_">foo</span>(<span class="hljs-string">&#x27;next1&#x27;</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(generator.<span class="hljs-title function_">next</span>()); <span class="hljs-comment">//&#123;value:undefined,done:false&#125;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(generator.<span class="hljs-title function_">next</span>(<span class="hljs-string">&#x27;next2&#x27;</span>)); <span class="hljs-comment">//&#123;value:&#x27;bbb&#x27;,done:false&#125;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(generator.<span class="hljs-title function_">next</span>(<span class="hljs-string">&#x27;next3&#x27;</span>)); <span class="hljs-comment">//&#123;value:&#x27;ccc&#x27;,done:true&#125;</span><br></code></pre></td></tr></table></figure>

<hr>
<p>参考视频：<a href="https://www.bilibili.com/video/BV1TY411B71U">coderwhy BV1TY411B71U</a></p>
]]></content>
      <categories>
        <category>前端学习</category>
      </categories>
      <tags>
        <tag>迭代器Iterators</tag>
        <tag>生成器generators</tag>
      </tags>
  </entry>
  <entry>
    <title>js设计模式</title>
    <url>/2023/03/11/a019-js%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h3 id="设计模式-Design-Pattern"><a href="#设计模式-Design-Pattern" class="headerlink" title="设计模式( Design Pattern)"></a>设计模式( Design Pattern)</h3><h3 id="什么是设计模式"><a href="#什么是设计模式" class="headerlink" title="什么是设计模式"></a>什么是设计模式</h3><p>设计模式是我们在解决问题的时候针对特定问题给出的简洁而优化的处理方案</p>
<h3 id="构造器模式"><a href="#构造器模式" class="headerlink" title="构造器模式"></a>构造器模式</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Employee</span>(<span class="hljs-params">name, age</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">say</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> + <span class="hljs-string">&#x27;--&#x27;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">const</span> e1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>(<span class="hljs-string">&#x27;jack&#x27;</span>, <span class="hljs-number">25</span>) <span class="hljs-comment">//say需要重复创建，消耗内存</span><br><span class="hljs-keyword">const</span> e2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>(<span class="hljs-string">&#x27;rose&#x27;</span>, <span class="hljs-number">25</span>)<br></code></pre></td></tr></table></figure>

<h3 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//原型模式</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Employee</span>(<span class="hljs-params">name, age</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age<br>&#125;<br><span class="hljs-title class_">Employee</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">say</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> + <span class="hljs-string">&#x27;--&#x27;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span>);<br>&#125;<br><span class="hljs-keyword">const</span> e1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>(<span class="hljs-string">&#x27;jack&#x27;</span>, <span class="hljs-number">25</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e1);<br><br><span class="hljs-comment">//es6</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Emplo</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">name, age</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age<br>    &#125;<br>    <span class="hljs-title function_">say</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> + <span class="hljs-string">&#x27;--&#x27;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">const</span> em1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Emplo</span>(<span class="hljs-string">&#x27;rose&#x27;</span>, <span class="hljs-number">23</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(em1);<br></code></pre></td></tr></table></figure>

<h3 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h3><p>优点：只需要一个正确的参数，就可以获取到你所需要的对象，而无需知道具体创建的细节<br>缺点：当对象数量很多时，这个函数会变成庞大的超级函数，难以维护</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">role, auth</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">role</span> = role<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">auth</span> = auth<br>    &#125;<br>    <span class="hljs-keyword">static</span> <span class="hljs-title class_">UserFactor</span>(role) &#123;<br>        <span class="hljs-keyword">switch</span> (role) &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;super-admin&#x27;</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&#x27;super-admin&#x27;</span>, [<span class="hljs-string">&#x27;home&#x27;</span>, <span class="hljs-string">&#x27;user-manage&#x27;</span>, <span class="hljs-string">&#x27;right-manage&#x27;</span>, <span class="hljs-string">&#x27;news-manage&#x27;</span>])<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;admin&#x27;</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&#x27;admin&#x27;</span>, [<span class="hljs-string">&#x27;home&#x27;</span>, <span class="hljs-string">&#x27;right-manage&#x27;</span>, <span class="hljs-string">&#x27;news-manage&#x27;</span>])<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;editor&#x27;</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&#x27;editor&#x27;</span>, [<span class="hljs-string">&#x27;home&#x27;</span>, <span class="hljs-string">&#x27;news-manage&#x27;</span>])<br>            <span class="hljs-attr">default</span>:<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;参数错误&#x27;</span>)<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">const</span> u = <span class="hljs-title class_">User</span>.<span class="hljs-title class_">UserFactor</span>(<span class="hljs-string">&#x27;super-admin&#x27;</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(u);<br></code></pre></td></tr></table></figure>

<h3 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h3><p>抽象工厂模式并不直接生成实例，而是用于对产品类簇的创建，即返回对应的类</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">name, role, auth</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">role</span> = role<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">auth</span> = auth<br>    &#125;<br>    <span class="hljs-title function_">welcome</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;欢迎回来&#x27;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>);<br>    &#125;<br>    <span class="hljs-title function_">dataShow</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;抽象方法需要被实现&#x27;</span>)<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SuperAdmin</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">User</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">name</span>) &#123;<br>        <span class="hljs-variable language_">super</span>(name, <span class="hljs-string">&#x27;super-admin&#x27;</span>, [<span class="hljs-string">&#x27;home&#x27;</span>, <span class="hljs-string">&#x27;user-manage&#x27;</span>, <span class="hljs-string">&#x27;right-manage&#x27;</span>, <span class="hljs-string">&#x27;news-manage&#x27;</span>])<br>    &#125;<br>    <span class="hljs-title function_">dataShow</span>(<span class="hljs-params"></span>) &#123;&#125;<br>    <span class="hljs-title function_">addRight</span>(<span class="hljs-params"></span>) &#123;&#125;<br>    <span class="hljs-title function_">addUser</span>(<span class="hljs-params"></span>) &#123;&#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Admin</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">User</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">name</span>) &#123;<br>        <span class="hljs-variable language_">super</span>(name, <span class="hljs-string">&#x27;admin&#x27;</span>, [<span class="hljs-string">&#x27;home&#x27;</span>, <span class="hljs-string">&#x27;user-manage&#x27;</span>, <span class="hljs-string">&#x27;news-manage&#x27;</span>])<br>    &#125;<br>    <span class="hljs-title function_">dataShow</span>(<span class="hljs-params"></span>) &#123;&#125;<br>    <span class="hljs-title function_">addUser</span>(<span class="hljs-params"></span>) &#123;&#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Editor</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">User</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">name</span>) &#123;<br>        <span class="hljs-variable language_">super</span>(name, <span class="hljs-string">&#x27;editor&#x27;</span>, [<span class="hljs-string">&#x27;home&#x27;</span>, <span class="hljs-string">&#x27;news-manage&#x27;</span>])<br>    &#125;<br>    <span class="hljs-title function_">dataShow</span>(<span class="hljs-params"></span>) &#123;&#125;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getAbstractUserFactory</span>(<span class="hljs-params">role</span>) &#123;<br>    <span class="hljs-keyword">switch</span> (role) &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;super-admin&#x27;</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-title class_">SuperAdmin</span><br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;admin&#x27;</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-title class_">Admin</span><br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;editor&#x27;</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-title class_">Editor</span><br>        <span class="hljs-attr">default</span>:<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;参数错误&#x27;</span>)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="建造者模式"><a href="#建造者模式" class="headerlink" title="建造者模式"></a>建造者模式</h3><p>是一种创建复杂对象的方式，它将一个复杂的对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示<br>工厂模式和抽象工厂主要是为了创建实例或者类簇，关心最终产出的是什么，而不关心创建的过程<br>而建造者模式关心的是创建这个对象的整个过程，甚至于创建对象的每一个细节</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Views</span> &#123;<br>    <span class="hljs-title function_">init</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;views-init&#x27;</span>);<br>    &#125;<br>    <span class="hljs-title function_">getData</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;views-getdata&#x27;</span>);<br>    &#125;<br>    <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;views-render&#x27;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Components</span> &#123;<br>    <span class="hljs-title function_">init</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;components-init&#x27;</span>);<br>    &#125;<br>    <span class="hljs-title function_">getData</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve</span>) =&gt;</span> &#123;<br>            <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>                <span class="hljs-title function_">resolve</span>(<span class="hljs-string">&#x27;components-data&#x27;</span>)<br>            &#125;, <span class="hljs-number">1000</span>)<br>        &#125;)<br>    &#125;<br>    <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;components-render&#x27;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Creater</span> &#123;<br>    <span class="hljs-keyword">async</span> <span class="hljs-title function_">startBuild</span>(<span class="hljs-params">builder</span>) &#123;<br>        <span class="hljs-keyword">await</span> builder.<span class="hljs-title function_">init</span>()<br>        <span class="hljs-keyword">await</span> builder.<span class="hljs-title function_">getData</span>()<br>        <span class="hljs-keyword">await</span> builder.<span class="hljs-title function_">render</span>()<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> c1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Creater</span>().<span class="hljs-title function_">startBuild</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Views</span>())<br><span class="hljs-keyword">const</span> c2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Creater</span>().<span class="hljs-title function_">startBuild</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Components</span>())<br></code></pre></td></tr></table></figure>

<h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><p>保证一个类仅有一个实例，并提供一个访问它的全局访问点<br>主要解决一个全局使用的类频繁的创建和销毁，占用内存</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//闭包形式</span><br><span class="hljs-keyword">let</span> singleton = (<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">let</span> instance<br><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>        <span class="hljs-title function_">constructor</span>(<span class="hljs-params">name, age</span>) &#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-function">(<span class="hljs-params">name, age</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">if</span> (!instance) &#123;<br>            instance = <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(name, age)<br>        &#125;<br>        <span class="hljs-keyword">return</span> instance<br>    &#125;<br>&#125;)()<br><span class="hljs-comment">// console.log(singleton());</span><br><span class="hljs-comment">// console.log(singleton(&#x27;jack&#x27;, 25) === singleton(&#x27;rose&#x27;, 26)); //说明instance没有被回收，被外部引用导致不会释放</span><br><br><span class="hljs-comment">//es6写法</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Singleton</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">name, age</span>) &#123;<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-title class_">Singleton</span>.<span class="hljs-property">instance</span>) &#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age<br>            <span class="hljs-title class_">Singleton</span>.<span class="hljs-property">instance</span> = <span class="hljs-variable language_">this</span><br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title class_">Singleton</span>.<span class="hljs-property">instance</span><br>    &#125;<br>    <span class="hljs-title function_">say</span>(<span class="hljs-params"></span>) &#123;&#125;<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Singleton</span>());<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Singleton</span>() === <span class="hljs-keyword">new</span> <span class="hljs-title class_">Singleton</span>(<span class="hljs-string">&#x27;夹克&#x27;</span>, <span class="hljs-number">23</span>));<br></code></pre></td></tr></table></figure>

<h3 id="装饰器模式"><a href="#装饰器模式" class="headerlink" title="装饰器模式"></a>装饰器模式</h3><p>装饰器模式能够很好的对已有的功能进行拓展，不会更改原有的代码，对其他业务产生影响<br>方便我们在较少的改动下对软件功能进行拓展</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Function</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">before</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">beforeFn</span>) &#123;<br>    <span class="hljs-keyword">let</span> _this = <span class="hljs-variable language_">this</span> <span class="hljs-comment">//this为test</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-comment">//this为window</span><br>        beforeFn.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>, <span class="hljs-variable language_">arguments</span>) <span class="hljs-comment">//arguments为test的参数</span><br>        <span class="hljs-keyword">return</span> _this.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>, <span class="hljs-variable language_">arguments</span>)<br>    &#125;<br>&#125;<br><span class="hljs-title class_">Function</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">after</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">afterFn</span>) &#123;<br>    <span class="hljs-keyword">let</span> _this = <span class="hljs-variable language_">this</span> <span class="hljs-comment">//this为ƒ () &#123;beforeFn.apply(this, arguments)return _this.apply(this, arguments)&#125;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-comment">//this为window</span><br>        <span class="hljs-keyword">let</span> res = _this.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>, <span class="hljs-variable language_">arguments</span>)<br>        afterFn.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>, <span class="hljs-variable language_">arguments</span>)<br>        <span class="hljs-keyword">return</span> res<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">test</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;1111&#x27;</span>);<br>&#125;<br><span class="hljs-comment">// console.dir(test);</span><br><br><span class="hljs-comment">//test = new Function</span><br>test1 = test.<span class="hljs-title function_">before</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;before&#x27;</span>);<br>&#125;).<span class="hljs-title function_">after</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;after&#x27;</span>);<br>&#125;)<br><span class="hljs-comment">// console.log(test1);</span><br><span class="hljs-title function_">test1</span>()<br></code></pre></td></tr></table></figure>

<h3 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h3><p>将一个类的接口转换成客户希望的另一个接口，适配器模式让那些接口不兼容的类可以一起工作</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">TencentMap</span> &#123;<br>    <span class="hljs-title function_">show</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;腾讯地图开始渲染&#x27;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">GaodeMap</span> &#123;<br>    <span class="hljs-title function_">display</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;高德地图开始渲染&#x27;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TencentAdapater</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">TencentMap</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">super</span>()<br>    &#125;<br>    <span class="hljs-title function_">display</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">show</span>()<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">renderMap</span>(<span class="hljs-params">map</span>) &#123;<br>    map.<span class="hljs-title function_">display</span>()<br>&#125;<br><span class="hljs-title function_">renderMap</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TencentAdapater</span>())<br><span class="hljs-title function_">renderMap</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">GaodeMap</span>())<br></code></pre></td></tr></table></figure>

<h3 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h3><p>策略模式定义了一系列算法，并将每一个算法封装起来，使它们可以相互替换，且算法的变化不会影响使用算法的客户，易扩展<br>策略模式属于对象行为模式，通过对算法进行封装，把使用算法的责任和算法的实现分开，并委派给不同的对象对这些算法进行管理</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> strategy = &#123;<br>    <span class="hljs-string">&#x27;A&#x27;</span>: <span class="hljs-function">(<span class="hljs-params">salary</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">return</span> salary * <span class="hljs-number">4</span><br>    &#125;,<br>    <span class="hljs-string">&#x27;B&#x27;</span>: <span class="hljs-function">(<span class="hljs-params">salary</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">return</span> salary * <span class="hljs-number">3</span><br>    &#125;,<br>    <span class="hljs-string">&#x27;C&#x27;</span>: <span class="hljs-function">(<span class="hljs-params">salary</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">return</span> salary * <span class="hljs-number">2</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">calBonus</span>(<span class="hljs-params">level, salary</span>) &#123;<br>    <span class="hljs-keyword">return</span> strategy[level](salary)<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">calBonus</span>(<span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-number">10000</span>));<br></code></pre></td></tr></table></figure>

<h3 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h3><p>代理模式(proxy)，为其他对象提供一种代理以控制对这个对象的访问<br>使得代理对象控制具体对象的引用，代理几乎可以是任何对象：文件、资源、内存中的对象，或者是一些难以复制的东西</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Idol</span> &#123;<br>    <span class="hljs-title function_">dance</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;唱跳rap&#x27;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">IdolProxy</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">idol</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Idol</span>()<br>    &#125;<br>    <span class="hljs-title function_">talk</span>(<span class="hljs-params">price</span>) &#123;<br>        <span class="hljs-keyword">if</span> (price &gt;= <span class="hljs-number">10000</span>) &#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">idol</span>.<span class="hljs-title function_">dance</span>()<br>        &#125;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;没排面&#x27;</span>)<br>    &#125;<br>&#125;<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">IdolProxy</span>().<span class="hljs-title function_">talk</span>(<span class="hljs-number">10000</span>)<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">IdolProxy</span>().<span class="hljs-title function_">talk</span>(<span class="hljs-number">1000</span>)<br><br><span class="hljs-comment">//proxy使用</span><br><span class="hljs-keyword">let</span> zhiyin = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;鸡&#x27;</span>,<br>    <span class="hljs-attr">price</span>: <span class="hljs-number">1000</span><br>&#125;<br><span class="hljs-keyword">let</span> proxy = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Proxy</span>(zhiyin, &#123;<br>    <span class="hljs-title function_">get</span>(<span class="hljs-params">target, key</span>) &#123;<br>        <span class="hljs-keyword">if</span> (key === <span class="hljs-string">&#x27;price&#x27;</span>) &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;问了价钱&#x27;</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> target[key]<br>    &#125;,<br>    <span class="hljs-title function_">set</span>(<span class="hljs-params">target, key, value</span>) &#123;<br>        <span class="hljs-keyword">if</span> (key === <span class="hljs-string">&#x27;price&#x27;</span> &amp;&amp; value &gt; target[key]) &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;成交&#x27;</span>);<br>            target[key] = value<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;别来沾边&#x27;</span>)<br>        &#125;<br>    &#125;<br>&#125;)<br><span class="hljs-comment">// console.log(proxy.price);</span><br><span class="hljs-comment">// proxy.price = 10000</span><br><br><span class="hljs-comment">//精简版vue3</span><br><span class="hljs-keyword">let</span> vm = &#123;&#125;<br><span class="hljs-keyword">let</span> vueProxy = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Proxy</span>(vm, &#123;<br>    <span class="hljs-title function_">get</span>(<span class="hljs-params">target, key</span>) &#123;<br>        <span class="hljs-keyword">return</span> target[key]<br>    &#125;,<br>    <span class="hljs-title function_">set</span>(<span class="hljs-params">target, key, value</span>) &#123;<br>        <span class="hljs-keyword">if</span> (key === <span class="hljs-string">&#x27;data&#x27;</span>) &#123;<br>            <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.app&#x27;</span>).<span class="hljs-property">innerHTML</span> = value <span class="hljs-comment">//此处为vue内部操作dom</span><br>            target[key] = value<br>        &#125;<br>    &#125;<br>&#125;)<br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;input[type=&quot;text&quot;]&#x27;</span>).<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;input&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">event</span>) =&gt;</span> &#123;<br>    vueProxy.<span class="hljs-property">data</span> = event.<span class="hljs-property">target</span>.<span class="hljs-property">value</span><br>&#125;)<br></code></pre></td></tr></table></figure>

<h3 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h3><p>观察者模式包含观察目标和观察者两类对象，一个目标可以有任意数目与之相依赖的观察者<br>一旦观察目标的状态发生改变，所有的观察者都将得到通知<br>观察者和目标要相互知道<br>缺点：不能对时间通知进行细分管控，如筛选通知、指定主题事件通知</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Subject</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">observers</span> = []<br>    &#125;<br>    <span class="hljs-title function_">add</span>(<span class="hljs-params">ob</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">observers</span>.<span class="hljs-title function_">push</span>(ob)<br>    &#125;<br>    <span class="hljs-title function_">remove</span>(<span class="hljs-params">ob</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">observers</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">observers</span>.<span class="hljs-title function_">filter</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> item !== ob)<br>    &#125;<br>    <span class="hljs-title function_">notify</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">observers</span>.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> &#123;<br>            item.<span class="hljs-title function_">update</span>()<br>        &#125;)<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Observer</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">name</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name<br>    &#125;<br>    <span class="hljs-title function_">update</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`update---<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.name&#125;</span>`</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">const</span> s = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Subject</span>()<br><span class="hljs-keyword">const</span> ob1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Observer</span>(<span class="hljs-string">&#x27;jack&#x27;</span>)<br><span class="hljs-keyword">const</span> ob2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Observer</span>(<span class="hljs-string">&#x27;rose&#x27;</span>)<br>s.<span class="hljs-title function_">add</span>(ob1)<br>s.<span class="hljs-title function_">add</span>(ob2)<br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    s.<span class="hljs-title function_">remove</span>(ob1)<br>&#125;, <span class="hljs-number">1000</span>)<br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    s.<span class="hljs-title function_">notify</span>()<br>&#125;, <span class="hljs-number">2000</span>)<br></code></pre></td></tr></table></figure>

<h3 id="发布订阅模式"><a href="#发布订阅模式" class="headerlink" title="发布订阅模式"></a>发布订阅模式</h3><p>发布者与订阅者不用相互知道，通过第三方实现调度，属于经过解耦合的观察者模式</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> <span class="hljs-title class_">PubSub</span> = &#123; <span class="hljs-comment">//调度中心</span><br>    <span class="hljs-attr">message</span>: &#123;&#125;,<br>    <span class="hljs-title function_">publish</span>(<span class="hljs-params">name, ...args</span>) &#123;<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-variable language_">this</span>.<span class="hljs-property">message</span>[name]) <span class="hljs-keyword">return</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">message</span>[name].<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">cb</span> =&gt;</span> <span class="hljs-title function_">cb</span>(...args));<br>    &#125;,<br>    <span class="hljs-title function_">subscribe</span>(<span class="hljs-params">name, cb</span>) &#123;<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-variable language_">this</span>.<span class="hljs-property">message</span>[name]) &#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">message</span>[name] = [cb]<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">message</span>[name].<span class="hljs-title function_">push</span>(cb)<br>        &#125;<br>    &#125;,<br>    <span class="hljs-title function_">unsubscribe</span>(<span class="hljs-params">name, cb</span>) &#123;<br>        <span class="hljs-keyword">if</span> (!cb) &#123;<br>            <span class="hljs-keyword">delete</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">message</span>[name]<br>            <span class="hljs-comment">// this.message[name] &amp;&amp; (this.message[name].length = 0)</span><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">message</span>[name] = <span class="hljs-variable language_">this</span>.<span class="hljs-property">message</span>[name].<span class="hljs-title function_">filter</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> item !== cb)<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-title class_">PubSub</span>.<span class="hljs-title function_">subscribe</span>(<span class="hljs-string">&#x27;init&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">...args</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`init`</span>, ...args);<br>&#125;)<br><span class="hljs-title class_">PubSub</span>.<span class="hljs-title function_">subscribe</span>(<span class="hljs-string">&#x27;refr&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">...args</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`refr`</span>, ...args);<br>&#125;)<br><span class="hljs-title class_">PubSub</span>.<span class="hljs-title function_">unsubscribe</span>(<span class="hljs-string">&#x27;init&#x27;</span>)<br><span class="hljs-title class_">PubSub</span>.<span class="hljs-title function_">publish</span>(<span class="hljs-string">&#x27;init&#x27;</span>, <span class="hljs-string">&#x27;000&#x27;</span>, <span class="hljs-string">&#x27;aaa&#x27;</span>)<br><span class="hljs-title class_">PubSub</span>.<span class="hljs-title function_">publish</span>(<span class="hljs-string">&#x27;init&#x27;</span>, <span class="hljs-string">&#x27;001&#x27;</span>)<br><span class="hljs-title class_">PubSub</span>.<span class="hljs-title function_">publish</span>(<span class="hljs-string">&#x27;refr&#x27;</span>, <span class="hljs-string">&#x27;111&#x27;</span>, <span class="hljs-string">&#x27;bbb&#x27;</span>)<br><span class="hljs-title class_">PubSub</span>.<span class="hljs-title function_">publish</span>(<span class="hljs-string">&#x27;refr&#x27;</span>, <span class="hljs-string">&#x27;112&#x27;</span>)<br></code></pre></td></tr></table></figure>

<h3 id="模块模式"><a href="#模块模式" class="headerlink" title="模块模式"></a>模块模式</h3><p>模块化模式最初被定义为在传统软件工程中为类提供私有和公共封装的一种方法<br>能够使一个单独的对象拥有公共、私有的方法和变量，从而屏蔽来自全局作用域的特殊部分，这可以减少我们的函数名与在页面中其他脚本区域内定义的函数名冲突的可能性</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//闭包</span><br><span class="hljs-keyword">const</span> obj = (<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">let</span> count = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">return</span> &#123;<br>        <span class="hljs-title function_">increase</span>(<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-keyword">return</span> ++count<br>        &#125;,<br>        <span class="hljs-title function_">decrease</span>(<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-keyword">return</span> --count<br>        &#125;<br>    &#125;<br>&#125;)()<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj.<span class="hljs-title function_">increase</span>());<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj.<span class="hljs-title function_">decrease</span>());<br><br><span class="hljs-comment">//commonjs  AMD(requirejs)  CMD(seajs)  esModule</span><br></code></pre></td></tr></table></figure>

<h3 id="桥接模式"><a href="#桥接模式" class="headerlink" title="桥接模式"></a>桥接模式</h3><p>将抽象部分与它的实现部分分离，使它们都可以独立的变化<br>使用场景：一个类存在两个或者多个独立变化的维度，且这两个维度都需要扩展(技术栈之间的桥接，如：vue+animate.css)<br>优点：把抽象和实现隔离开，有助于独立管理各个组成部分<br>缺点：每使用一个桥接元素都要增加一次函数调用，这对应用程序的性能会有一些负面影响(提高了系统的复杂度)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//提示-动画类型</span><br><span class="hljs-keyword">const</span> animation = &#123;<br>    <span class="hljs-attr">bounce</span>: &#123;<br>        <span class="hljs-title function_">show</span>(<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;bounce-show&#x27;</span>);<br>        &#125;,<br>        <span class="hljs-title function_">hide</span>(<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;bounce-hide&#x27;</span>);<br>        &#125;<br>    &#125;,<br>    <span class="hljs-attr">fade</span>: &#123;<br>        <span class="hljs-title function_">show</span>(<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;fade-show&#x27;</span>);<br>        &#125;,<br>        <span class="hljs-title function_">hide</span>(<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;fade-hide&#x27;</span>);<br>        &#125;<br>    &#125;,<br>    <span class="hljs-attr">rotate</span>: &#123;<br>        <span class="hljs-title function_">show</span>(<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;rotate-show&#x27;</span>);<br>        &#125;,<br>        <span class="hljs-title function_">hide</span>(<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;rotate-hide&#x27;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Modal</span> &#123; <span class="hljs-comment">//modal|toast|message</span><br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">el, animation</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">el</span> = el<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">animation</span> = animation<br>    &#125;<br>    <span class="hljs-title function_">show</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">animation</span>.<span class="hljs-title function_">show</span>()<br>    &#125;<br>    <span class="hljs-title function_">hide</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">animation</span>.<span class="hljs-title function_">hide</span>()<br>    &#125;<br>&#125;<br><span class="hljs-keyword">const</span> m = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Modal</span>(<span class="hljs-string">&#x27;*&#x27;</span>, animation.<span class="hljs-property">bounce</span>)<br>m.<span class="hljs-title function_">show</span>()<br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    m.<span class="hljs-title function_">hide</span>()<br>&#125;, <span class="hljs-number">1000</span>)<br></code></pre></td></tr></table></figure>

<h3 id="组合模式"><a href="#组合模式" class="headerlink" title="组合模式"></a>组合模式</h3><p>组合模式在对象间形成树形结构<br>组合模式中基本对象和组合对象一致对待<br>无需关心对象有多少层，调用时只需在根部调用</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Folder</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">folder</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">folder</span> = folder<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">list</span> = [] <span class="hljs-comment">//保存子文件夹或文件</span><br>    &#125;<br>    <span class="hljs-title function_">add</span>(<span class="hljs-params">child</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">list</span>.<span class="hljs-title function_">push</span>(child)<br>    &#125;<br>    <span class="hljs-title function_">scan</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;扫描文件夹&#x27;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">folder</span>);<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">list</span>.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">child</span> =&gt;</span> child.<span class="hljs-title function_">scan</span>())<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">File</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">file</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">file</span> = file<br>    &#125;<br>    <span class="hljs-title function_">scan</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;扫描文件&#x27;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">file</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> rootfolder = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Folder</span>(<span class="hljs-string">&#x27;root&#x27;</span>)<br><span class="hljs-comment">// console.log(rootfolder);</span><br><br><span class="hljs-keyword">const</span> cssfolder = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Folder</span>(<span class="hljs-string">&#x27;css&#x27;</span>)<br><span class="hljs-keyword">const</span> imgfolder = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Folder</span>(<span class="hljs-string">&#x27;img&#x27;</span>)<br><span class="hljs-keyword">const</span> homecss = <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&#x27;home.css&#x27;</span>)<br><span class="hljs-keyword">const</span> aboutcss = <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&#x27;about.css&#x27;</span>)<br><span class="hljs-keyword">const</span> bg = <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&#x27;bg.png&#x27;</span>)<br><br>rootfolder.<span class="hljs-title function_">add</span>(cssfolder)<br>rootfolder.<span class="hljs-title function_">add</span>(imgfolder)<br>cssfolder.<span class="hljs-title function_">add</span>(homecss)<br>cssfolder.<span class="hljs-title function_">add</span>(aboutcss)<br>imgfolder.<span class="hljs-title function_">add</span>(bg)<br><br>rootfolder.<span class="hljs-title function_">scan</span>()<br></code></pre></td></tr></table></figure>

<h3 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h3><p>有时候需要向某些对象发送请求，但并不知道请求的接受者是谁，也不知道被请求的的操作是什么。需要一种松耦合的方式来设计程序，使得发送者和接受者能够消除彼此之间的耦合关系<br>发布者(invoker)发出命令，调用命令对象，不知道如何执行与谁执行—客户<br>接受者(receiver)提供对应接口处理请求，不知道谁发起请求—仓库<br>命令对象(command)接收命令，调用接受者对应接口处理发布者的请求—订单</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Receiver</span> &#123;<br>    <span class="hljs-title function_">execute</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Receiver-execute&#x27;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Command</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">receiver</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">receiver</span> = receiver<br>    &#125;<br>    <span class="hljs-title function_">execute</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Command-execute&#x27;</span>);<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">receiver</span>.<span class="hljs-title function_">execute</span>()<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Invoker</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">command</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">command</span> = command<br>    &#125;<br>    <span class="hljs-title function_">order</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Invoker-execute&#x27;</span>);<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">command</span>.<span class="hljs-title function_">execute</span>()<br>    &#125;<br>&#125;<br><span class="hljs-keyword">const</span> command = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Command</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Receiver</span>())<br><span class="hljs-keyword">const</span> client = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Invoker</span>(command)<br>client.<span class="hljs-title function_">order</span>()<br><br><span class="hljs-comment">//宏命令模式 = 命令模式+组合模式</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MacroCommand</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">list</span> = [] <span class="hljs-comment">//子命令</span><br>    &#125;<br>    <span class="hljs-title function_">add</span>(<span class="hljs-params">command</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">list</span>.<span class="hljs-title function_">push</span>(command)<br>    &#125;<br>    <span class="hljs-title function_">execute</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">list</span>.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> item.<span class="hljs-title function_">execute</span>())<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Tabs</span> &#123;<br>    <span class="hljs-title function_">execute</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;选项卡执行&#x27;</span>);<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">init</span>()<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getData</span>()<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">render</span>()<br>    &#125;<br>    <span class="hljs-title function_">init</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Tabs-init&#x27;</span>);<br>    &#125;<br>    <span class="hljs-title function_">getData</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Tabs-getData&#x27;</span>);<br>    &#125;<br>    <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Tabs-render&#x27;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Swiper</span> &#123;<br>    <span class="hljs-title function_">execute</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;轮播执行&#x27;</span>);<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">init</span>()<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getData</span>()<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">render</span>()<br>    &#125;<br>    <span class="hljs-title function_">init</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Swiper-init&#x27;</span>);<br>    &#125;<br>    <span class="hljs-title function_">getData</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Swiper-getData&#x27;</span>);<br>    &#125;<br>    <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Swiper-render&#x27;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">const</span> m = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MacroCommand</span>()<br>m.<span class="hljs-title function_">add</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Tabs</span>())<br>m.<span class="hljs-title function_">add</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Swiper</span>())<br>m.<span class="hljs-title function_">execute</span>()<br></code></pre></td></tr></table></figure>

<h3 id="模板方法模式"><a href="#模板方法模式" class="headerlink" title="模板方法模式"></a>模板方法模式</h3><p>由两部分组成，第一部分是抽象父类，是个模板，第二部分是具体的实现子类<br>在抽象父类中封装了子类的算法框架，包括实现一些公共方法以及封装子类中所有方法的执行顺序<br>子类通过继承这个抽象类，继承了整个算法结构，并且可以重写父类的方法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//类似于抽象类或继承</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Template</span> &#123;<br>    <span class="hljs-title function_">init</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">let</span> data = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getData</span>()<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">render</span>(data)<br>    &#125;<br>    <span class="hljs-title function_">getData</span>(<span class="hljs-params"></span>) &#123;&#125;<br>    <span class="hljs-title function_">render</span>(<span class="hljs-params">data</span>) &#123;&#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Header</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Template</span> &#123;<br>    <span class="hljs-title function_">getData</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Header-getData&#x27;</span>);<br>        <span class="hljs-keyword">return</span> [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br>    &#125;<br>    <span class="hljs-title function_">render</span>(<span class="hljs-params">data</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Header-render&#x27;</span>, data);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">const</span> h = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Header</span>()<br>h.<span class="hljs-title function_">init</span>()<br></code></pre></td></tr></table></figure>

<h3 id="迭代器模式"><a href="#迭代器模式" class="headerlink" title="迭代器模式"></a>迭代器模式</h3><p>为遍历不同数据结构的‘集合’提供统一的接口<br>能遍历访问‘集合’数据中的项，不关心项的数据结构</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">iterator</span>(<span class="hljs-params">arr, callback</span>) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; arr.<span class="hljs-property">length</span>; i++) &#123;<br>        <span class="hljs-title function_">callback</span>(arr[i], i)<br>    &#125;<br>&#125;<br><span class="hljs-title function_">iterator</span>([<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>], <span class="hljs-function">(<span class="hljs-params">item, index</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">let</span> li = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;li&#x27;</span>)<br>    li.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">`&lt;span&gt;索引：<span class="hljs-subst">$&#123;index&#125;</span>&lt;/span&gt;  &lt;b&gt;<span class="hljs-subst">$&#123;item&#125;</span>&lt;/b&gt;`</span><br>    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.ul&#x27;</span>).<span class="hljs-title function_">appendChild</span>(li)<br>&#125;)<br><br><span class="hljs-comment">//ES6</span><br><span class="hljs-keyword">const</span> obj = &#123; <span class="hljs-comment">//遍历对象直接用forin,这里想要使用forof</span><br>    <span class="hljs-attr">list</span>: [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>],<br>    [<span class="hljs-title class_">Symbol</span>.<span class="hljs-property">iterator</span>]() &#123;<br>        <span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">let</span> arr = <span class="hljs-variable language_">this</span>.<span class="hljs-property">list</span><br>        <span class="hljs-keyword">return</span> &#123;<br>            <span class="hljs-attr">next</span>: <span class="hljs-function">() =&gt;</span> &#123;<br>                <span class="hljs-keyword">if</span> (i &lt; arr.<span class="hljs-property">length</span>) &#123;<br>                    <span class="hljs-keyword">return</span> &#123;<br>                        <span class="hljs-attr">value</span>: arr[i++],<br>                        <span class="hljs-attr">done</span>: <span class="hljs-literal">false</span><br>                    &#125;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-keyword">return</span> &#123;<br>                        <span class="hljs-attr">value</span>: <span class="hljs-literal">undefined</span>,<br>                        <span class="hljs-attr">done</span>: <span class="hljs-literal">true</span><br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">const</span> ite = obj[<span class="hljs-title class_">Symbol</span>.<span class="hljs-property">iterator</span>]()<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(ite.<span class="hljs-title function_">next</span>());<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(ite.<span class="hljs-title function_">next</span>());<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(ite.<span class="hljs-title function_">next</span>());<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(ite.<span class="hljs-title function_">next</span>());<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> item <span class="hljs-keyword">of</span> obj) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(item);<br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="职责链模式"><a href="#职责链模式" class="headerlink" title="职责链模式"></a>职责链模式</h3><p>使多个对象(接受者)都有机会处理请求，从而避免了请求的发送者与多个接受者直接的耦合关系<br>将这些接受者连成一条链，顺着这条链传递该请求，直接找到能处理该请求的对象<br>场景：作用域链，原型链，事件冒泡<br>优点：单一职责，方便扩充<br>缺点：出错不好排查，需要从链头开始查找</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//未使用职责链</span><br><span class="hljs-keyword">let</span> value<br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;button&#x27;</span>).<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span><br>    value = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;input&#x27;</span>).<span class="hljs-property">value</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(value);<br>    <span class="hljs-keyword">if</span> (value.<span class="hljs-property">length</span> === <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;不能为空&#x27;</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-title class_">Number</span>.<span class="hljs-built_in">isNaN</span>(+value)) &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;必须是数字&#x27;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span> (value.<span class="hljs-property">length</span> &lt; <span class="hljs-number">6</span>) &#123;<br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;大于6位&#x27;</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;)<br><br><span class="hljs-comment">//使用职责链</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">checkEmty</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">if</span> (value.<span class="hljs-property">length</span> === <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;不能为空&#x27;</span>);<br>        <span class="hljs-keyword">return</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;next&#x27;</span><br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">checkNumber</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title class_">Number</span>.<span class="hljs-built_in">isNaN</span>(+value)) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;必须是数字&#x27;</span>);<br>        <span class="hljs-keyword">return</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;next&#x27;</span><br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">checkLength</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">if</span> (value.<span class="hljs-property">length</span> &lt; <span class="hljs-number">6</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;大于6位&#x27;</span>);<br>        <span class="hljs-keyword">return</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;next&#x27;</span><br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Chain</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">fn</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">checkRule</span> = fn<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">nextRule</span> = <span class="hljs-literal">null</span><br>    &#125;<br>    <span class="hljs-title function_">addRule</span>(<span class="hljs-params">nextRule</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">nextRule</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Chain</span>(nextRule)<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">nextRule</span><br>    &#125;<br>    <span class="hljs-title function_">check</span>(<span class="hljs-params"></span>) &#123;<br>        (<span class="hljs-variable language_">this</span>.<span class="hljs-title function_">checkRule</span>() === <span class="hljs-string">&#x27;next&#x27;</span>) &amp;&amp; <span class="hljs-variable language_">this</span>.<span class="hljs-property">nextRule</span>.<span class="hljs-title function_">check</span>()<br>        <span class="hljs-comment">// this.checkRule() === &#x27;next&#x27; ? this.nextRule.check() : null</span><br>    &#125;<br>&#125;<br><span class="hljs-keyword">const</span> chain0 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Chain</span>(checkEmty)<br>chain0<br>    .<span class="hljs-title function_">addRule</span>(checkNumber)<br>    .<span class="hljs-title function_">addRule</span>(checkLength)<br>    .<span class="hljs-title function_">addRule</span>(&#123;<br>        <span class="hljs-attr">check</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;通过验证&#x27;</span>)<br>    &#125;)<br><br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;button&#x27;</span>).<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    value = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;input&#x27;</span>).<span class="hljs-property">value</span><br>    chain0.<span class="hljs-title function_">check</span>()<br>&#125;)<br></code></pre></td></tr></table></figure>

<hr>
<p>参考视频：千峰<a href="https://www.bilibili.com/video/BV1MP4y127kd/">BV1MP4y127kd</a></p>
]]></content>
      <categories>
        <category>前端学习</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>搜索-关键词高亮</title>
    <url>/2023/08/13/a021-%E6%90%9C%E7%B4%A2-%E5%85%B3%E9%94%AE%E8%AF%8D%E9%AB%98%E4%BA%AE/</url>
    <content><![CDATA[<h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><img src="/img/sample/a021/a021.gif" alt="">

<h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><p>根据输入内容，查询对应的搜索结果，并将结果中与关键词匹配的部分高亮显示</p>
<h3 id="代码部分"><a href="#代码部分" class="headerlink" title="代码部分"></a>代码部分</h3><p><strong>App.jsx</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;./assets/index.less&#x27;</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">debounce</span>(<span class="hljs-params">fn, delay, ...arg</span>) &#123;<br>  <span class="hljs-keyword">let</span> timer = <span class="hljs-literal">null</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-built_in">clearTimeout</span>(timer)<br>    timer = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      fn.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>, arg)<br>    &#125;, delay)<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  state = &#123;<br>    <span class="hljs-attr">keyWord</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>    <span class="hljs-attr">matchList</span>: []<br>  &#125;<br>  getData = <span class="hljs-title function_">debounce</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> &#123; keyWord &#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span><br><br>    keyWord.<span class="hljs-title function_">trim</span>() &amp;&amp;<br>      <span class="hljs-title function_">fetch</span>(<span class="hljs-string">`https://api.github.com/search/users?q=<span class="hljs-subst">$&#123;keyWord&#125;</span>`</span>,<br>        &#123;<br>          <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;get&#x27;</span>,<br>          <span class="hljs-attr">headers</span>: &#123;<br>            <span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;application/json&#x27;</span><br>          &#125;<br>        &#125;<br>      ).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> res.<span class="hljs-title function_">json</span>()).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">ress</span> =&gt;</span> &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123; <span class="hljs-attr">matchList</span>: ress.<span class="hljs-property">items</span> &#125;, <span class="hljs-function">() =&gt;</span> &#123;<br>          <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">hightLight</span>()<br>        &#125;)<br>      &#125;)<br>  &#125;, <span class="hljs-number">200</span>)<br><br>  hightLight = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> &#123; keyWord, matchList &#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span><br>    matchList.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> &#123;<br>      item[<span class="hljs-string">&quot;name-highlights&quot;</span>] =<br>        item.<span class="hljs-property">login</span>.<span class="hljs-title function_">replace</span>(<br>          <span class="hljs-keyword">new</span> <span class="hljs-title class_">RegExp</span>(keyWord, <span class="hljs-string">&quot;ig&quot;</span>),<br>          <span class="hljs-function">(<span class="hljs-params">match</span>) =&gt;</span> <span class="hljs-string">&#x27;&lt;span style=&quot;color:#0EDC9B&quot;&gt;&#x27;</span> + match + <span class="hljs-string">&quot;&lt;/span&gt;&quot;</span>)<br>    &#125;);<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123; <span class="hljs-attr">matchList</span>: [...matchList] &#125;)<br>  &#125;<br><br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> &#123; matchList &#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span><br><br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#x27;app&#x27;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#x27;header&#x27;</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">input</span></span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&#x27;请输入github用户名&#x27;</span></span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">onInput</span>=<span class="hljs-string">&#123;(evt)</span> =&gt;</span> &#123;</span><br><span class="language-xml">              this.setState(&#123; keyWord: evt.target.value &#125;,</span><br><span class="language-xml">                () =&gt; this.getData())</span><br><span class="language-xml">            &#125;&#125; /&gt;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#x27;list&#x27;</span>&gt;</span></span><br><span class="language-xml">          &#123;</span><br><span class="language-xml">            matchList &amp;&amp; matchList.map(item =&gt;</span><br><span class="language-xml">              <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#x27;list-item&#x27;</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;item.id&#125;</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&#123;item.avatar_url&#125;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span> /&gt;</span></span><br><span class="language-xml">                &#123;item[&quot;name-highlights&quot;] ?</span><br><span class="language-xml">                  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">dangerouslySetInnerHTML</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">__html:</span> <span class="hljs-attr">item</span>[&quot;<span class="hljs-attr">name-highlights</span>&quot;] &#125;&#125;&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> :</span><br><span class="language-xml">                  <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;item.login&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>&#125;</span><br><span class="language-xml">              <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>)</span><br><span class="language-xml">          &#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">App</span>;<br><br></code></pre></td></tr></table></figure>

<p><strong>index.less</strong></p>
<figure class="highlight less"><table><tr><td class="code"><pre><code class="hljs less">* &#123;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">box-sizing</span>: border-box;<br>&#125;<br><br><span class="hljs-selector-tag">html</span>,<br><span class="hljs-selector-tag">body</span>,<br><span class="hljs-selector-id">#root</span> &#123;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;<br>&#125;<br><br><span class="hljs-selector-class">.app</span> &#123;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br>    <span class="hljs-attribute">display</span>: flex;<br>    <span class="hljs-attribute">flex-direction</span>: column;<br><br>    <span class="hljs-selector-class">.list</span> &#123;<br>        <span class="hljs-attribute">flex</span>: <span class="hljs-number">1</span>;<br>        <span class="hljs-attribute">overflow-y</span>: scroll;<br>        <span class="hljs-attribute">display</span>: flex;<br>        <span class="hljs-attribute">flex-direction</span>: column;<br>        <span class="hljs-attribute">padding</span>: <span class="hljs-number">1em</span> <span class="hljs-number">0</span>;<br><br>        <span class="hljs-selector-class">.list-item</span> &#123;<br>            <span class="hljs-attribute">padding</span>: .<span class="hljs-number">5em</span> <span class="hljs-number">1em</span>;<br>            <span class="hljs-attribute">display</span>: flex;<br>            <span class="hljs-attribute">align-items</span>: center;<br>            <span class="hljs-attribute">border-bottom</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#ccc</span>;<br><br>            <span class="hljs-selector-tag">img</span> &#123;<br>                <span class="hljs-attribute">width</span>: <span class="hljs-number">5em</span>;<br>                <span class="hljs-attribute">height</span>: <span class="hljs-number">5em</span>;<br>                <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">50%</span>;<br>                <span class="hljs-attribute">margin-right</span>: <span class="hljs-number">1em</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-selector-tag">input</span><span class="hljs-selector-attr">[type=<span class="hljs-string">&quot;text&quot;</span>]</span> &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">3em</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端学习</category>
      </categories>
      <tags>
        <tag>关键词高亮</tag>
      </tags>
  </entry>
  <entry>
    <title>自实现tab切换效果</title>
    <url>/2023/11/24/a022-%E8%87%AA%E5%AE%9E%E7%8E%B0tab%E5%88%87%E6%8D%A2%E6%95%88%E6%9E%9C/</url>
    <content><![CDATA[<h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><img src="/img/sample/a022/a022.gif" alt="">

<h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><p>类似于vant组件库的tab组件，可以实现超长自动滚动居中，下划线动态移动</p>
<h3 id="代码部分"><a href="#代码部分" class="headerlink" title="代码部分"></a>代码部分</h3><p>TabScroll.jsx</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TabScroll</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>    nav = [<span class="hljs-string">&#x27;标签1&#x27;</span>, <span class="hljs-string">&#x27;标签2&#x27;</span>, <span class="hljs-string">&#x27;标签3&#x27;</span>, <span class="hljs-string">&#x27;标签4&#x27;</span>, <span class="hljs-string">&#x27;标签5&#x27;</span>, <span class="hljs-string">&#x27;标签6&#x27;</span>, <span class="hljs-string">&#x27;标签7&#x27;</span>]<br>    state = &#123;<br>        <span class="hljs-attr">navIndex</span>: <span class="hljs-number">0</span><br>    &#125;<br><br>    <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">const</span> &#123; navIndex &#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span><br>        <span class="hljs-keyword">return</span> (<br>            <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#x27;tab-scroll&#x27;</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#x27;tab&#x27;</span>&gt;</span></span><br><span class="language-xml">                    &#123;this.nav.map((item, index) =&gt;</span><br><span class="language-xml">                        <span class="hljs-tag">&lt;<span class="hljs-name">div</span></span></span><br><span class="hljs-tag"><span class="language-xml">                            <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;index&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">                            <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;[</span>&#x27;<span class="hljs-attr">tab-item</span>&#x27;, <span class="hljs-attr">navIndex</span> === <span class="hljs-string">index</span> ? &#x27;<span class="hljs-attr">cur</span>&#x27; <span class="hljs-attr">:</span> &#x27;&#x27;]<span class="hljs-attr">.join</span>(&#x27; &#x27;)&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">                            <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="language-xml">                                this.setState(&#123; navIndex: index &#125;)</span><br><span class="language-xml"></span><br><span class="language-xml">                                const curTabDom = document.querySelectorAll(&#x27;.tab-item&#x27;)[index]</span><br><span class="language-xml"></span><br><span class="language-xml">                                //点击居中</span><br><span class="language-xml">                                const scrollDom = document.querySelector(&#x27;.tab&#x27;)</span><br><span class="language-xml">                                const left = curTabDom.offsetLeft - (scrollDom.offsetWidth - curTabDom.offsetWidth) / 2</span><br><span class="language-xml">                                scrollDom.scrollTo(&#123; left, behavior: &#x27;smooth&#x27; &#125;);</span><br><span class="language-xml"></span><br><span class="language-xml">                                //横线移动</span><br><span class="language-xml">                                const line = document.querySelector(&#x27;.line&#x27;)</span><br><span class="language-xml">                                line.style = ` transform: translateX($&#123;curTabDom.offsetLeft + (curTabDom.offsetWidth / 2) - line.offsetWidth&#125;px);transition-duration: 0.2s;`;</span><br><span class="language-xml">                            &#125;&#125;</span><br><span class="language-xml">                        &gt;</span><br><span class="language-xml">                            <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;item&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">                        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>)</span><br><span class="language-xml">                    &#125;</span><br><span class="language-xml">                    <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#x27;line&#x27;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>内容&#123;navIndex + 1&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>        );<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">TabScroll</span>;<br></code></pre></td></tr></table></figure>

<p>index.less</p>
<figure class="highlight less"><table><tr><td class="code"><pre><code class="hljs less"><span class="hljs-selector-class">.tab-scroll</span> &#123;<br>  <span class="hljs-selector-class">.tab</span> &#123;<br>    <span class="hljs-attribute">display</span>: flex;<br>    <span class="hljs-attribute">align-items</span>: center;<br>    <span class="hljs-attribute">flex-wrap</span>: nowrap;<br>    <span class="hljs-attribute">overflow-x</span>: scroll;<br>    <span class="hljs-attribute">position</span>: relative;<br><br>    <span class="hljs-selector-tag">&amp;</span>::<span class="hljs-selector-tag">-webkit-scrollbar</span> &#123;<br>      <span class="hljs-attribute">width</span>: <span class="hljs-number">0</span>;<br>      <span class="hljs-attribute">display</span>: none;<br>    &#125;<br><br>    <span class="hljs-selector-class">.tab-item</span> &#123;<br>      <span class="hljs-attribute">flex-shrink</span>: <span class="hljs-number">0</span>;<br>      <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>      <span class="hljs-attribute">height</span>: <span class="hljs-number">40px</span>;<br>      <span class="hljs-attribute">line-height</span>: <span class="hljs-number">40px</span>;<br>      <span class="hljs-attribute">text-align</span>: center;<br>      <span class="hljs-attribute">background</span>: <span class="hljs-number">#e0e0e0</span>;<br>      <span class="hljs-attribute">border-right</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#fff</span>;<br>      <span class="hljs-attribute">position</span>: relative;<br><br>      <span class="hljs-comment">// &amp;.cur &#123;</span><br>      <span class="hljs-comment">//   background: skyblue;</span><br>      <span class="hljs-comment">// &#125;</span><br>    &#125;<br><br>    <span class="hljs-selector-class">.line</span> &#123;<br>      <span class="hljs-attribute">z-index</span>: <span class="hljs-number">2</span>;<br>      <span class="hljs-attribute">position</span>: absolute;<br>      <span class="hljs-attribute">bottom</span>: <span class="hljs-number">0</span>;<br>      <span class="hljs-attribute">left</span>: <span class="hljs-number">25px</span>; <span class="hljs-comment">//第一个tab-line到左侧距离</span><br>      <span class="hljs-attribute">width</span>: <span class="hljs-number">50px</span>;<br>      <span class="hljs-attribute">height</span>: <span class="hljs-number">6px</span>;<br>      <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">3px</span>;<br>      <span class="hljs-attribute">background-color</span>: pink;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端学习</category>
      </categories>
      <tags>
        <tag>切换居中</tag>
        <tag>下划线动画</tag>
      </tags>
  </entry>
  <entry>
    <title>多行文本展开收起</title>
    <url>/2024/01/01/a023-%E5%A4%9A%E8%A1%8C%E6%96%87%E6%9C%AC%E5%B1%95%E5%BC%80%E6%94%B6%E8%B5%B7/</url>
    <content><![CDATA[<h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><img src="/img/sample/a023/a023.gif" alt="">

<h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><p>文字区域超过4行只显示4行，且显示展开按钮，点击展示剩余文字<br>文字全部展开后，显示收起按钮，点击还原为之前的状态</p>
<h3 id="代码部分"><a href="#代码部分" class="headerlink" title="代码部分"></a>代码部分</h3><p>App.jsx</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; useState, useRef, useEffect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;./App.less&#x27;</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [fold, setFold] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">true</span>)<br>  <span class="hljs-keyword">const</span> [isMoreThan4Line, setisMoreThan4Line] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">false</span>);<br>  <span class="hljs-keyword">const</span> descBox = <span class="hljs-title function_">useRef</span>(<span class="hljs-literal">null</span>)<br>  <span class="hljs-keyword">const</span> renderRef = <span class="hljs-title function_">useRef</span>(<span class="hljs-literal">true</span>)<br><br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (renderRef.<span class="hljs-property">current</span>) &#123;<br>      renderRef.<span class="hljs-property">current</span> = <span class="hljs-literal">false</span><br>      <span class="hljs-keyword">return</span><br>    &#125;<br>    <span class="hljs-title function_">computedLine</span>()<br>  &#125;, []);<br><br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">computedLine</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>    <span class="hljs-keyword">const</span> height = descBox.<span class="hljs-property">current</span>.<span class="hljs-property">scrollHeight</span>;<br><br>    <span class="hljs-keyword">const</span> lineHeight = <span class="hljs-variable language_">window</span><br>      .<span class="hljs-title function_">getComputedStyle</span>(descBox.<span class="hljs-property">current</span>)<br>      .<span class="hljs-property">lineHeight</span>.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/\d+\.*\d+/g</span>)[<span class="hljs-number">0</span>];<br><br>    <span class="hljs-title function_">setisMoreThan4Line</span>(height / lineHeight &gt; <span class="hljs-number">4</span>)<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;App&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;acco-b&quot;</span> &gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;toggleInput&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;toggleInput&quot;</span> <span class="hljs-attr">checked</span>=<span class="hljs-string">&#123;fold&#125;</span> <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;(evt)</span> =&gt;</span> setFold(evt.target.checked)&#125; /&gt;</span><br><span class="language-xml"></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;activity-desc&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;descBox&#125;</span>&gt;</span></span><br><span class="language-xml">          小王子看到一座盛开的玫瑰园时，他非常伤心。因为他的玫瑰对他说谎说她是宇宙中一朵独一无二的花。不过，在狐狸的引导下，小王子认识她们和他的玫瑰虽然类似，但因为他给他的玫瑰盖过罩子，因为他给她竖过屏风，因为他给她除过毛虫，因为他听过她的埋怨、吹嘘，甚至她的沉默，所以他的那朵玫瑰在世上是唯一的。</span><br><span class="language-xml"></span><br><span class="language-xml">          &#123;fold &amp;&amp; isMoreThan4Line &amp;&amp; (</span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;btn&quot;</span> <span class="hljs-attr">htmlFor</span>=<span class="hljs-string">&quot;toggleInput&quot;</span>&gt;</span>展开<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">          )&#125;</span><br><span class="language-xml">          &#123;!fold &amp;&amp; isMoreThan4Line &amp;&amp; (</span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;btn-no-absolute&quot;</span> <span class="hljs-attr">htmlFor</span>=<span class="hljs-string">&quot;toggleInput&quot;</span> &gt;</span>收起<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">          )&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  )<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">App</span><br></code></pre></td></tr></table></figure>

<p>App.less</p>
<figure class="highlight less"><table><tr><td class="code"><pre><code class="hljs less"><span class="hljs-selector-class">.acco-b</span> &#123;<br>    <span class="hljs-attribute">display</span>: flex;<br>    <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">20px</span>;<br><br>    <span class="hljs-selector-class">.toggleInput</span> &#123;<br>        <span class="hljs-attribute">display</span>: none;<br>    &#125;<br><br>    <span class="hljs-selector-class">.toggleInput</span><span class="hljs-selector-pseudo">:checked</span>+<span class="hljs-selector-class">.activity-desc</span> &#123;<br>        <span class="hljs-attribute">display</span>: -webkit-box;<br>        <span class="hljs-attribute">overflow</span>: hidden;<br>        -webkit-line-clamp: 4;<br>        -webkit-box-orient: vertical;<br>    &#125;<br><br>    <span class="hljs-selector-class">.activity-desc</span> &#123;<br>        <span class="hljs-attribute">word-break</span>: break-all;<br>        -webkit-line-clamp: 100;<br>        <span class="hljs-comment">// -webkit-line-clamp: none;</span><br>        <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>        <span class="hljs-attribute">position</span>: relative;<br>        <span class="hljs-attribute">line-height</span>: <span class="hljs-number">18px</span>;<br>        <span class="hljs-attribute">font-size</span>: <span class="hljs-number">15px</span>;<br>        <span class="hljs-attribute">font-weight</span>: <span class="hljs-number">400</span>;<br>        <span class="hljs-attribute">color</span>: <span class="hljs-number">#666666</span>;<br><br>        <span class="hljs-selector-class">.btn</span> &#123;<br>            <span class="hljs-attribute">position</span>: absolute;<br>            <span class="hljs-attribute">bottom</span>: <span class="hljs-number">0px</span>;<br>            <span class="hljs-attribute">right</span>: <span class="hljs-number">0</span>;<br>            <span class="hljs-attribute">line-height</span>: <span class="hljs-number">18px</span>;<br>            <span class="hljs-attribute">font-size</span>: <span class="hljs-number">15px</span>;<br>            <span class="hljs-attribute">color</span>: <span class="hljs-number">#0FD243</span>;<br>            <span class="hljs-attribute">background</span>: <span class="hljs-number">#fff</span>;<br><br>            <span class="hljs-selector-tag">&amp;</span><span class="hljs-selector-pseudo">::before</span> &#123;<br>                <span class="hljs-attribute">content</span>: <span class="hljs-string">&#x27;...&#x27;</span>;<br>                <span class="hljs-attribute">color</span>: <span class="hljs-number">#8a8f99</span>;<br>                <span class="hljs-attribute">transform</span>: translateX(-<span class="hljs-number">100%</span>);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-selector-class">.btn-no-absolute</span> &#123;<br>            <span class="hljs-attribute">float</span>: none;<br>            <span class="hljs-attribute">font-size</span>: <span class="hljs-number">15px</span>;<br>            <span class="hljs-attribute">font-weight</span>: <span class="hljs-number">400</span>;<br>            <span class="hljs-attribute">color</span>: <span class="hljs-number">#0FD243</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<hr>
<!-- [参考文章](https://juejin.cn/post/7065207121175904264) -->]]></content>
      <categories>
        <category>前端学习</category>
      </categories>
      <tags>
        <tag>文本折叠</tag>
      </tags>
  </entry>
  <entry>
    <title>分页加载生成瀑布流</title>
    <url>/2024/01/14/a024-%E5%88%86%E9%A1%B5%E5%8A%A0%E8%BD%BD%E7%94%9F%E6%88%90%E7%80%91%E5%B8%83%E6%B5%81/</url>
    <content><![CDATA[<h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><img src="/img/sample/a024/a024.gif" alt="">

<h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><p>列表数据展示成瀑布流，分页加载更多<br>新的数据自动添加到较矮的那一列最后</p>
<h3 id="代码部分"><a href="#代码部分" class="headerlink" title="代码部分"></a>代码部分</h3><p>App.jsx</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123;<br>    <span class="hljs-title class_">Component</span><br>&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;./App.less&#x27;</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">random</span>(<span class="hljs-params">start, end</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * (end - start) + start;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">debounce</span>(<span class="hljs-params">fn, delay</span>) &#123;<br>    <span class="hljs-keyword">let</span> timer = <span class="hljs-literal">null</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-built_in">clearTimeout</span>(timer)<br>        timer = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>            fn.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>, <span class="hljs-variable language_">arguments</span>)<br>        &#125;, delay)<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>    count = <span class="hljs-number">0</span><br>    <span class="hljs-title function_">componentDidMount</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">addNew</span>(<span class="hljs-number">20</span>)<br>    &#125;<br><br>    addNew = <span class="hljs-function">(<span class="hljs-params">times</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">let</span> masonry = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;masonry&quot;</span>);<br>        <span class="hljs-keyword">let</span> columns = masonry.<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&quot;.masonry-column&quot;</span>);<br>        <span class="hljs-keyword">let</span> minHeightColumn = columns[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-variable language_">this</span>.<span class="hljs-property">count</span>; i &lt; times + <span class="hljs-variable language_">this</span>.<span class="hljs-property">count</span>; i++) &#123;<br>            columns.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">ele</span> =&gt;</span> &#123;<br>                <span class="hljs-keyword">if</span> (ele.<span class="hljs-property">clientHeight</span> &lt; minHeightColumn.<span class="hljs-property">clientHeight</span>) &#123;<br>                    minHeightColumn = ele;<br>                &#125;<br>            &#125;);<br>            <span class="hljs-keyword">let</span> newItem = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;div&#x27;</span>);<br>            newItem.<span class="hljs-property">classList</span>.<span class="hljs-title function_">add</span>(<span class="hljs-string">&#x27;item&#x27;</span>);<br>            newItem.<span class="hljs-property">style</span>.<span class="hljs-property">height</span> = <span class="hljs-string">`<span class="hljs-subst">$&#123;<span class="hljs-built_in">Math</span>.random() * <span class="hljs-number">200</span> + <span class="hljs-number">70</span>&#125;</span>px`</span>;<br>            newItem.<span class="hljs-property">style</span>.<span class="hljs-property">backgroundColor</span> = <span class="hljs-string">`rgb(<span class="hljs-subst">$&#123;random(<span class="hljs-number">0</span>, <span class="hljs-number">255</span>)&#125;</span>,<span class="hljs-subst">$&#123;random(<span class="hljs-number">0</span>, <span class="hljs-number">255</span>)&#125;</span>,<span class="hljs-subst">$&#123;random(<span class="hljs-number">0</span>, <span class="hljs-number">255</span>)&#125;</span>)`</span><br>            newItem.<span class="hljs-property">innerHTML</span> = i + <span class="hljs-number">1</span><br>            minHeightColumn.<span class="hljs-title function_">appendChild</span>(newItem);<br>        &#125;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">count</span> += times<br>    &#125;<br>    <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> (       <br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">className</span>=<span class="hljs-string">&#x27;App&#x27;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">onScroll</span>=<span class="hljs-string">&#123;debounce((evt)</span> =&gt;</span> &#123;</span><br><span class="language-xml">          let scrollTop = evt.target.scrollTop</span><br><span class="language-xml">          let scrollHeight = evt.target.scrollHeight</span><br><span class="language-xml">          let clientHeight = evt.target.clientHeight</span><br><span class="language-xml">          if (scrollHeight - clientHeight - scrollTop &lt; 200) &#123;</span><br><span class="language-xml">            this.addNew(20)</span><br><span class="language-xml">          &#125;</span><br><span class="language-xml">        &#125;, 200)&#125;</span><br><span class="language-xml">        &gt;</span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;masonry&quot;</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;masonry-column-container&quot;</span>&gt;</span></span><br><span class="language-xml">              <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;masonry-column&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;masonry-column-container&quot;</span>&gt;</span></span><br><span class="language-xml">              <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;masonry-column&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;masonry-column-container&quot;</span>&gt;</span></span><br><span class="language-xml">              <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;masonry-column&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>        );<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">App</span>;<br></code></pre></td></tr></table></figure>

<p>App.less</p>
<figure class="highlight less"><table><tr><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">html</span>,<br><span class="hljs-selector-tag">body</span>,<br><span class="hljs-selector-id">#root</span> &#123;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;<br>    <span class="hljs-attribute">overflow</span>: hidden;<br>&#125;<br><br><span class="hljs-selector-class">.App</span> &#123;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;<br>    <span class="hljs-attribute">overflow-y</span>: auto;<br>&#125;<br><br><span class="hljs-selector-id">#masonry</span> &#123;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br>    <span class="hljs-attribute">display</span>: grid;<br>    <span class="hljs-attribute">grid-template-columns</span>: repeat(<span class="hljs-number">3</span>, <span class="hljs-number">1</span>fr);<br>    <span class="hljs-attribute">gap</span>: <span class="hljs-number">10px</span>;<br>&#125;<br><br><span class="hljs-selector-id">#masonry</span> <span class="hljs-selector-class">.masonry-column</span> &#123;<br>    <span class="hljs-attribute">position</span>: relative;<br>&#125;<br><br><span class="hljs-selector-id">#masonry</span> <span class="hljs-selector-class">.item</span> &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br>    <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">10px</span>;<br>    <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">1em</span>;<br>    <span class="hljs-attribute">display</span>: flex;<br>    <span class="hljs-attribute">align-items</span>: center;<br>    <span class="hljs-attribute">justify-content</span>: center;<br>&#125;<br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端学习</category>
      </categories>
      <tags>
        <tag>瀑布流</tag>
      </tags>
  </entry>
  <entry>
    <title>【置顶】写在前面</title>
    <url>/2022/07/15/b001-%E5%86%99%E5%9C%A8%E5%89%8D%E9%9D%A2/</url>
    <content><![CDATA[<p><strong>看了网上很多大神的文章，最近想着搭建一个自己的博客，发现hexo+git简单又好用，于是乎就自己琢磨，搭建了这个博客！</strong><br><strong>交流学习的同时记录一下自己的所见所想！</strong><br><strong>以前的学习笔记也会陆陆续续的搬运过来！</strong><br><strong>有些代码量大的知识点，我会尽量精简！</strong><br><strong>欢迎留言评论！</strong><br><strong>life is fantastic！</strong></p>
<p>今日份推荐歌曲《还在流浪》，杰伦新歌耶！</p>
<iframe src="//player.bilibili.com/player.html?aid=215901212&bvid=BV1Da411n793&cid=772894060&page=1" width="100%" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>
]]></content>
  </entry>
</search>
